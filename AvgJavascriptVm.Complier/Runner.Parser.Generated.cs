// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 2/15/2018 6:59:41 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 2/15/2018 6:57:48 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,ELSE=6,
    WHILE=7,DO=8,FOR=9,RETURN=10,VAR=11,TRUE=12,
    FALSE=13,SEMICOLON=14,DOT=15,COMMA=16,LPARENTH=17,RPARENTH=18,
    LCURLYBRACE=19,RCURLYBRACE=20,LBRACKET=21,RBRACKET=22,COLON=23,ASSIGN=24,
    ADDASSG=25,SUBASSG=26,MULTASSG=27,DIVASSG=28,REMASSG=29,EXPASSG=30,
    LEFTSHFTASG=31,RIGHTSHFTASSG=32,URIGHTSHIFTASSG=33,BITWISEANDASSG=34,BITWISEXORASSG=35,BITWISEORASSG=36,
    REMAINDER=37,INCREMENT=38,DECREMENT=39,EXPONENTIATION=40,ADDITION=41,SUBTRACTION=42,
    MULTIPLICATION=43,DIVISION=44,UNARYPLUS=45,UNARYMINUS=46,POSTFIX=47,PREFIX=48,
    BITWISEAND=49,BITWISEOR=50,BITWISEXOR=51,BITWISENOT=52,LEFTSHIFT=53,ZEROFILLRIGHTSHIFT=54,
    SIGNPROPRIGHTSHIFT=55,NUMBER=56,IDENTIFIER=57,STRING=58,THEN=59,LEFTSHFTASSG=60,
    URIGHTSHFTASSG=61,STRICTEQUAL=62,STRICTNOTEQUAL=63,EQUAL=64,NOTEQUAL=65,GREATERTHAN=66,
    GREATERTHANOREQUAL=67,LESSTHAN=68,LESSTHANOREQUAL=69};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
			public object add;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[121];
  private static State[] states = new State[226];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements_and_declarations", "statement_or_declaration", 
      "statement", "function_declaration", "statements", "block", "while", "dowhile", 
      "for", "if", "return", "variable_declaration", "statement_expression", 
      "expression", "function_expression", "function_named_expression", "assignment", 
      "binary_valid_expression", "arithmetic", "indexer_expression", "comparison", 
      "bitwise", "lvalue", "boolean", "array", "object", "function_invocation", 
      "property_getter", "indexer_getter", "statement_or_semicolon", "arguments_list", 
      "function_body", "expression_or_empty", "variable_declaration_identifier", 
      "array_list", "object_properties_list", "object_property", "object_property_identifier", 
      "function_invocation_arguments_list", };

  static RunnerParser() {
    states[0] = new State(new int[]{19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,4,173,3,-3},new int[]{-1,1,-3,3,-4,182,-5,5,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-6,172});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,4,173,3,-2},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-6,172});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-10);
    states[7] = new State(new int[]{20,8,19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,224,56,41,58,225,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-7,9,-38,54,-5,223,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-39,56,-40,59});
    states[8] = new State(-38);
    states[9] = new State(new int[]{20,10,19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-5,11,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112});
    states[10] = new State(-39);
    states[11] = new State(-9);
    states[12] = new State(-11);
    states[13] = new State(new int[]{17,14});
    states[14] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,15,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[15] = new State(new int[]{18,16});
    states[16] = new State(new int[]{19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,14,170},new int[]{-32,17,-5,18,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112});
    states[17] = new State(-52);
    states[18] = new State(-40);
    states[19] = new State(-12);
    states[20] = new State(new int[]{19,222},new int[]{-8,21});
    states[21] = new State(new int[]{7,22});
    states[22] = new State(new int[]{17,23});
    states[23] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,24,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(new int[]{14,26});
    states[26] = new State(-53);
    states[27] = new State(-18);
    states[28] = new State(-21);
    states[29] = new State(new int[]{24,30,25,198,26,200,27,202,28,204,29,206,30,208,31,210,32,212,61,214,34,216,35,218,36,220,38,192,39,193,15,-27,21,-27,17,-27,41,-27,64,-27,49,-27,50,-27,51,-27,53,-27,55,-27,54,-27,65,-27,62,-27,63,-27,66,-27,67,-27,68,-27,69,-27,42,-27,43,-27,44,-27,37,-27,40,-27,14,-27,18,-27,22,-27,16,-27,20,-27});
    states[30] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,31,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[31] = new State(-81);
    states[32] = new State(-35);
    states[33] = new State(-36);
    states[34] = new State(new int[]{15,35,21,37,17,105,41,-24,64,-24,49,-24,50,-24,51,-24,53,-24,55,-24,54,-24,65,-24,62,-24,63,-24,66,-24,67,-24,68,-24,69,-24,42,-24,43,-24,44,-24,37,-24,40,-24,14,-24,18,-24,22,-24,16,-24,20,-24});
    states[35] = new State(new int[]{57,36});
    states[36] = new State(-80);
    states[37] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,38,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[38] = new State(new int[]{22,39});
    states[39] = new State(-79);
    states[40] = new State(-37);
    states[41] = new State(-28);
    states[42] = new State(-29);
    states[43] = new State(-30);
    states[44] = new State(-63);
    states[45] = new State(-64);
    states[46] = new State(-31);
    states[47] = new State(new int[]{22,196,57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-37,48,-16,197,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[48] = new State(new int[]{22,49,16,50});
    states[49] = new State(-65);
    states[50] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,51,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[51] = new State(-68);
    states[52] = new State(-32);
    states[53] = new State(new int[]{57,194,58,195},new int[]{-38,54,-39,56,-40,59});
    states[54] = new State(new int[]{20,55});
    states[55] = new State(-69);
    states[56] = new State(new int[]{16,57,20,-70});
    states[57] = new State(new int[]{57,194,58,195},new int[]{-38,58,-39,56,-40,59});
    states[58] = new State(-71);
    states[59] = new State(new int[]{23,60});
    states[60] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,61,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[61] = new State(-72);
    states[62] = new State(-33);
    states[63] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,64,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[64] = new State(new int[]{18,65});
    states[65] = new State(-34);
    states[66] = new State(new int[]{41,67,64,69,49,71,50,73,51,75,53,77,55,79,54,81,65,83,62,85,63,87,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-22,18,-22,22,-22,16,-22,20,-22});
    states[67] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,68,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[68] = new State(new int[]{41,-102,64,-102,49,-102,50,-102,51,-102,53,-102,55,-102,54,-102,65,-102,62,-102,63,-102,66,-102,67,-102,68,-102,69,-102,42,-102,43,99,44,101,37,103,40,189,14,-102,18,-102,22,-102,16,-102,20,-102});
    states[69] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,70,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[70] = new State(new int[]{41,67,64,-94,49,-94,50,-94,51,-94,53,77,55,79,54,81,65,-94,62,-94,63,-94,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-94,18,-94,22,-94,16,-94,20,-94});
    states[71] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,72,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[72] = new State(new int[]{41,67,64,69,49,-114,50,-114,51,-114,53,77,55,79,54,81,65,83,62,85,63,87,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-114,18,-114,22,-114,16,-114,20,-114});
    states[73] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,74,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[74] = new State(new int[]{41,67,64,69,49,71,50,-115,51,75,53,77,55,79,54,81,65,83,62,85,63,87,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-115,18,-115,22,-115,16,-115,20,-115});
    states[75] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,76,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[76] = new State(new int[]{41,67,64,69,49,71,50,-116,51,-116,53,77,55,79,54,81,65,83,62,85,63,87,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-116,18,-116,22,-116,16,-116,20,-116});
    states[77] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,78,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[78] = new State(new int[]{41,67,64,-118,49,-118,50,-118,51,-118,53,-118,55,-118,54,-118,65,-118,62,-118,63,-118,66,-118,67,-118,68,-118,69,-118,42,97,43,99,44,101,37,103,40,189,14,-118,18,-118,22,-118,16,-118,20,-118});
    states[79] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,80,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[80] = new State(new int[]{41,67,64,-119,49,-119,50,-119,51,-119,53,-119,55,-119,54,-119,65,-119,62,-119,63,-119,66,-119,67,-119,68,-119,69,-119,42,97,43,99,44,101,37,103,40,189,14,-119,18,-119,22,-119,16,-119,20,-119});
    states[81] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,82,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[82] = new State(new int[]{41,67,64,-120,49,-120,50,-120,51,-120,53,-120,55,-120,54,-120,65,-120,62,-120,63,-120,66,-120,67,-120,68,-120,69,-120,42,97,43,99,44,101,37,103,40,189,14,-120,18,-120,22,-120,16,-120,20,-120});
    states[83] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,84,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[84] = new State(new int[]{41,67,64,-95,49,-95,50,-95,51,-95,53,77,55,79,54,81,65,-95,62,-95,63,-95,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-95,18,-95,22,-95,16,-95,20,-95});
    states[85] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,86,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[86] = new State(new int[]{41,67,64,-96,49,-96,50,-96,51,-96,53,77,55,79,54,81,65,-96,62,-96,63,-96,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-96,18,-96,22,-96,16,-96,20,-96});
    states[87] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,88,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[88] = new State(new int[]{41,67,64,-97,49,-97,50,-97,51,-97,53,77,55,79,54,81,65,-97,62,-97,63,-97,66,89,67,91,68,93,69,95,42,97,43,99,44,101,37,103,40,189,14,-97,18,-97,22,-97,16,-97,20,-97});
    states[89] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,90,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[90] = new State(new int[]{41,67,64,-98,49,-98,50,-98,51,-98,53,77,55,79,54,81,65,-98,62,-98,63,-98,66,-98,67,-98,68,-98,69,-98,42,97,43,99,44,101,37,103,40,189,14,-98,18,-98,22,-98,16,-98,20,-98});
    states[91] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,92,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[92] = new State(new int[]{41,67,64,-99,49,-99,50,-99,51,-99,53,77,55,79,54,81,65,-99,62,-99,63,-99,66,-99,67,-99,68,-99,69,-99,42,97,43,99,44,101,37,103,40,189,14,-99,18,-99,22,-99,16,-99,20,-99});
    states[93] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,94,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[94] = new State(new int[]{41,67,64,-100,49,-100,50,-100,51,-100,53,77,55,79,54,81,65,-100,62,-100,63,-100,66,-100,67,-100,68,-100,69,-100,42,97,43,99,44,101,37,103,40,189,14,-100,18,-100,22,-100,16,-100,20,-100});
    states[95] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,96,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[96] = new State(new int[]{41,67,64,-101,49,-101,50,-101,51,-101,53,77,55,79,54,81,65,-101,62,-101,63,-101,66,-101,67,-101,68,-101,69,-101,42,97,43,99,44,101,37,103,40,189,14,-101,18,-101,22,-101,16,-101,20,-101});
    states[97] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,98,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[98] = new State(new int[]{41,-103,64,-103,49,-103,50,-103,51,-103,53,-103,55,-103,54,-103,65,-103,62,-103,63,-103,66,-103,67,-103,68,-103,69,-103,42,-103,43,99,44,101,37,103,40,189,14,-103,18,-103,22,-103,16,-103,20,-103});
    states[99] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,100,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[100] = new State(new int[]{41,-104,64,-104,49,-104,50,-104,51,-104,53,-104,55,-104,54,-104,65,-104,62,-104,63,-104,66,-104,67,-104,68,-104,69,-104,42,-104,43,-104,44,-104,37,-104,40,189,14,-104,18,-104,22,-104,16,-104,20,-104});
    states[101] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,102,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[102] = new State(new int[]{41,-105,64,-105,49,-105,50,-105,51,-105,53,-105,55,-105,54,-105,65,-105,62,-105,63,-105,66,-105,67,-105,68,-105,69,-105,42,-105,43,-105,44,-105,37,-105,40,189,14,-105,18,-105,22,-105,16,-105,20,-105});
    states[103] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63},new int[]{-22,104,-25,115,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40});
    states[104] = new State(new int[]{15,35,17,105,21,37,41,-106,64,-106,49,-106,50,-106,51,-106,53,-106,55,-106,54,-106,65,-106,62,-106,63,-106,66,-106,67,-106,68,-106,69,-106,42,-106,43,-106,44,-106,37,-106,40,-106,14,-106,18,-106,22,-106,16,-106,20,-106});
    states[105] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126,18,-78,16,-78},new int[]{-41,106,-16,188,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[106] = new State(new int[]{18,107,16,108});
    states[107] = new State(-75);
    states[108] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,109,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[109] = new State(-77);
    states[110] = new State(-23);
    states[111] = new State(-25);
    states[112] = new State(-26);
    states[113] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63},new int[]{-22,114,-25,115,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40});
    states[114] = new State(new int[]{15,35,17,105,21,37,41,-117,64,-117,49,-117,50,-117,51,-117,53,-117,55,-117,54,-117,65,-117,62,-117,63,-117,66,-117,67,-117,68,-117,69,-117,42,-117,43,-117,44,-117,37,-117,40,-117,14,-117,18,-117,22,-117,16,-117,20,-117});
    states[115] = new State(-27);
    states[116] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63},new int[]{-22,117,-25,115,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40});
    states[117] = new State(new int[]{15,35,17,105,21,37,41,-108,64,-108,49,-108,50,-108,51,-108,53,-108,55,-108,54,-108,65,-108,62,-108,63,-108,66,-108,67,-108,68,-108,69,-108,42,-108,43,-108,44,-108,37,-108,40,-108,14,-108,18,-108,22,-108,16,-108,20,-108});
    states[118] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63},new int[]{-22,119,-25,115,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40});
    states[119] = new State(new int[]{15,35,17,105,21,37,41,-109,64,-109,49,-109,50,-109,51,-109,53,-109,55,-109,54,-109,65,-109,62,-109,63,-109,66,-109,67,-109,68,-109,69,-109,42,-109,43,-109,44,-109,37,-109,40,-109,14,-109,18,-109,22,-109,16,-109,20,-109});
    states[120] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63},new int[]{-25,121,-30,33,-22,122,-31,40,-26,43,-27,46,-28,52,-29,62});
    states[121] = new State(new int[]{41,-110,64,-110,49,-110,50,-110,51,-110,53,-110,55,-110,54,-110,65,-110,62,-110,63,-110,66,-110,67,-110,68,-110,69,-110,42,-110,43,-110,44,-110,37,-110,40,-110,14,-110,18,-110,22,-110,16,-110,20,-110,15,-27,21,-27,17,-27});
    states[122] = new State(new int[]{15,35,21,37,17,105});
    states[123] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63},new int[]{-25,124,-30,33,-22,122,-31,40,-26,43,-27,46,-28,52,-29,62});
    states[124] = new State(new int[]{41,-112,64,-112,49,-112,50,-112,51,-112,53,-112,55,-112,54,-112,65,-112,62,-112,63,-112,66,-112,67,-112,68,-112,69,-112,42,-112,43,-112,44,-112,37,-112,40,-112,14,-112,18,-112,22,-112,16,-112,20,-112,15,-27,21,-27,17,-27});
    states[125] = new State(-19);
    states[126] = new State(new int[]{17,127,57,183});
    states[127] = new State(new int[]{57,181,18,-51,16,-51},new int[]{-33,128});
    states[128] = new State(new int[]{18,129,16,179});
    states[129] = new State(new int[]{19,131},new int[]{-34,130});
    states[130] = new State(-43);
    states[131] = new State(new int[]{20,132,19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,4,173},new int[]{-3,133,-4,182,-5,5,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-6,172});
    states[132] = new State(-45);
    states[133] = new State(new int[]{20,134,19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,4,173},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-6,172});
    states[134] = new State(-46);
    states[135] = new State(-13);
    states[136] = new State(new int[]{17,137});
    states[137] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126,14,-56},new int[]{-35,138,-16,171,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[138] = new State(new int[]{14,139});
    states[139] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126,14,-56},new int[]{-35,140,-16,171,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[140] = new State(new int[]{14,141});
    states[141] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126,18,-56},new int[]{-35,142,-16,171,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[142] = new State(new int[]{18,143});
    states[143] = new State(new int[]{19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,14,170},new int[]{-32,144,-5,18,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112});
    states[144] = new State(-54);
    states[145] = new State(-14);
    states[146] = new State(new int[]{17,147});
    states[147] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,148,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[148] = new State(new int[]{18,149});
    states[149] = new State(new int[]{19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,14,170},new int[]{-32,150,-5,18,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112});
    states[150] = new State(new int[]{6,151,19,-57,7,-57,8,-57,9,-57,5,-57,10,-57,11,-57,57,-57,56,-57,58,-57,12,-57,13,-57,21,-57,17,-57,52,-57,41,-57,42,-57,38,-57,39,-57,4,-57,3,-57,20,-57});
    states[151] = new State(new int[]{19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123,14,170},new int[]{-32,152,-5,18,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112});
    states[152] = new State(-58);
    states[153] = new State(-15);
    states[154] = new State(new int[]{14,155,57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,156,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[155] = new State(-47);
    states[156] = new State(new int[]{14,157});
    states[157] = new State(-48);
    states[158] = new State(-20);
    states[159] = new State(new int[]{14,160,16,161});
    states[160] = new State(-16);
    states[161] = new State(new int[]{57,163},new int[]{-36,162});
    states[162] = new State(-60);
    states[163] = new State(new int[]{24,164,14,-61,16,-61});
    states[164] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,165,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[165] = new State(-62);
    states[166] = new State(new int[]{57,163},new int[]{-36,167});
    states[167] = new State(-59);
    states[168] = new State(new int[]{14,169});
    states[169] = new State(-17);
    states[170] = new State(-41);
    states[171] = new State(-55);
    states[172] = new State(-7);
    states[173] = new State(new int[]{57,174});
    states[174] = new State(new int[]{17,175});
    states[175] = new State(new int[]{57,181,18,-51,16,-51},new int[]{-33,176});
    states[176] = new State(new int[]{18,177,16,179});
    states[177] = new State(new int[]{19,131},new int[]{-34,178});
    states[178] = new State(-42);
    states[179] = new State(new int[]{57,180});
    states[180] = new State(-50);
    states[181] = new State(-49);
    states[182] = new State(-4);
    states[183] = new State(new int[]{17,184});
    states[184] = new State(new int[]{57,181,18,-51,16,-51},new int[]{-33,185});
    states[185] = new State(new int[]{18,186,16,179});
    states[186] = new State(new int[]{19,131},new int[]{-34,187});
    states[187] = new State(-44);
    states[188] = new State(-76);
    states[189] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-20,190,-21,110,-22,34,-25,191,-30,33,-26,43,-27,46,-28,52,-29,62,-31,40,-23,111,-24,112});
    states[190] = new State(-107);
    states[191] = new State(new int[]{38,192,39,193,15,-27,21,-27,17,-27,41,-27,64,-27,49,-27,50,-27,51,-27,53,-27,55,-27,54,-27,65,-27,62,-27,63,-27,66,-27,67,-27,68,-27,69,-27,42,-27,43,-27,44,-27,37,-27,40,-27,14,-27,18,-27,22,-27,16,-27,20,-27});
    states[192] = new State(-111);
    states[193] = new State(-113);
    states[194] = new State(-73);
    states[195] = new State(-74);
    states[196] = new State(-66);
    states[197] = new State(-67);
    states[198] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,199,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[199] = new State(-82);
    states[200] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,201,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[201] = new State(-83);
    states[202] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,203,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[203] = new State(-84);
    states[204] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,205,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[205] = new State(-85);
    states[206] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,207,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[207] = new State(-86);
    states[208] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,209,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[209] = new State(-87);
    states[210] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,211,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[211] = new State(-88);
    states[212] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,213,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[213] = new State(-89);
    states[214] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,215,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[215] = new State(-90);
    states[216] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,217,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[217] = new State(-91);
    states[218] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,219,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[219] = new State(-92);
    states[220] = new State(new int[]{57,32,56,41,58,42,12,44,13,45,21,47,19,53,17,63,52,113,41,116,42,118,38,120,39,123,4,126},new int[]{-16,221,-15,27,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112,-17,125,-18,158});
    states[221] = new State(-93);
    states[222] = new State(new int[]{20,8,19,7,7,13,8,20,9,136,5,146,10,154,11,166,57,32,56,41,58,42,12,44,13,45,21,47,17,63,52,113,41,116,42,118,38,120,39,123},new int[]{-7,9,-5,223,-8,6,-9,12,-10,19,-11,135,-12,145,-13,153,-14,159,-15,168,-19,28,-25,29,-30,33,-22,34,-31,40,-26,43,-27,46,-28,52,-29,62,-20,66,-21,110,-23,111,-24,112});
    states[223] = new State(-8);
    states[224] = new State(new int[]{24,-35,25,-35,26,-35,27,-35,28,-35,29,-35,30,-35,31,-35,32,-35,61,-35,34,-35,35,-35,36,-35,38,-35,39,-35,15,-35,21,-35,17,-35,41,-35,64,-35,49,-35,50,-35,51,-35,53,-35,55,-35,54,-35,65,-35,62,-35,63,-35,66,-35,67,-35,68,-35,69,-35,42,-35,43,-35,44,-35,37,-35,40,-35,14,-35,23,-73});
    states[225] = new State(new int[]{15,-29,21,-29,17,-29,41,-29,64,-29,49,-29,50,-29,51,-29,53,-29,55,-29,54,-29,65,-29,62,-29,63,-29,66,-29,67,-29,68,-29,69,-29,42,-29,43,-29,44,-29,37,-29,40,-29,14,-29,23,-74});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-7, new int[]{-5});
    rules[9] = new Rule(-7, new int[]{-7,-5});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-5, new int[]{-12});
    rules[15] = new Rule(-5, new int[]{-13});
    rules[16] = new Rule(-5, new int[]{-14,14});
    rules[17] = new Rule(-5, new int[]{-15,14});
    rules[18] = new Rule(-16, new int[]{-15});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-15, new int[]{-19});
    rules[22] = new Rule(-15, new int[]{-20});
    rules[23] = new Rule(-20, new int[]{-21});
    rules[24] = new Rule(-20, new int[]{-22});
    rules[25] = new Rule(-20, new int[]{-23});
    rules[26] = new Rule(-20, new int[]{-24});
    rules[27] = new Rule(-22, new int[]{-25});
    rules[28] = new Rule(-22, new int[]{56});
    rules[29] = new Rule(-22, new int[]{58});
    rules[30] = new Rule(-22, new int[]{-26});
    rules[31] = new Rule(-22, new int[]{-27});
    rules[32] = new Rule(-22, new int[]{-28});
    rules[33] = new Rule(-22, new int[]{-29});
    rules[34] = new Rule(-22, new int[]{17,-16,18});
    rules[35] = new Rule(-25, new int[]{57});
    rules[36] = new Rule(-25, new int[]{-30});
    rules[37] = new Rule(-25, new int[]{-31});
    rules[38] = new Rule(-8, new int[]{19,20});
    rules[39] = new Rule(-8, new int[]{19,-7,20});
    rules[40] = new Rule(-32, new int[]{-5});
    rules[41] = new Rule(-32, new int[]{14});
    rules[42] = new Rule(-6, new int[]{4,57,17,-33,18,-34});
    rules[43] = new Rule(-17, new int[]{4,17,-33,18,-34});
    rules[44] = new Rule(-18, new int[]{4,57,17,-33,18,-34});
    rules[45] = new Rule(-34, new int[]{19,20});
    rules[46] = new Rule(-34, new int[]{19,-3,20});
    rules[47] = new Rule(-13, new int[]{10,14});
    rules[48] = new Rule(-13, new int[]{10,-16,14});
    rules[49] = new Rule(-33, new int[]{57});
    rules[50] = new Rule(-33, new int[]{-33,16,57});
    rules[51] = new Rule(-33, new int[]{});
    rules[52] = new Rule(-9, new int[]{7,17,-16,18,-32});
    rules[53] = new Rule(-10, new int[]{8,-8,7,17,-16,18,14});
    rules[54] = new Rule(-11, new int[]{9,17,-35,14,-35,14,-35,18,-32});
    rules[55] = new Rule(-35, new int[]{-16});
    rules[56] = new Rule(-35, new int[]{});
    rules[57] = new Rule(-12, new int[]{5,17,-16,18,-32});
    rules[58] = new Rule(-12, new int[]{5,17,-16,18,-32,6,-32});
    rules[59] = new Rule(-14, new int[]{11,-36});
    rules[60] = new Rule(-14, new int[]{-14,16,-36});
    rules[61] = new Rule(-36, new int[]{57});
    rules[62] = new Rule(-36, new int[]{57,24,-16});
    rules[63] = new Rule(-26, new int[]{12});
    rules[64] = new Rule(-26, new int[]{13});
    rules[65] = new Rule(-27, new int[]{21,-37,22});
    rules[66] = new Rule(-27, new int[]{21,22});
    rules[67] = new Rule(-37, new int[]{-16});
    rules[68] = new Rule(-37, new int[]{-37,16,-16});
    rules[69] = new Rule(-28, new int[]{19,-38,20});
    rules[70] = new Rule(-38, new int[]{-39});
    rules[71] = new Rule(-38, new int[]{-39,16,-38});
    rules[72] = new Rule(-39, new int[]{-40,23,-16});
    rules[73] = new Rule(-40, new int[]{57});
    rules[74] = new Rule(-40, new int[]{58});
    rules[75] = new Rule(-29, new int[]{-22,17,-41,18});
    rules[76] = new Rule(-41, new int[]{-16});
    rules[77] = new Rule(-41, new int[]{-41,16,-16});
    rules[78] = new Rule(-41, new int[]{});
    rules[79] = new Rule(-31, new int[]{-22,21,-16,22});
    rules[80] = new Rule(-30, new int[]{-22,15,57});
    rules[81] = new Rule(-19, new int[]{-25,24,-16});
    rules[82] = new Rule(-19, new int[]{-25,25,-16});
    rules[83] = new Rule(-19, new int[]{-25,26,-16});
    rules[84] = new Rule(-19, new int[]{-25,27,-16});
    rules[85] = new Rule(-19, new int[]{-25,28,-16});
    rules[86] = new Rule(-19, new int[]{-25,29,-16});
    rules[87] = new Rule(-19, new int[]{-25,30,-16});
    rules[88] = new Rule(-19, new int[]{-25,31,-16});
    rules[89] = new Rule(-19, new int[]{-25,32,-16});
    rules[90] = new Rule(-19, new int[]{-25,61,-16});
    rules[91] = new Rule(-19, new int[]{-25,34,-16});
    rules[92] = new Rule(-19, new int[]{-25,35,-16});
    rules[93] = new Rule(-19, new int[]{-25,36,-16});
    rules[94] = new Rule(-23, new int[]{-20,64,-20});
    rules[95] = new Rule(-23, new int[]{-20,65,-20});
    rules[96] = new Rule(-23, new int[]{-20,62,-20});
    rules[97] = new Rule(-23, new int[]{-20,63,-20});
    rules[98] = new Rule(-23, new int[]{-20,66,-20});
    rules[99] = new Rule(-23, new int[]{-20,67,-20});
    rules[100] = new Rule(-23, new int[]{-20,68,-20});
    rules[101] = new Rule(-23, new int[]{-20,69,-20});
    rules[102] = new Rule(-21, new int[]{-20,41,-20});
    rules[103] = new Rule(-21, new int[]{-20,42,-20});
    rules[104] = new Rule(-21, new int[]{-20,43,-20});
    rules[105] = new Rule(-21, new int[]{-20,44,-20});
    rules[106] = new Rule(-21, new int[]{-20,37,-22});
    rules[107] = new Rule(-21, new int[]{-20,40,-20});
    rules[108] = new Rule(-21, new int[]{41,-22});
    rules[109] = new Rule(-21, new int[]{42,-22});
    rules[110] = new Rule(-21, new int[]{38,-25});
    rules[111] = new Rule(-21, new int[]{-25,38});
    rules[112] = new Rule(-21, new int[]{39,-25});
    rules[113] = new Rule(-21, new int[]{-25,39});
    rules[114] = new Rule(-24, new int[]{-20,49,-20});
    rules[115] = new Rule(-24, new int[]{-20,50,-20});
    rules[116] = new Rule(-24, new int[]{-20,51,-20});
    rules[117] = new Rule(-24, new int[]{52,-22});
    rules[118] = new Rule(-24, new int[]{-20,53,-20});
    rules[119] = new Rule(-24, new int[]{-20,55,-20});
    rules[120] = new Rule(-24, new int[]{-20,54,-20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements_and_declarations
{ CheckIfReturnInMain(); Result = (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.n = Result; }
        break;
      case 3: // main -> /* empty */
{ Result = new StatementsAndDeclarations(); CurrentSemanticValue.n = Result; }
        break;
      case 4: // statements_and_declarations -> statement_or_declaration
{ var nodes = new StatementsAndDeclarations(); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 5: // statements_and_declarations -> statements_and_declarations, 
              //                                statement_or_declaration
{ var nodes = ((StatementsAndDeclarations)ValueStack[ValueStack.Depth-2].n); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n);  CurrentSemanticValue.n = nodes;}
        break;
      case 8: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 9: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // statement -> while
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // statement -> dowhile
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 13: // statement -> for
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 14: // statement -> if
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 15: // statement -> return
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 16: // statement -> variable_declaration, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 17: // statement -> statement_expression, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
      case 18: // expression -> statement_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 19: // expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 20: // expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 21: // statement_expression -> assignment
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 22: // statement_expression -> binary_valid_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 23: // binary_valid_expression -> arithmetic
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // binary_valid_expression -> indexer_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 25: // binary_valid_expression -> comparison
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 26: // binary_valid_expression -> bitwise
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 28: // indexer_expression -> NUMBER
{ CurrentSemanticValue.n = new NumberNode(ValueStack[ValueStack.Depth-1].num); }
        break;
      case 29: // indexer_expression -> STRING
{ CurrentSemanticValue.n = new StringNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 30: // indexer_expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 31: // indexer_expression -> array
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 32: // indexer_expression -> object
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 33: // indexer_expression -> function_invocation
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 34: // indexer_expression -> LPARENTH, expression, RPARENTH
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 35: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.n = new IdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 36: // lvalue -> property_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 37: // lvalue -> indexer_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 38: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 39: // block -> LCURLYBRACE, statements, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 40: // statement_or_semicolon -> statement
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 41: // statement_or_semicolon -> SEMICOLON
{ CurrentSemanticValue.n = new EmptyExpression(); }
        break;
      case 42: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionDeclarationNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 43: // function_expression -> FUNCTION, LPARENTH, arguments_list, RPARENTH, 
               //                        function_body
{ CurrentSemanticValue.n = new FunctionExpressionNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 44: // function_named_expression -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                              RPARENTH, function_body
{CurrentSemanticValue.n = new FunctionNamedExpressionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 45: // function_body -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new StatementsAndDeclarations(); }
        break;
      case 46: // function_body -> LCURLYBRACE, statements_and_declarations, RCURLYBRACE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 47: // return -> RETURN, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 48: // return -> RETURN, expression, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 49: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 50: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 51: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
      case 52: // while -> WHILE, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new WhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 53: // dowhile -> DO, block, WHILE, LPARENTH, expression, RPARENTH, SEMICOLON
{ CurrentSemanticValue.n = new DoWhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-6].n); }
        break;
      case 54: // for -> FOR, LPARENTH, expression_or_empty, SEMICOLON, expression_or_empty, 
               //        SEMICOLON, expression_or_empty, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new ForNode((StatementNode)ValueStack[ValueStack.Depth-7].n, (StatementNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 55: // expression_or_empty -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 57: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 58: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon, ELSE, 
               //       statement_or_semicolon
{ CurrentSemanticValue.n = new IfElseNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 59: // variable_declaration -> VAR, variable_declaration_identifier
{ CurrentSemanticValue.n = new VariableDeclarationNode((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 60: // variable_declaration -> variable_declaration, COMMA, 
               //                         variable_declaration_identifier
{ var nodes = ((VariableDeclarationNode)ValueStack[ValueStack.Depth-3].n); nodes.Declarations.Add((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 61: // variable_declaration_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 62: // variable_declaration_identifier -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 63: // boolean -> TRUE
{ CurrentSemanticValue.n = new BooleanNode(true); }
        break;
      case 64: // boolean -> FALSE
{ CurrentSemanticValue.n = new BooleanNode(false); }
        break;
      case 65: // array -> LBRACKET, array_list, RBRACKET
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 66: // array -> LBRACKET, RBRACKET
{ CurrentSemanticValue.n = new ArrayNode(); }
        break;
      case 67: // array_list -> expression
{ var arr = new ArrayNode(); arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 68: // array_list -> array_list, COMMA, expression
{ var arr = (ArrayNode)ValueStack[ValueStack.Depth-3].n; arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 69: // object -> LCURLYBRACE, object_properties_list, RCURLYBRACE
{ CurrentSemanticValue.n = new ObjectNode((List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-2].add); }
        break;
      case 70: // object_properties_list -> object_property
{ var l = new List<ObjectPropertyNode>(); l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.add = l; }
        break;
      case 71: // object_properties_list -> object_property, COMMA, object_properties_list
{ var l = (List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-1].add; l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-3].n); CurrentSemanticValue.add = l; }
        break;
      case 72: // object_property -> object_property_identifier, COLON, expression
{ CurrentSemanticValue.n = new ObjectPropertyNode((ObjectPropertyIdentifierNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 73: // object_property_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 74: // object_property_identifier -> STRING
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new StringNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 75: // function_invocation -> indexer_expression, LPARENTH, 
               //                        function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 76: // function_invocation_arguments_list -> expression
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 77: // function_invocation_arguments_list -> function_invocation_arguments_list, COMMA, 
               //                                       expression
{ var al = (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-3].n; CurrentSemanticValue.n = al; al.Arguments.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 78: // function_invocation_arguments_list -> /* empty */
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode(); }
        break;
      case 79: // indexer_getter -> indexer_expression, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.n = new IndexerGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 80: // property_getter -> indexer_expression, DOT, IDENTIFIER
{ CurrentSemanticValue.n = new PropertyGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 81: // assignment -> lvalue, ASSIGN, expression
{ CurrentSemanticValue.n = new AssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 82: // assignment -> lvalue, ADDASSG, expression
{ CurrentSemanticValue.n = new AdditionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 83: // assignment -> lvalue, SUBASSG, expression
{ CurrentSemanticValue.n = new SubstractionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 84: // assignment -> lvalue, MULTASSG, expression
{ CurrentSemanticValue.n = new MultiplicationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 85: // assignment -> lvalue, DIVASSG, expression
{ CurrentSemanticValue.n = new DivisonAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 86: // assignment -> lvalue, REMASSG, expression
{ CurrentSemanticValue.n = new RemainderAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 87: // assignment -> lvalue, EXPASSG, expression
{ CurrentSemanticValue.n = new ExponentiationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 88: // assignment -> lvalue, LEFTSHFTASG, expression
{ CurrentSemanticValue.n = new LeftShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 89: // assignment -> lvalue, RIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new RightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 90: // assignment -> lvalue, URIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new UnsignedRightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 91: // assignment -> lvalue, BITWISEANDASSG, expression
{ CurrentSemanticValue.n = new BitwiseAndAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 92: // assignment -> lvalue, BITWISEXORASSG, expression
{ CurrentSemanticValue.n = new BitwiseXorAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 93: // assignment -> lvalue, BITWISEORASSG, expression
{ CurrentSemanticValue.n = new BitwiseOrAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 94: // comparison -> binary_valid_expression, EQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new EqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 95: // comparison -> binary_valid_expression, NOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new NotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 96: // comparison -> binary_valid_expression, STRICTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 97: // comparison -> binary_valid_expression, STRICTNOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictNotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 98: // comparison -> binary_valid_expression, GREATERTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 99: // comparison -> binary_valid_expression, GREATERTHANOREQUAL, 
               //               binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 100: // comparison -> binary_valid_expression, LESSTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 101: // comparison -> binary_valid_expression, LESSTHANOREQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 102: // arithmetic -> binary_valid_expression, ADDITION, binary_valid_expression
{ CurrentSemanticValue.n = new AdditionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 103: // arithmetic -> binary_valid_expression, SUBTRACTION, binary_valid_expression
{ CurrentSemanticValue.n = new SubtractionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 104: // arithmetic -> binary_valid_expression, MULTIPLICATION, binary_valid_expression
{ CurrentSemanticValue.n = new MultiplicationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 105: // arithmetic -> binary_valid_expression, DIVISION, binary_valid_expression
{ CurrentSemanticValue.n = new DivisionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 106: // arithmetic -> binary_valid_expression, REMAINDER, indexer_expression
{ CurrentSemanticValue.n = new RemainderNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 107: // arithmetic -> binary_valid_expression, EXPONENTIATION, binary_valid_expression
{ CurrentSemanticValue.n = new ExponentiationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 108: // arithmetic -> ADDITION, indexer_expression
{ CurrentSemanticValue.n = new UnaryPlusNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 109: // arithmetic -> SUBTRACTION, indexer_expression
{ CurrentSemanticValue.n = new UnaryNegationNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 110: // arithmetic -> INCREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 111: // arithmetic -> lvalue, INCREMENT
{ CurrentSemanticValue.n = new PostfixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 112: // arithmetic -> DECREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 113: // arithmetic -> lvalue, DECREMENT
{ CurrentSemanticValue.n = new PostfixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 114: // bitwise -> binary_valid_expression, BITWISEAND, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseAndNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 115: // bitwise -> binary_valid_expression, BITWISEOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseOrNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 116: // bitwise -> binary_valid_expression, BITWISEXOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseXorNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 117: // bitwise -> BITWISENOT, indexer_expression
{ CurrentSemanticValue.n = new BitwiseNotNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 118: // bitwise -> binary_valid_expression, LEFTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new LeftShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 119: // bitwise -> binary_valid_expression, SIGNPROPRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new SignPropagatingRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 120: // bitwise -> binary_valid_expression, ZEROFILLRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new ZeroFillRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
