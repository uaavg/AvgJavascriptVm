// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 2/15/2018 2:34:17 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 2/15/2018 2:28:45 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,ELSE=6,
    WHILE=7,DO=8,FOR=9,RETURN=10,VAR=11,TRUE=12,
    FALSE=13,SEMICOLON=14,DOT=15,COMMA=16,LPARENTH=17,RPARENTH=18,
    LCURLYBRACE=19,RCURLYBRACE=20,LBRACKET=21,RBRACKET=22,COLON=23,ASSIGN=24,
    ADDASSG=25,SUBASSG=26,MULTASSG=27,DIVASSG=28,REMASSG=29,EXPASSG=30,
    LEFTSHFTASG=31,RIGHTSHFTASSG=32,URIGHTSHIFTASSG=33,BITWISEANDASSG=34,BITWISEXORASSG=35,BITWISEORASSG=36,
    REMAINDER=37,INCREMENT=38,DECREMENT=39,EXPONENTIATION=40,ADDITION=41,SUBTRACTION=42,
    MULTIPLICATION=43,DIVISION=44,UNARYPLUS=45,UNARYMINUS=46,POSTFIX=47,PREFIX=48,
    NUMBER=49,IDENTIFIER=50,STRING=51,THEN=52,LEFTSHFTASSG=53,URIGHTSHFTASSG=54,
    STRICTEQUAL=55,STRICTNOTEQUAL=56,EQUAL=57,NOTEQUAL=58,GREATERTHAN=59,GREATERTHANOREQUAL=60,
    LESSTHAN=61,LESSTHANOREQUAL=62};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
			public object add;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[112];
  private static State[] states = new State[208];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements_and_declarations", "statement_or_declaration", 
      "statement", "function_declaration", "statements", "block", "while", "dowhile", 
      "for", "if", "return", "variable_declaration", "statement_expression", 
      "expression", "function_expression", "function_named_expression", "indexer_expression", 
      "assignment", "lvalue", "boolean", "array", "object", "function_invocation", 
      "comparison", "arithmetic", "property_getter", "indexer_getter", "statement_or_semicolon", 
      "arguments_list", "function_body", "expression_or_empty", "variable_declaration_identifier", 
      "array_list", "object_properties_list", "object_property", "object_property_identifier", 
      "function_invocation_arguments_list", };

  static RunnerParser() {
    states[0] = new State(new int[]{19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,4,160,3,-3},new int[]{-1,1,-3,3,-4,169,-5,5,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-6,159});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,4,160,3,-2},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-6,159});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-10);
    states[7] = new State(new int[]{20,8,19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,206,49,41,51,207,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108},new int[]{-7,9,-36,54,-5,205,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-37,56,-38,59});
    states[8] = new State(-36);
    states[9] = new State(new int[]{20,10,19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108},new int[]{-5,11,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111});
    states[10] = new State(-37);
    states[11] = new State(-9);
    states[12] = new State(-11);
    states[13] = new State(new int[]{17,14});
    states[14] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,15,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[15] = new State(new int[]{18,16});
    states[16] = new State(new int[]{19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,14,157},new int[]{-30,17,-5,18,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111});
    states[17] = new State(-50);
    states[18] = new State(-38);
    states[19] = new State(-12);
    states[20] = new State(new int[]{19,204},new int[]{-8,21});
    states[21] = new State(new int[]{7,22});
    states[22] = new State(new int[]{17,23});
    states[23] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,24,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(new int[]{14,26});
    states[26] = new State(-51);
    states[27] = new State(-18);
    states[28] = new State(new int[]{15,29,17,31,57,70,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,86,55,88,56,90,59,92,60,94,61,96,62,98,21,100,14,-21,18,-21,16,-21,22,-21,20,-21});
    states[29] = new State(new int[]{50,30});
    states[30] = new State(-78);
    states[31] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113,18,-76,16,-76},new int[]{-39,32,-16,203,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[32] = new State(new int[]{18,33,16,34});
    states[33] = new State(-73);
    states[34] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,35,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[35] = new State(-75);
    states[36] = new State(new int[]{24,37,25,179,26,181,27,183,28,185,29,187,30,189,31,191,32,193,54,195,34,197,35,199,36,201,15,-23,17,-23,57,-23,41,-23,42,-23,43,-23,44,-23,37,-23,40,-23,38,-23,39,-23,58,-23,55,-23,56,-23,59,-23,60,-23,61,-23,62,-23,21,-23,14,-23,18,-23,16,-23,22,-23,20,-23});
    states[37] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,38,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[38] = new State(-79);
    states[39] = new State(-33);
    states[40] = new State(-34);
    states[41] = new State(-24);
    states[42] = new State(-25);
    states[43] = new State(-26);
    states[44] = new State(-61);
    states[45] = new State(-62);
    states[46] = new State(-27);
    states[47] = new State(new int[]{22,177,50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-35,48,-16,178,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[48] = new State(new int[]{22,49,16,50});
    states[49] = new State(-63);
    states[50] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,51,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[51] = new State(-66);
    states[52] = new State(-28);
    states[53] = new State(new int[]{50,175,51,176},new int[]{-36,54,-37,56,-38,59});
    states[54] = new State(new int[]{20,55});
    states[55] = new State(-67);
    states[56] = new State(new int[]{16,57,20,-68});
    states[57] = new State(new int[]{50,175,51,176},new int[]{-36,58,-37,56,-38,59});
    states[58] = new State(-69);
    states[59] = new State(new int[]{23,60});
    states[60] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,61,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[61] = new State(-70);
    states[62] = new State(-29);
    states[63] = new State(-30);
    states[64] = new State(-31);
    states[65] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,66,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[66] = new State(new int[]{18,67});
    states[67] = new State(-32);
    states[68] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,69,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[69] = new State(new int[]{15,29,17,31,57,-106,41,-106,42,-106,43,-106,44,-106,37,-106,40,-106,38,-106,39,-106,58,-106,55,-106,56,-106,59,-106,60,-106,61,-106,62,-106,21,100,14,-106,18,-106,16,-106,22,-106,20,-106});
    states[70] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,71,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[71] = new State(new int[]{15,29,17,31,57,-92,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-92,55,-92,56,-92,59,92,60,94,61,96,62,98,21,100,14,-92,18,-92,16,-92,22,-92,20,-92});
    states[72] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,73,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[73] = new State(new int[]{15,29,17,31,57,-100,41,-100,42,-100,43,76,44,78,37,80,40,82,38,84,39,85,58,-100,55,-100,56,-100,59,-100,60,-100,61,-100,62,-100,21,100,14,-100,18,-100,16,-100,22,-100,20,-100});
    states[74] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,75,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[75] = new State(new int[]{15,29,17,31,57,-101,41,-101,42,-101,43,76,44,78,37,80,40,82,38,84,39,85,58,-101,55,-101,56,-101,59,-101,60,-101,61,-101,62,-101,21,100,14,-101,18,-101,16,-101,22,-101,20,-101});
    states[76] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,77,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[77] = new State(new int[]{15,29,17,31,57,-102,41,-102,42,-102,43,-102,44,-102,37,-102,40,82,38,84,39,85,58,-102,55,-102,56,-102,59,-102,60,-102,61,-102,62,-102,21,100,14,-102,18,-102,16,-102,22,-102,20,-102});
    states[78] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,79,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[79] = new State(new int[]{15,29,17,31,57,-103,41,-103,42,-103,43,-103,44,-103,37,-103,40,82,38,84,39,85,58,-103,55,-103,56,-103,59,-103,60,-103,61,-103,62,-103,21,100,14,-103,18,-103,16,-103,22,-103,20,-103});
    states[80] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,81,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[81] = new State(new int[]{15,29,17,31,57,-104,41,-104,42,-104,43,-104,44,-104,37,-104,40,82,38,84,39,85,58,-104,55,-104,56,-104,59,-104,60,-104,61,-104,62,-104,21,100,14,-104,18,-104,16,-104,22,-104,20,-104});
    states[82] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,83,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[83] = new State(new int[]{15,29,17,31,57,-105,41,-105,42,-105,43,-105,44,-105,37,-105,40,-105,38,84,39,85,58,-105,55,-105,56,-105,59,-105,60,-105,61,-105,62,-105,21,100,14,-105,18,-105,16,-105,22,-105,20,-105});
    states[84] = new State(-109);
    states[85] = new State(-111);
    states[86] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,87,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[87] = new State(new int[]{15,29,17,31,57,-93,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-93,55,-93,56,-93,59,92,60,94,61,96,62,98,21,100,14,-93,18,-93,16,-93,22,-93,20,-93});
    states[88] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,89,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[89] = new State(new int[]{15,29,17,31,57,-94,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-94,55,-94,56,-94,59,92,60,94,61,96,62,98,21,100,14,-94,18,-94,16,-94,22,-94,20,-94});
    states[90] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,91,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[91] = new State(new int[]{15,29,17,31,57,-95,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-95,55,-95,56,-95,59,92,60,94,61,96,62,98,21,100,14,-95,18,-95,16,-95,22,-95,20,-95});
    states[92] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,93,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[93] = new State(new int[]{15,29,17,31,57,-96,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-96,55,-96,56,-96,59,-96,60,-96,61,-96,62,-96,21,100,14,-96,18,-96,16,-96,22,-96,20,-96});
    states[94] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,95,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[95] = new State(new int[]{15,29,17,31,57,-97,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-97,55,-97,56,-97,59,-97,60,-97,61,-97,62,-97,21,100,14,-97,18,-97,16,-97,22,-97,20,-97});
    states[96] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,97,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[97] = new State(new int[]{15,29,17,31,57,-98,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-98,55,-98,56,-98,59,-98,60,-98,61,-98,62,-98,21,100,14,-98,18,-98,16,-98,22,-98,20,-98});
    states[98] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,99,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[99] = new State(new int[]{15,29,17,31,57,-99,41,72,42,74,43,76,44,78,37,80,40,82,38,84,39,85,58,-99,55,-99,56,-99,59,-99,60,-99,61,-99,62,-99,21,100,14,-99,18,-99,16,-99,22,-99,20,-99});
    states[100] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,101,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[101] = new State(new int[]{22,102});
    states[102] = new State(-77);
    states[103] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,104,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[104] = new State(new int[]{15,29,17,31,57,-107,41,-107,42,-107,43,-107,44,-107,37,-107,40,-107,38,-107,39,-107,58,-107,55,-107,56,-107,59,-107,60,-107,61,-107,62,-107,21,100,14,-107,18,-107,16,-107,22,-107,20,-107});
    states[105] = new State(-23);
    states[106] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,107,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[107] = new State(new int[]{15,29,17,31,57,-108,41,-108,42,-108,43,-108,44,-108,37,-108,40,-108,38,-108,39,-108,58,-108,55,-108,56,-108,59,-108,60,-108,61,-108,62,-108,21,100,14,-108,18,-108,16,-108,22,-108,20,-108});
    states[108] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108},new int[]{-19,109,-21,105,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110});
    states[109] = new State(new int[]{15,29,17,31,57,-110,41,-110,42,-110,43,-110,44,-110,37,-110,40,-110,38,-110,39,-110,58,-110,55,-110,56,-110,59,-110,60,-110,61,-110,62,-110,21,100,14,-110,18,-110,16,-110,22,-110,20,-110});
    states[110] = new State(-35);
    states[111] = new State(-22);
    states[112] = new State(-19);
    states[113] = new State(new int[]{17,114,50,170});
    states[114] = new State(new int[]{50,168,18,-49,16,-49},new int[]{-31,115});
    states[115] = new State(new int[]{18,116,16,166});
    states[116] = new State(new int[]{19,118},new int[]{-32,117});
    states[117] = new State(-41);
    states[118] = new State(new int[]{20,119,19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,4,160},new int[]{-3,120,-4,169,-5,5,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-6,159});
    states[119] = new State(-43);
    states[120] = new State(new int[]{20,121,19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,4,160},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-6,159});
    states[121] = new State(-44);
    states[122] = new State(-13);
    states[123] = new State(new int[]{17,124});
    states[124] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113,14,-54},new int[]{-33,125,-16,158,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[125] = new State(new int[]{14,126});
    states[126] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113,14,-54},new int[]{-33,127,-16,158,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[127] = new State(new int[]{14,128});
    states[128] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113,18,-54},new int[]{-33,129,-16,158,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[129] = new State(new int[]{18,130});
    states[130] = new State(new int[]{19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,14,157},new int[]{-30,131,-5,18,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111});
    states[131] = new State(-52);
    states[132] = new State(-14);
    states[133] = new State(new int[]{17,134});
    states[134] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,135,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[135] = new State(new int[]{18,136});
    states[136] = new State(new int[]{19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,14,157},new int[]{-30,137,-5,18,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111});
    states[137] = new State(new int[]{6,138,19,-55,7,-55,8,-55,9,-55,5,-55,10,-55,11,-55,50,-55,49,-55,51,-55,12,-55,13,-55,21,-55,17,-55,41,-55,42,-55,38,-55,39,-55,4,-55,3,-55,20,-55});
    states[138] = new State(new int[]{19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108,14,157},new int[]{-30,139,-5,18,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111});
    states[139] = new State(-56);
    states[140] = new State(-15);
    states[141] = new State(new int[]{14,142,50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,143,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[142] = new State(-45);
    states[143] = new State(new int[]{14,144});
    states[144] = new State(-46);
    states[145] = new State(-20);
    states[146] = new State(new int[]{14,147,16,148});
    states[147] = new State(-16);
    states[148] = new State(new int[]{50,150},new int[]{-34,149});
    states[149] = new State(-58);
    states[150] = new State(new int[]{24,151,14,-59,16,-59});
    states[151] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,152,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[152] = new State(-60);
    states[153] = new State(new int[]{50,150},new int[]{-34,154});
    states[154] = new State(-57);
    states[155] = new State(new int[]{14,156});
    states[156] = new State(-17);
    states[157] = new State(-39);
    states[158] = new State(-53);
    states[159] = new State(-7);
    states[160] = new State(new int[]{50,161});
    states[161] = new State(new int[]{17,162});
    states[162] = new State(new int[]{50,168,18,-49,16,-49},new int[]{-31,163});
    states[163] = new State(new int[]{18,164,16,166});
    states[164] = new State(new int[]{19,118},new int[]{-32,165});
    states[165] = new State(-40);
    states[166] = new State(new int[]{50,167});
    states[167] = new State(-48);
    states[168] = new State(-47);
    states[169] = new State(-4);
    states[170] = new State(new int[]{17,171});
    states[171] = new State(new int[]{50,168,18,-49,16,-49},new int[]{-31,172});
    states[172] = new State(new int[]{18,173,16,166});
    states[173] = new State(new int[]{19,118},new int[]{-32,174});
    states[174] = new State(-42);
    states[175] = new State(-71);
    states[176] = new State(-72);
    states[177] = new State(-64);
    states[178] = new State(-65);
    states[179] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,180,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[180] = new State(-80);
    states[181] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,182,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[182] = new State(-81);
    states[183] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,184,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[184] = new State(-82);
    states[185] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,186,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[186] = new State(-83);
    states[187] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,188,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[188] = new State(-84);
    states[189] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,190,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[190] = new State(-85);
    states[191] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,192,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[192] = new State(-86);
    states[193] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,194,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[194] = new State(-87);
    states[195] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,196,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[196] = new State(-88);
    states[197] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,198,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[198] = new State(-89);
    states[199] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,200,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[200] = new State(-90);
    states[201] = new State(new int[]{50,39,49,41,51,42,12,44,13,45,21,47,19,53,17,65,41,68,42,103,38,106,39,108,4,113},new int[]{-16,202,-15,27,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111,-17,112,-18,145});
    states[202] = new State(-91);
    states[203] = new State(-74);
    states[204] = new State(new int[]{20,8,19,7,7,13,8,20,9,123,5,133,10,141,11,153,50,39,49,41,51,42,12,44,13,45,21,47,17,65,41,68,42,103,38,106,39,108},new int[]{-7,9,-5,205,-8,6,-9,12,-10,19,-11,122,-12,132,-13,140,-14,146,-15,155,-19,28,-21,36,-28,40,-22,43,-23,46,-24,52,-25,62,-26,63,-27,64,-29,110,-20,111});
    states[205] = new State(-8);
    states[206] = new State(new int[]{24,-33,25,-33,26,-33,27,-33,28,-33,29,-33,30,-33,31,-33,32,-33,54,-33,34,-33,35,-33,36,-33,15,-33,17,-33,57,-33,41,-33,42,-33,43,-33,44,-33,37,-33,40,-33,38,-33,39,-33,58,-33,55,-33,56,-33,59,-33,60,-33,61,-33,62,-33,21,-33,14,-33,23,-71});
    states[207] = new State(new int[]{15,-25,17,-25,57,-25,41,-25,42,-25,43,-25,44,-25,37,-25,40,-25,38,-25,39,-25,58,-25,55,-25,56,-25,59,-25,60,-25,61,-25,62,-25,21,-25,14,-25,23,-72});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-7, new int[]{-5});
    rules[9] = new Rule(-7, new int[]{-7,-5});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-5, new int[]{-12});
    rules[15] = new Rule(-5, new int[]{-13});
    rules[16] = new Rule(-5, new int[]{-14,14});
    rules[17] = new Rule(-5, new int[]{-15,14});
    rules[18] = new Rule(-16, new int[]{-15});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-15, new int[]{-19});
    rules[22] = new Rule(-15, new int[]{-20});
    rules[23] = new Rule(-19, new int[]{-21});
    rules[24] = new Rule(-19, new int[]{49});
    rules[25] = new Rule(-19, new int[]{51});
    rules[26] = new Rule(-19, new int[]{-22});
    rules[27] = new Rule(-19, new int[]{-23});
    rules[28] = new Rule(-19, new int[]{-24});
    rules[29] = new Rule(-19, new int[]{-25});
    rules[30] = new Rule(-19, new int[]{-26});
    rules[31] = new Rule(-19, new int[]{-27});
    rules[32] = new Rule(-19, new int[]{17,-16,18});
    rules[33] = new Rule(-21, new int[]{50});
    rules[34] = new Rule(-21, new int[]{-28});
    rules[35] = new Rule(-21, new int[]{-29});
    rules[36] = new Rule(-8, new int[]{19,20});
    rules[37] = new Rule(-8, new int[]{19,-7,20});
    rules[38] = new Rule(-30, new int[]{-5});
    rules[39] = new Rule(-30, new int[]{14});
    rules[40] = new Rule(-6, new int[]{4,50,17,-31,18,-32});
    rules[41] = new Rule(-17, new int[]{4,17,-31,18,-32});
    rules[42] = new Rule(-18, new int[]{4,50,17,-31,18,-32});
    rules[43] = new Rule(-32, new int[]{19,20});
    rules[44] = new Rule(-32, new int[]{19,-3,20});
    rules[45] = new Rule(-13, new int[]{10,14});
    rules[46] = new Rule(-13, new int[]{10,-16,14});
    rules[47] = new Rule(-31, new int[]{50});
    rules[48] = new Rule(-31, new int[]{-31,16,50});
    rules[49] = new Rule(-31, new int[]{});
    rules[50] = new Rule(-9, new int[]{7,17,-16,18,-30});
    rules[51] = new Rule(-10, new int[]{8,-8,7,17,-16,18,14});
    rules[52] = new Rule(-11, new int[]{9,17,-33,14,-33,14,-33,18,-30});
    rules[53] = new Rule(-33, new int[]{-16});
    rules[54] = new Rule(-33, new int[]{});
    rules[55] = new Rule(-12, new int[]{5,17,-16,18,-30});
    rules[56] = new Rule(-12, new int[]{5,17,-16,18,-30,6,-30});
    rules[57] = new Rule(-14, new int[]{11,-34});
    rules[58] = new Rule(-14, new int[]{-14,16,-34});
    rules[59] = new Rule(-34, new int[]{50});
    rules[60] = new Rule(-34, new int[]{50,24,-16});
    rules[61] = new Rule(-22, new int[]{12});
    rules[62] = new Rule(-22, new int[]{13});
    rules[63] = new Rule(-23, new int[]{21,-35,22});
    rules[64] = new Rule(-23, new int[]{21,22});
    rules[65] = new Rule(-35, new int[]{-16});
    rules[66] = new Rule(-35, new int[]{-35,16,-16});
    rules[67] = new Rule(-24, new int[]{19,-36,20});
    rules[68] = new Rule(-36, new int[]{-37});
    rules[69] = new Rule(-36, new int[]{-37,16,-36});
    rules[70] = new Rule(-37, new int[]{-38,23,-16});
    rules[71] = new Rule(-38, new int[]{50});
    rules[72] = new Rule(-38, new int[]{51});
    rules[73] = new Rule(-25, new int[]{-19,17,-39,18});
    rules[74] = new Rule(-39, new int[]{-16});
    rules[75] = new Rule(-39, new int[]{-39,16,-16});
    rules[76] = new Rule(-39, new int[]{});
    rules[77] = new Rule(-29, new int[]{-19,21,-16,22});
    rules[78] = new Rule(-28, new int[]{-19,15,50});
    rules[79] = new Rule(-20, new int[]{-21,24,-16});
    rules[80] = new Rule(-20, new int[]{-21,25,-16});
    rules[81] = new Rule(-20, new int[]{-21,26,-16});
    rules[82] = new Rule(-20, new int[]{-21,27,-16});
    rules[83] = new Rule(-20, new int[]{-21,28,-16});
    rules[84] = new Rule(-20, new int[]{-21,29,-16});
    rules[85] = new Rule(-20, new int[]{-21,30,-16});
    rules[86] = new Rule(-20, new int[]{-21,31,-16});
    rules[87] = new Rule(-20, new int[]{-21,32,-16});
    rules[88] = new Rule(-20, new int[]{-21,54,-16});
    rules[89] = new Rule(-20, new int[]{-21,34,-16});
    rules[90] = new Rule(-20, new int[]{-21,35,-16});
    rules[91] = new Rule(-20, new int[]{-21,36,-16});
    rules[92] = new Rule(-26, new int[]{-19,57,-19});
    rules[93] = new Rule(-26, new int[]{-19,58,-19});
    rules[94] = new Rule(-26, new int[]{-19,55,-19});
    rules[95] = new Rule(-26, new int[]{-19,56,-19});
    rules[96] = new Rule(-26, new int[]{-19,59,-19});
    rules[97] = new Rule(-26, new int[]{-19,60,-19});
    rules[98] = new Rule(-26, new int[]{-19,61,-19});
    rules[99] = new Rule(-26, new int[]{-19,62,-19});
    rules[100] = new Rule(-27, new int[]{-19,41,-19});
    rules[101] = new Rule(-27, new int[]{-19,42,-19});
    rules[102] = new Rule(-27, new int[]{-19,43,-19});
    rules[103] = new Rule(-27, new int[]{-19,44,-19});
    rules[104] = new Rule(-27, new int[]{-19,37,-19});
    rules[105] = new Rule(-27, new int[]{-19,40,-19});
    rules[106] = new Rule(-27, new int[]{41,-19});
    rules[107] = new Rule(-27, new int[]{42,-19});
    rules[108] = new Rule(-27, new int[]{38,-19});
    rules[109] = new Rule(-27, new int[]{-19,38});
    rules[110] = new Rule(-27, new int[]{39,-19});
    rules[111] = new Rule(-27, new int[]{-19,39});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements_and_declarations
{ CheckIfReturnInMain(); Result = (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.n = Result; }
        break;
      case 3: // main -> /* empty */
{ Result = new StatementsAndDeclarations(); CurrentSemanticValue.n = Result; }
        break;
      case 4: // statements_and_declarations -> statement_or_declaration
{ var nodes = new StatementsAndDeclarations(); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 5: // statements_and_declarations -> statements_and_declarations, 
              //                                statement_or_declaration
{ var nodes = ((StatementsAndDeclarations)ValueStack[ValueStack.Depth-2].n); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n);  CurrentSemanticValue.n = nodes;}
        break;
      case 8: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 9: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // statement -> while
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // statement -> dowhile
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 13: // statement -> for
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 14: // statement -> if
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 15: // statement -> return
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 16: // statement -> variable_declaration, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 17: // statement -> statement_expression, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
      case 18: // expression -> statement_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 19: // expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 20: // expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 22: // statement_expression -> assignment
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // indexer_expression -> NUMBER
{ CurrentSemanticValue.n = new NumberNode(ValueStack[ValueStack.Depth-1].num); }
        break;
      case 25: // indexer_expression -> STRING
{ CurrentSemanticValue.n = new StringNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 26: // indexer_expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 27: // indexer_expression -> array
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 28: // indexer_expression -> object
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 29: // indexer_expression -> function_invocation
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 30: // indexer_expression -> comparison
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 31: // indexer_expression -> arithmetic
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 32: // indexer_expression -> LPARENTH, expression, RPARENTH
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 33: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.n = new IdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 34: // lvalue -> property_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 35: // lvalue -> indexer_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 36: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 37: // block -> LCURLYBRACE, statements, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 38: // statement_or_semicolon -> statement
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 39: // statement_or_semicolon -> SEMICOLON
{ CurrentSemanticValue.n = new EmptyExpression(); }
        break;
      case 40: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionDeclarationNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 41: // function_expression -> FUNCTION, LPARENTH, arguments_list, RPARENTH, 
               //                        function_body
{ CurrentSemanticValue.n = new FunctionExpressionNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 42: // function_named_expression -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                              RPARENTH, function_body
{CurrentSemanticValue.n = new FunctionNamedExpressionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 43: // function_body -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new StatementsAndDeclarations(); }
        break;
      case 44: // function_body -> LCURLYBRACE, statements_and_declarations, RCURLYBRACE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 45: // return -> RETURN, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 46: // return -> RETURN, expression, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 47: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 48: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 49: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
      case 50: // while -> WHILE, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new WhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 51: // dowhile -> DO, block, WHILE, LPARENTH, expression, RPARENTH, SEMICOLON
{ CurrentSemanticValue.n = new DoWhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-6].n); }
        break;
      case 52: // for -> FOR, LPARENTH, expression_or_empty, SEMICOLON, expression_or_empty, 
               //        SEMICOLON, expression_or_empty, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new ForNode((StatementNode)ValueStack[ValueStack.Depth-7].n, (StatementNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 53: // expression_or_empty -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 55: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 56: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon, ELSE, 
               //       statement_or_semicolon
{ CurrentSemanticValue.n = new IfElseNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 57: // variable_declaration -> VAR, variable_declaration_identifier
{ CurrentSemanticValue.n = new VariableDeclarationNode((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 58: // variable_declaration -> variable_declaration, COMMA, 
               //                         variable_declaration_identifier
{ var nodes = ((VariableDeclarationNode)ValueStack[ValueStack.Depth-3].n); nodes.Declarations.Add((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 59: // variable_declaration_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 60: // variable_declaration_identifier -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 61: // boolean -> TRUE
{ CurrentSemanticValue.n = new BooleanNode(true); }
        break;
      case 62: // boolean -> FALSE
{ CurrentSemanticValue.n = new BooleanNode(false); }
        break;
      case 63: // array -> LBRACKET, array_list, RBRACKET
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 64: // array -> LBRACKET, RBRACKET
{ CurrentSemanticValue.n = new ArrayNode(); }
        break;
      case 65: // array_list -> expression
{ var arr = new ArrayNode(); arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 66: // array_list -> array_list, COMMA, expression
{ var arr = (ArrayNode)ValueStack[ValueStack.Depth-3].n; arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 67: // object -> LCURLYBRACE, object_properties_list, RCURLYBRACE
{ CurrentSemanticValue.n = new ObjectNode((List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-2].add); }
        break;
      case 68: // object_properties_list -> object_property
{ var l = new List<ObjectPropertyNode>(); l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.add = l; }
        break;
      case 69: // object_properties_list -> object_property, COMMA, object_properties_list
{ var l = (List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-1].add; l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-3].n); CurrentSemanticValue.add = l; }
        break;
      case 70: // object_property -> object_property_identifier, COLON, expression
{ CurrentSemanticValue.n = new ObjectPropertyNode((ObjectPropertyIdentifierNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 71: // object_property_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 72: // object_property_identifier -> STRING
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new StringNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 73: // function_invocation -> indexer_expression, LPARENTH, 
               //                        function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 74: // function_invocation_arguments_list -> expression
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 75: // function_invocation_arguments_list -> function_invocation_arguments_list, COMMA, 
               //                                       expression
{ var al = (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-3].n; CurrentSemanticValue.n = al; al.Arguments.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 76: // function_invocation_arguments_list -> /* empty */
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode(); }
        break;
      case 77: // indexer_getter -> indexer_expression, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.n = new IndexerGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 78: // property_getter -> indexer_expression, DOT, IDENTIFIER
{ CurrentSemanticValue.n = new PropertyGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 79: // assignment -> lvalue, ASSIGN, expression
{ CurrentSemanticValue.n = new AssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 80: // assignment -> lvalue, ADDASSG, expression
{ CurrentSemanticValue.n = new AdditionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 81: // assignment -> lvalue, SUBASSG, expression
{ CurrentSemanticValue.n = new SubstractionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 82: // assignment -> lvalue, MULTASSG, expression
{ CurrentSemanticValue.n = new MultiplicationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 83: // assignment -> lvalue, DIVASSG, expression
{ CurrentSemanticValue.n = new DivisonAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 84: // assignment -> lvalue, REMASSG, expression
{ CurrentSemanticValue.n = new RemainderAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 85: // assignment -> lvalue, EXPASSG, expression
{ CurrentSemanticValue.n = new ExponentiationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 86: // assignment -> lvalue, LEFTSHFTASG, expression
{ CurrentSemanticValue.n = new LeftShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 87: // assignment -> lvalue, RIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new RightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 88: // assignment -> lvalue, URIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new UnsignedRightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 89: // assignment -> lvalue, BITWISEANDASSG, expression
{ CurrentSemanticValue.n = new BitwiseAndAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 90: // assignment -> lvalue, BITWISEXORASSG, expression
{ CurrentSemanticValue.n = new BitwiseXorAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 91: // assignment -> lvalue, BITWISEORASSG, expression
{ CurrentSemanticValue.n = new BitwiseOrAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 92: // comparison -> indexer_expression, EQUAL, indexer_expression
{ CurrentSemanticValue.n = new EqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 93: // comparison -> indexer_expression, NOTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new NotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 94: // comparison -> indexer_expression, STRICTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new StrictEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 95: // comparison -> indexer_expression, STRICTNOTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new StrictNotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 96: // comparison -> indexer_expression, GREATERTHAN, indexer_expression
{ CurrentSemanticValue.n = new GreaterThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 97: // comparison -> indexer_expression, GREATERTHANOREQUAL, indexer_expression
{ CurrentSemanticValue.n = new GreaterThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 98: // comparison -> indexer_expression, LESSTHAN, indexer_expression
{ CurrentSemanticValue.n = new LessThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 99: // comparison -> indexer_expression, LESSTHANOREQUAL, indexer_expression
{ CurrentSemanticValue.n = new LessThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 100: // arithmetic -> indexer_expression, ADDITION, indexer_expression
{ CurrentSemanticValue.n = new AdditionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 101: // arithmetic -> indexer_expression, SUBTRACTION, indexer_expression
{ CurrentSemanticValue.n = new SubtractionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 102: // arithmetic -> indexer_expression, MULTIPLICATION, indexer_expression
{ CurrentSemanticValue.n = new MultiplicationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 103: // arithmetic -> indexer_expression, DIVISION, indexer_expression
{ CurrentSemanticValue.n = new DivisionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 104: // arithmetic -> indexer_expression, REMAINDER, indexer_expression
{ CurrentSemanticValue.n = new RemainderNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 105: // arithmetic -> indexer_expression, EXPONENTIATION, indexer_expression
{ CurrentSemanticValue.n = new ExponentiationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 106: // arithmetic -> ADDITION, indexer_expression
{ CurrentSemanticValue.n = new UnaryPlusNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 107: // arithmetic -> SUBTRACTION, indexer_expression
{ CurrentSemanticValue.n = new UnaryNegationNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 108: // arithmetic -> INCREMENT, indexer_expression
{ CurrentSemanticValue.n = new PrefixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 109: // arithmetic -> indexer_expression, INCREMENT
{ CurrentSemanticValue.n = new PostfixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 110: // arithmetic -> DECREMENT, indexer_expression
{ CurrentSemanticValue.n = new PrefixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 111: // arithmetic -> indexer_expression, DECREMENT
{ CurrentSemanticValue.n = new PostfixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
