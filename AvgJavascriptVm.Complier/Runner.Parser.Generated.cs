// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 2/15/2018 1:54:24 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 2/15/2018 1:54:16 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,ELSE=6,
    WHILE=7,DO=8,FOR=9,RETURN=10,VAR=11,TRUE=12,
    FALSE=13,SEMICOLON=14,DOT=15,COMMA=16,LPARENTH=17,RPARENTH=18,
    LCURLYBRACE=19,RCURLYBRACE=20,LBRACKET=21,RBRACKET=22,COLON=23,ASSIGN=24,
    ADDASSG=25,SUBASSG=26,MULTASSG=27,DIVASSG=28,REMASSG=29,EXPASSG=30,
    LEFTSHFTASG=31,RIGHTSHFTASSG=32,URIGHTSHIFTASSG=33,BITWISEANDASSG=34,BITWISEXORASSG=35,BITWISEORASSG=36,
    NUMBER=37,IDENTIFIER=38,STRING=39,THEN=40,LEFTSHFTASSG=41,URIGHTSHFTASSG=42,
    STRICTEQUAL=43,STRICTNOTEQUAL=44,EQUAL=45,NOTEQUAL=46,GREATERTHAN=47,GREATERTHANOREQUAL=48,
    LESSTHAN=49,LESSTHANOREQUAL=50};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
			public object add;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[99];
  private static State[] states = new State[185];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements_and_declarations", "statement_or_declaration", 
      "statement", "function_declaration", "statements", "block", "while", "dowhile", 
      "for", "if", "return", "variable_declaration", "statement_expression", 
      "expression", "function_expression", "function_named_expression", "indexer_expression", 
      "assignment", "lvalue", "boolean", "array", "object", "function_invocation", 
      "comparison", "property_getter", "indexer_getter", "statement_or_semicolon", 
      "arguments_list", "function_body", "expression_or_empty", "variable_declaration_identifier", 
      "array_list", "object_properties_list", "object_property", "object_property_identifier", 
      "function_invocation_arguments_list", };

  static RunnerParser() {
    states[0] = new State(new int[]{19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,4,117,3,-3},new int[]{-1,1,-3,3,-4,126,-5,5,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-6,116});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,4,117,3,-2},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-6,116});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-10);
    states[7] = new State(new int[]{20,8,19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,183,37,41,39,184,12,44,13,45,21,47,17,64},new int[]{-7,9,-35,54,-5,182,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-36,56,-37,59});
    states[8] = new State(-35);
    states[9] = new State(new int[]{20,10,19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64},new int[]{-5,11,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68});
    states[10] = new State(-36);
    states[11] = new State(-9);
    states[12] = new State(-11);
    states[13] = new State(new int[]{17,14});
    states[14] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,15,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[15] = new State(new int[]{18,16});
    states[16] = new State(new int[]{19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,14,114},new int[]{-29,17,-5,18,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68});
    states[17] = new State(-49);
    states[18] = new State(-37);
    states[19] = new State(-12);
    states[20] = new State(new int[]{19,181},new int[]{-8,21});
    states[21] = new State(new int[]{7,22});
    states[22] = new State(new int[]{17,23});
    states[23] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,24,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(new int[]{14,26});
    states[26] = new State(-50);
    states[27] = new State(-18);
    states[28] = new State(new int[]{15,29,17,31,45,161,46,163,43,165,44,167,47,169,48,171,49,173,50,175,21,177,14,-21,18,-21,16,-21,22,-21,20,-21});
    states[29] = new State(new int[]{38,30});
    states[30] = new State(-77);
    states[31] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70,18,-75,16,-75},new int[]{-38,32,-16,160,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[32] = new State(new int[]{18,33,16,34});
    states[33] = new State(-72);
    states[34] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,35,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[35] = new State(-74);
    states[36] = new State(new int[]{24,37,25,136,26,138,27,140,28,142,29,144,30,146,31,148,32,150,42,152,34,154,35,156,36,158,15,-23,17,-23,45,-23,46,-23,43,-23,44,-23,47,-23,48,-23,49,-23,50,-23,21,-23,14,-23,18,-23,16,-23,22,-23,20,-23});
    states[37] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,38,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[38] = new State(-78);
    states[39] = new State(-32);
    states[40] = new State(-33);
    states[41] = new State(-24);
    states[42] = new State(-25);
    states[43] = new State(-26);
    states[44] = new State(-60);
    states[45] = new State(-61);
    states[46] = new State(-27);
    states[47] = new State(new int[]{22,134,38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-34,48,-16,135,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[48] = new State(new int[]{22,49,16,50});
    states[49] = new State(-62);
    states[50] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,51,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[51] = new State(-65);
    states[52] = new State(-28);
    states[53] = new State(new int[]{38,132,39,133},new int[]{-35,54,-36,56,-37,59});
    states[54] = new State(new int[]{20,55});
    states[55] = new State(-66);
    states[56] = new State(new int[]{16,57,20,-67});
    states[57] = new State(new int[]{38,132,39,133},new int[]{-35,58,-36,56,-37,59});
    states[58] = new State(-68);
    states[59] = new State(new int[]{23,60});
    states[60] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,61,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[61] = new State(-69);
    states[62] = new State(-29);
    states[63] = new State(-30);
    states[64] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,65,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[65] = new State(new int[]{18,66});
    states[66] = new State(-31);
    states[67] = new State(-34);
    states[68] = new State(-22);
    states[69] = new State(-19);
    states[70] = new State(new int[]{17,71,38,127});
    states[71] = new State(new int[]{38,125,18,-48,16,-48},new int[]{-30,72});
    states[72] = new State(new int[]{18,73,16,123});
    states[73] = new State(new int[]{19,75},new int[]{-31,74});
    states[74] = new State(-40);
    states[75] = new State(new int[]{20,76,19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,4,117},new int[]{-3,77,-4,126,-5,5,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-6,116});
    states[76] = new State(-42);
    states[77] = new State(new int[]{20,78,19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,4,117},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-6,116});
    states[78] = new State(-43);
    states[79] = new State(-13);
    states[80] = new State(new int[]{17,81});
    states[81] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70,14,-53},new int[]{-32,82,-16,115,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[82] = new State(new int[]{14,83});
    states[83] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70,14,-53},new int[]{-32,84,-16,115,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[84] = new State(new int[]{14,85});
    states[85] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70,18,-53},new int[]{-32,86,-16,115,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[86] = new State(new int[]{18,87});
    states[87] = new State(new int[]{19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,14,114},new int[]{-29,88,-5,18,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68});
    states[88] = new State(-51);
    states[89] = new State(-14);
    states[90] = new State(new int[]{17,91});
    states[91] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,92,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[92] = new State(new int[]{18,93});
    states[93] = new State(new int[]{19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,14,114},new int[]{-29,94,-5,18,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68});
    states[94] = new State(new int[]{6,95,19,-54,7,-54,8,-54,9,-54,5,-54,10,-54,11,-54,38,-54,37,-54,39,-54,12,-54,13,-54,21,-54,17,-54,4,-54,3,-54,20,-54});
    states[95] = new State(new int[]{19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64,14,114},new int[]{-29,96,-5,18,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68});
    states[96] = new State(-55);
    states[97] = new State(-15);
    states[98] = new State(new int[]{14,99,38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,100,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[99] = new State(-44);
    states[100] = new State(new int[]{14,101});
    states[101] = new State(-45);
    states[102] = new State(-20);
    states[103] = new State(new int[]{14,104,16,105});
    states[104] = new State(-16);
    states[105] = new State(new int[]{38,107},new int[]{-33,106});
    states[106] = new State(-57);
    states[107] = new State(new int[]{24,108,14,-58,16,-58});
    states[108] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,109,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[109] = new State(-59);
    states[110] = new State(new int[]{38,107},new int[]{-33,111});
    states[111] = new State(-56);
    states[112] = new State(new int[]{14,113});
    states[113] = new State(-17);
    states[114] = new State(-38);
    states[115] = new State(-52);
    states[116] = new State(-7);
    states[117] = new State(new int[]{38,118});
    states[118] = new State(new int[]{17,119});
    states[119] = new State(new int[]{38,125,18,-48,16,-48},new int[]{-30,120});
    states[120] = new State(new int[]{18,121,16,123});
    states[121] = new State(new int[]{19,75},new int[]{-31,122});
    states[122] = new State(-39);
    states[123] = new State(new int[]{38,124});
    states[124] = new State(-47);
    states[125] = new State(-46);
    states[126] = new State(-4);
    states[127] = new State(new int[]{17,128});
    states[128] = new State(new int[]{38,125,18,-48,16,-48},new int[]{-30,129});
    states[129] = new State(new int[]{18,130,16,123});
    states[130] = new State(new int[]{19,75},new int[]{-31,131});
    states[131] = new State(-41);
    states[132] = new State(-70);
    states[133] = new State(-71);
    states[134] = new State(-63);
    states[135] = new State(-64);
    states[136] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,137,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[137] = new State(-79);
    states[138] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,139,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[139] = new State(-80);
    states[140] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,141,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[141] = new State(-81);
    states[142] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,143,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[143] = new State(-82);
    states[144] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,145,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[145] = new State(-83);
    states[146] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,147,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[147] = new State(-84);
    states[148] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,149,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[149] = new State(-85);
    states[150] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,151,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[151] = new State(-86);
    states[152] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,153,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[153] = new State(-87);
    states[154] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,155,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[155] = new State(-88);
    states[156] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,157,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[157] = new State(-89);
    states[158] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,159,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[159] = new State(-90);
    states[160] = new State(-73);
    states[161] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,162,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[162] = new State(new int[]{15,29,17,31,45,-91,46,-91,43,-91,44,-91,47,169,48,171,49,173,50,175,21,177,14,-91,18,-91,16,-91,22,-91,20,-91});
    states[163] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,164,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[164] = new State(new int[]{15,29,17,31,45,-92,46,-92,43,-92,44,-92,47,169,48,171,49,173,50,175,21,177,14,-92,18,-92,16,-92,22,-92,20,-92});
    states[165] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,166,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[166] = new State(new int[]{15,29,17,31,45,-93,46,-93,43,-93,44,-93,47,169,48,171,49,173,50,175,21,177,14,-93,18,-93,16,-93,22,-93,20,-93});
    states[167] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,168,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[168] = new State(new int[]{15,29,17,31,45,-94,46,-94,43,-94,44,-94,47,169,48,171,49,173,50,175,21,177,14,-94,18,-94,16,-94,22,-94,20,-94});
    states[169] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,170,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[170] = new State(new int[]{15,29,17,31,45,-95,46,-95,43,-95,44,-95,47,-95,48,-95,49,-95,50,-95,21,177,14,-95,18,-95,16,-95,22,-95,20,-95});
    states[171] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,172,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[172] = new State(new int[]{15,29,17,31,45,-96,46,-96,43,-96,44,-96,47,-96,48,-96,49,-96,50,-96,21,177,14,-96,18,-96,16,-96,22,-96,20,-96});
    states[173] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,174,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[174] = new State(new int[]{15,29,17,31,45,-97,46,-97,43,-97,44,-97,47,-97,48,-97,49,-97,50,-97,21,177,14,-97,18,-97,16,-97,22,-97,20,-97});
    states[175] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64},new int[]{-19,176,-21,180,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67});
    states[176] = new State(new int[]{15,29,17,31,45,-98,46,-98,43,-98,44,-98,47,-98,48,-98,49,-98,50,-98,21,177,14,-98,18,-98,16,-98,22,-98,20,-98});
    states[177] = new State(new int[]{38,39,37,41,39,42,12,44,13,45,21,47,19,53,17,64,4,70},new int[]{-16,178,-15,27,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68,-17,69,-18,102});
    states[178] = new State(new int[]{22,179});
    states[179] = new State(-76);
    states[180] = new State(-23);
    states[181] = new State(new int[]{20,8,19,7,7,13,8,20,9,80,5,90,10,98,11,110,38,39,37,41,39,42,12,44,13,45,21,47,17,64},new int[]{-7,9,-5,182,-8,6,-9,12,-10,19,-11,79,-12,89,-13,97,-14,103,-15,112,-19,28,-21,36,-27,40,-22,43,-23,46,-24,52,-25,62,-26,63,-28,67,-20,68});
    states[182] = new State(-8);
    states[183] = new State(new int[]{24,-32,25,-32,26,-32,27,-32,28,-32,29,-32,30,-32,31,-32,32,-32,42,-32,34,-32,35,-32,36,-32,15,-32,17,-32,45,-32,46,-32,43,-32,44,-32,47,-32,48,-32,49,-32,50,-32,21,-32,14,-32,23,-70});
    states[184] = new State(new int[]{15,-25,17,-25,45,-25,46,-25,43,-25,44,-25,47,-25,48,-25,49,-25,50,-25,21,-25,14,-25,23,-71});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-7, new int[]{-5});
    rules[9] = new Rule(-7, new int[]{-7,-5});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-5, new int[]{-12});
    rules[15] = new Rule(-5, new int[]{-13});
    rules[16] = new Rule(-5, new int[]{-14,14});
    rules[17] = new Rule(-5, new int[]{-15,14});
    rules[18] = new Rule(-16, new int[]{-15});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-15, new int[]{-19});
    rules[22] = new Rule(-15, new int[]{-20});
    rules[23] = new Rule(-19, new int[]{-21});
    rules[24] = new Rule(-19, new int[]{37});
    rules[25] = new Rule(-19, new int[]{39});
    rules[26] = new Rule(-19, new int[]{-22});
    rules[27] = new Rule(-19, new int[]{-23});
    rules[28] = new Rule(-19, new int[]{-24});
    rules[29] = new Rule(-19, new int[]{-25});
    rules[30] = new Rule(-19, new int[]{-26});
    rules[31] = new Rule(-19, new int[]{17,-16,18});
    rules[32] = new Rule(-21, new int[]{38});
    rules[33] = new Rule(-21, new int[]{-27});
    rules[34] = new Rule(-21, new int[]{-28});
    rules[35] = new Rule(-8, new int[]{19,20});
    rules[36] = new Rule(-8, new int[]{19,-7,20});
    rules[37] = new Rule(-29, new int[]{-5});
    rules[38] = new Rule(-29, new int[]{14});
    rules[39] = new Rule(-6, new int[]{4,38,17,-30,18,-31});
    rules[40] = new Rule(-17, new int[]{4,17,-30,18,-31});
    rules[41] = new Rule(-18, new int[]{4,38,17,-30,18,-31});
    rules[42] = new Rule(-31, new int[]{19,20});
    rules[43] = new Rule(-31, new int[]{19,-3,20});
    rules[44] = new Rule(-13, new int[]{10,14});
    rules[45] = new Rule(-13, new int[]{10,-16,14});
    rules[46] = new Rule(-30, new int[]{38});
    rules[47] = new Rule(-30, new int[]{-30,16,38});
    rules[48] = new Rule(-30, new int[]{});
    rules[49] = new Rule(-9, new int[]{7,17,-16,18,-29});
    rules[50] = new Rule(-10, new int[]{8,-8,7,17,-16,18,14});
    rules[51] = new Rule(-11, new int[]{9,17,-32,14,-32,14,-32,18,-29});
    rules[52] = new Rule(-32, new int[]{-16});
    rules[53] = new Rule(-32, new int[]{});
    rules[54] = new Rule(-12, new int[]{5,17,-16,18,-29});
    rules[55] = new Rule(-12, new int[]{5,17,-16,18,-29,6,-29});
    rules[56] = new Rule(-14, new int[]{11,-33});
    rules[57] = new Rule(-14, new int[]{-14,16,-33});
    rules[58] = new Rule(-33, new int[]{38});
    rules[59] = new Rule(-33, new int[]{38,24,-16});
    rules[60] = new Rule(-22, new int[]{12});
    rules[61] = new Rule(-22, new int[]{13});
    rules[62] = new Rule(-23, new int[]{21,-34,22});
    rules[63] = new Rule(-23, new int[]{21,22});
    rules[64] = new Rule(-34, new int[]{-16});
    rules[65] = new Rule(-34, new int[]{-34,16,-16});
    rules[66] = new Rule(-24, new int[]{19,-35,20});
    rules[67] = new Rule(-35, new int[]{-36});
    rules[68] = new Rule(-35, new int[]{-36,16,-35});
    rules[69] = new Rule(-36, new int[]{-37,23,-16});
    rules[70] = new Rule(-37, new int[]{38});
    rules[71] = new Rule(-37, new int[]{39});
    rules[72] = new Rule(-25, new int[]{-19,17,-38,18});
    rules[73] = new Rule(-38, new int[]{-16});
    rules[74] = new Rule(-38, new int[]{-38,16,-16});
    rules[75] = new Rule(-38, new int[]{});
    rules[76] = new Rule(-28, new int[]{-19,21,-16,22});
    rules[77] = new Rule(-27, new int[]{-19,15,38});
    rules[78] = new Rule(-20, new int[]{-21,24,-16});
    rules[79] = new Rule(-20, new int[]{-21,25,-16});
    rules[80] = new Rule(-20, new int[]{-21,26,-16});
    rules[81] = new Rule(-20, new int[]{-21,27,-16});
    rules[82] = new Rule(-20, new int[]{-21,28,-16});
    rules[83] = new Rule(-20, new int[]{-21,29,-16});
    rules[84] = new Rule(-20, new int[]{-21,30,-16});
    rules[85] = new Rule(-20, new int[]{-21,31,-16});
    rules[86] = new Rule(-20, new int[]{-21,32,-16});
    rules[87] = new Rule(-20, new int[]{-21,42,-16});
    rules[88] = new Rule(-20, new int[]{-21,34,-16});
    rules[89] = new Rule(-20, new int[]{-21,35,-16});
    rules[90] = new Rule(-20, new int[]{-21,36,-16});
    rules[91] = new Rule(-26, new int[]{-19,45,-19});
    rules[92] = new Rule(-26, new int[]{-19,46,-19});
    rules[93] = new Rule(-26, new int[]{-19,43,-19});
    rules[94] = new Rule(-26, new int[]{-19,44,-19});
    rules[95] = new Rule(-26, new int[]{-19,47,-19});
    rules[96] = new Rule(-26, new int[]{-19,48,-19});
    rules[97] = new Rule(-26, new int[]{-19,49,-19});
    rules[98] = new Rule(-26, new int[]{-19,50,-19});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements_and_declarations
{ CheckIfReturnInMain(); Result = (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.n = Result; }
        break;
      case 3: // main -> /* empty */
{ Result = new StatementsAndDeclarations(); CurrentSemanticValue.n = Result; }
        break;
      case 4: // statements_and_declarations -> statement_or_declaration
{ var nodes = new StatementsAndDeclarations(); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 5: // statements_and_declarations -> statements_and_declarations, 
              //                                statement_or_declaration
{ var nodes = ((StatementsAndDeclarations)ValueStack[ValueStack.Depth-2].n); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n);  CurrentSemanticValue.n = nodes;}
        break;
      case 8: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 9: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // statement -> while
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // statement -> dowhile
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 13: // statement -> for
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 14: // statement -> if
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 15: // statement -> return
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 16: // statement -> variable_declaration, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 17: // statement -> statement_expression, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
      case 18: // expression -> statement_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 19: // expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 20: // expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 22: // statement_expression -> assignment
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // indexer_expression -> NUMBER
{ CurrentSemanticValue.n = new NumberNode(ValueStack[ValueStack.Depth-1].num); }
        break;
      case 25: // indexer_expression -> STRING
{ CurrentSemanticValue.n = new StringNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 26: // indexer_expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 27: // indexer_expression -> array
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 28: // indexer_expression -> object
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 29: // indexer_expression -> function_invocation
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 30: // indexer_expression -> comparison
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 31: // indexer_expression -> LPARENTH, expression, RPARENTH
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 32: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.n = new IdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 33: // lvalue -> property_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 34: // lvalue -> indexer_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 35: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 36: // block -> LCURLYBRACE, statements, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 37: // statement_or_semicolon -> statement
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 38: // statement_or_semicolon -> SEMICOLON
{ CurrentSemanticValue.n = new EmptyExpression(); }
        break;
      case 39: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionDeclarationNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 40: // function_expression -> FUNCTION, LPARENTH, arguments_list, RPARENTH, 
               //                        function_body
{ CurrentSemanticValue.n = new FunctionExpressionNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 41: // function_named_expression -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                              RPARENTH, function_body
{CurrentSemanticValue.n = new FunctionNamedExpressionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 42: // function_body -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new StatementsAndDeclarations(); }
        break;
      case 43: // function_body -> LCURLYBRACE, statements_and_declarations, RCURLYBRACE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 44: // return -> RETURN, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 45: // return -> RETURN, expression, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 46: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 47: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 48: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
      case 49: // while -> WHILE, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new WhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 50: // dowhile -> DO, block, WHILE, LPARENTH, expression, RPARENTH, SEMICOLON
{ CurrentSemanticValue.n = new DoWhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-6].n); }
        break;
      case 51: // for -> FOR, LPARENTH, expression_or_empty, SEMICOLON, expression_or_empty, 
               //        SEMICOLON, expression_or_empty, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new ForNode((StatementNode)ValueStack[ValueStack.Depth-7].n, (StatementNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 52: // expression_or_empty -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 54: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 55: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon, ELSE, 
               //       statement_or_semicolon
{ CurrentSemanticValue.n = new IfElseNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 56: // variable_declaration -> VAR, variable_declaration_identifier
{ CurrentSemanticValue.n = new VariableDeclarationNode((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 57: // variable_declaration -> variable_declaration, COMMA, 
               //                         variable_declaration_identifier
{ var nodes = ((VariableDeclarationNode)ValueStack[ValueStack.Depth-3].n); nodes.Declarations.Add((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 58: // variable_declaration_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 59: // variable_declaration_identifier -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 60: // boolean -> TRUE
{ CurrentSemanticValue.n = new BooleanNode(true); }
        break;
      case 61: // boolean -> FALSE
{ CurrentSemanticValue.n = new BooleanNode(false); }
        break;
      case 62: // array -> LBRACKET, array_list, RBRACKET
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 63: // array -> LBRACKET, RBRACKET
{ CurrentSemanticValue.n = new ArrayNode(); }
        break;
      case 64: // array_list -> expression
{ var arr = new ArrayNode(); arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 65: // array_list -> array_list, COMMA, expression
{ var arr = (ArrayNode)ValueStack[ValueStack.Depth-3].n; arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 66: // object -> LCURLYBRACE, object_properties_list, RCURLYBRACE
{ CurrentSemanticValue.n = new ObjectNode((List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-2].add); }
        break;
      case 67: // object_properties_list -> object_property
{ var l = new List<ObjectPropertyNode>(); l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.add = l; }
        break;
      case 68: // object_properties_list -> object_property, COMMA, object_properties_list
{ var l = (List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-1].add; l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-3].n); CurrentSemanticValue.add = l; }
        break;
      case 69: // object_property -> object_property_identifier, COLON, expression
{ CurrentSemanticValue.n = new ObjectPropertyNode((ObjectPropertyIdentifierNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 70: // object_property_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 71: // object_property_identifier -> STRING
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new StringNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 72: // function_invocation -> indexer_expression, LPARENTH, 
               //                        function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 73: // function_invocation_arguments_list -> expression
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 74: // function_invocation_arguments_list -> function_invocation_arguments_list, COMMA, 
               //                                       expression
{ var al = (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-3].n; CurrentSemanticValue.n = al; al.Arguments.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 75: // function_invocation_arguments_list -> /* empty */
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode(); }
        break;
      case 76: // indexer_getter -> indexer_expression, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.n = new IndexerGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 77: // property_getter -> indexer_expression, DOT, IDENTIFIER
{ CurrentSemanticValue.n = new PropertyGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 78: // assignment -> lvalue, ASSIGN, expression
{ CurrentSemanticValue.n = new AssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 79: // assignment -> lvalue, ADDASSG, expression
{ CurrentSemanticValue.n = new AdditionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 80: // assignment -> lvalue, SUBASSG, expression
{ CurrentSemanticValue.n = new SubstractionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 81: // assignment -> lvalue, MULTASSG, expression
{ CurrentSemanticValue.n = new MultiplicationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 82: // assignment -> lvalue, DIVASSG, expression
{ CurrentSemanticValue.n = new DivisonAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 83: // assignment -> lvalue, REMASSG, expression
{ CurrentSemanticValue.n = new RemainderAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 84: // assignment -> lvalue, EXPASSG, expression
{ CurrentSemanticValue.n = new ExponentiationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 85: // assignment -> lvalue, LEFTSHFTASG, expression
{ CurrentSemanticValue.n = new LeftShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 86: // assignment -> lvalue, RIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new RightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 87: // assignment -> lvalue, URIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new UnsignedRightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 88: // assignment -> lvalue, BITWISEANDASSG, expression
{ CurrentSemanticValue.n = new BitwiseAndAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 89: // assignment -> lvalue, BITWISEXORASSG, expression
{ CurrentSemanticValue.n = new BitwiseXorAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 90: // assignment -> lvalue, BITWISEORASSG, expression
{ CurrentSemanticValue.n = new BitwiseOrAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 91: // comparison -> indexer_expression, EQUAL, indexer_expression
{ CurrentSemanticValue.n = new EqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 92: // comparison -> indexer_expression, NOTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new NotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 93: // comparison -> indexer_expression, STRICTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new StrictEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 94: // comparison -> indexer_expression, STRICTNOTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new StrictNotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 95: // comparison -> indexer_expression, GREATERTHAN, indexer_expression
{ CurrentSemanticValue.n = new GreaterThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 96: // comparison -> indexer_expression, GREATERTHANOREQUAL, indexer_expression
{ CurrentSemanticValue.n = new GreaterThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 97: // comparison -> indexer_expression, LESSTHAN, indexer_expression
{ CurrentSemanticValue.n = new LessThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 98: // comparison -> indexer_expression, LESSTHANOREQUAL, indexer_expression
{ CurrentSemanticValue.n = new LessThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
