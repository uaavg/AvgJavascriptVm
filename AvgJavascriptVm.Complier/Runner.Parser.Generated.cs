// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 3/1/2018 4:53:13 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 3/1/2018 4:53:12 PM>

// options: conflicts no-lines report gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,ELSE=6,
    WHILE=7,DO=8,FOR=9,RETURN=10,VAR=11,TRUE=12,
    FALSE=13,SEMICOLON=14,DOT=15,COMMA=16,LPARENTH=17,RPARENTH=18,
    LCURLYBRACE=19,RCURLYBRACE=20,LBRACKET=21,RBRACKET=22,COLON=23,ASSIGN=24,
    ADDASSG=25,SUBASSG=26,MULTASSG=27,DIVASSG=28,REMASSG=29,EXPASSG=30,
    LEFTSHFTASG=31,RIGHTSHFTASSG=32,URIGHTSHIFTASSG=33,BITWISEANDASSG=34,BITWISEXORASSG=35,BITWISEORASSG=36,
    REMAINDER=37,INCREMENT=38,DECREMENT=39,EXPONENTIATION=40,ADDITION=41,SUBTRACTION=42,
    MULTIPLICATION=43,DIVISION=44,UNARYPLUS=45,UNARYMINUS=46,POSTFIX=47,PREFIX=48,
    PROERTYGETTER=49,BITWISEAND=50,BITWISEOR=51,BITWISEXOR=52,BITWISENOT=53,LEFTSHIFT=54,
    ZEROFILLRIGHTSHIFT=55,SIGNPROPRIGHTSHIFT=56,LOGICALAND=57,LOGICALOR=58,LOGICALNOT=59,QUESTION=60,
    NUMBER=61,IDENTIFIER=62,STRING=63,DELETE=64,TYPEOF=65,VOID=66,
    IN=67,INSTANCEOF=68,THEN=69,LOWESTPRIORITY=70,LEFTSHFTASSG=71,URIGHTSHFTASSG=72,
    STRICTEQUAL=73,STRICTNOTEQUAL=74,EQUAL=75,NOTEQUAL=76,GREATERTHAN=77,GREATERTHANOREQUAL=78,
    LESSTHAN=79,LESSTHANOREQUAL=80,LPARENT=81};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
			public object add;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[146];
  private static State[] states = new State[265];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements_and_declarations", "statement_or_declaration", 
      "statement", "function_declaration", "statements", "block", "while", "dowhile", 
      "for", "if", "return", "variable_declaration", "statement_expression", 
      "expression", "function_expression", "function_named_expression", "assignment", 
      "conditional", "comma", "binary_valid_expression", "arithmetic", "indexer_expression", 
      "comparison", "bitwise", "unary", "logical", "delete", "typeof", "void", 
      "in", "instanceof", "invocation_expression", "unary_expression", "function_invocation_func", 
      "lvalue", "boolean", "array", "object", "function_invocation", "property_getter", 
      "indexer_getter", "statement_or_semicolon", "arguments_list", "function_body", 
      "expression_or_empty", "variable_declaration_identifier", "array_list", 
      "object_properties_list", "object_property", "object_property_identifier", 
      "function_invocation_arguments_list", };

  static RunnerParser() {
    states[0] = new State(new int[]{19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,213,3,-3},new int[]{-1,1,-3,3,-4,222,-5,5,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-6,212});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,213,3,-2},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-6,212});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-10);
    states[7] = new State(new int[]{20,8,19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,263,61,45,63,264,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-7,9,-50,58,-5,262,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-51,60,-52,63});
    states[8] = new State(-52);
    states[9] = new State(new int[]{20,10,19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-5,11,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[10] = new State(-53);
    states[11] = new State(-9);
    states[12] = new State(-11);
    states[13] = new State(new int[]{17,14});
    states[14] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,15,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[15] = new State(new int[]{18,16});
    states[16] = new State(new int[]{19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,14,210},new int[]{-44,17,-5,18,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[17] = new State(-66);
    states[18] = new State(-54);
    states[19] = new State(-12);
    states[20] = new State(new int[]{19,261},new int[]{-8,21});
    states[21] = new State(new int[]{7,22});
    states[22] = new State(new int[]{17,23});
    states[23] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,24,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(new int[]{14,26});
    states[26] = new State(-67);
    states[27] = new State(new int[]{60,28,18,-18,14,-18,23,-18,22,-18,16,-18,20,-18,41,-18,75,-18,50,-18,57,-18,67,-18,68,-18,58,-18,51,-18,52,-18,54,-18,56,-18,55,-18,76,-18,73,-18,74,-18,77,-18,78,-18,79,-18,80,-18,42,-18,43,-18,44,-18,37,-18,40,-18});
    states[28] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-15,29,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[29] = new State(new int[]{23,30,60,28});
    states[30] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-15,31,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[31] = new State(new int[]{60,28,14,-139,18,-139,23,-139,22,-139,16,-139,20,-139,41,-139,75,-139,50,-139,57,-139,67,-139,68,-139,58,-139,51,-139,52,-139,54,-139,56,-139,55,-139,76,-139,73,-139,74,-139,77,-139,78,-139,79,-139,80,-139,42,-139,43,-139,44,-139,37,-139,40,-139});
    states[32] = new State(-21);
    states[33] = new State(new int[]{24,34,25,237,26,239,27,241,28,243,29,245,30,247,31,249,32,251,72,253,34,255,35,257,36,259,38,231,39,232,15,-41,21,-41,17,-41,16,-41,41,-41,75,-41,50,-41,57,-41,67,-41,68,-41,58,-41,51,-41,52,-41,54,-41,56,-41,55,-41,76,-41,73,-41,74,-41,77,-41,78,-41,79,-41,80,-41,42,-41,43,-41,44,-41,37,-41,40,-41,14,-41,60,-41,18,-41,23,-41,22,-41,20,-41});
    states[34] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,35,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[35] = new State(-96);
    states[36] = new State(-49);
    states[37] = new State(-50);
    states[38] = new State(new int[]{15,39,21,41,17,121,16,-26,41,-26,75,-26,50,-26,57,-26,67,-26,68,-26,58,-26,51,-26,52,-26,54,-26,56,-26,55,-26,76,-26,73,-26,74,-26,77,-26,78,-26,79,-26,80,-26,42,-26,43,-26,44,-26,37,-26,40,-26,14,-26,60,-26,18,-26,23,-26,22,-26,20,-26});
    states[39] = new State(new int[]{62,40});
    states[40] = new State(-95);
    states[41] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,42,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[42] = new State(new int[]{22,43});
    states[43] = new State(-94);
    states[44] = new State(-51);
    states[45] = new State(-42);
    states[46] = new State(-43);
    states[47] = new State(-44);
    states[48] = new State(-77);
    states[49] = new State(-78);
    states[50] = new State(-45);
    states[51] = new State(new int[]{22,235,62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-49,52,-16,236,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[52] = new State(new int[]{22,53,16,54});
    states[53] = new State(-79);
    states[54] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,55,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[55] = new State(-82);
    states[56] = new State(-46);
    states[57] = new State(new int[]{62,233,63,234},new int[]{-50,58,-51,60,-52,63});
    states[58] = new State(new int[]{20,59});
    states[59] = new State(-83);
    states[60] = new State(new int[]{16,61,20,-84});
    states[61] = new State(new int[]{62,233,63,234},new int[]{-50,62,-51,60,-52,63});
    states[62] = new State(-85);
    states[63] = new State(new int[]{23,64});
    states[64] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,65,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[65] = new State(-86);
    states[66] = new State(-47);
    states[67] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,68,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[68] = new State(new int[]{18,69});
    states[69] = new State(-48);
    states[70] = new State(-22);
    states[71] = new State(-23);
    states[72] = new State(new int[]{16,73,41,75,75,77,50,79,57,81,67,83,68,85,58,87,51,89,52,91,54,93,56,95,55,97,76,99,73,101,74,103,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,14,-24,60,-24,18,-24,23,-24,22,-24,20,-24});
    states[73] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,74,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[74] = new State(new int[]{41,75,75,77,50,79,57,81,67,83,68,85,58,87,51,89,52,91,54,93,56,95,55,97,76,99,73,101,74,103,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,14,-140,60,-140,18,-140,23,-140,22,-140,16,-140,20,-140});
    states[75] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,76,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[76] = new State(new int[]{41,-117,75,-117,50,-117,57,-117,67,-117,68,-117,58,-117,51,-117,52,-117,54,-117,56,-117,55,-117,76,-117,73,-117,74,-117,77,-117,78,-117,79,-117,80,-117,42,-117,43,115,44,117,37,119,40,228,16,-117,14,-117,60,-117,18,-117,23,-117,22,-117,20,-117});
    states[77] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,78,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[78] = new State(new int[]{41,75,75,-109,50,-109,57,-109,67,83,68,85,58,-109,51,-109,52,-109,54,93,56,95,55,97,76,-109,73,-109,74,-109,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-109,14,-109,60,-109,18,-109,23,-109,22,-109,20,-109});
    states[79] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,80,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[80] = new State(new int[]{41,75,75,77,50,-131,57,-131,67,83,68,85,58,-131,51,-131,52,-131,54,93,56,95,55,97,76,99,73,101,74,103,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-131,14,-131,60,-131,18,-131,23,-131,22,-131,20,-131});
    states[81] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,82,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[82] = new State(new int[]{41,75,75,77,50,79,57,-137,67,83,68,85,58,87,51,89,52,91,54,93,56,95,55,97,76,99,73,101,74,103,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-137,14,-137,60,-137,18,-137,23,-137,22,-137,20,-137});
    states[83] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,84,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[84] = new State(new int[]{41,75,75,-144,50,-144,57,-144,67,-144,68,-144,58,-144,51,-144,52,-144,54,93,56,95,55,97,76,-144,73,-144,74,-144,77,-144,78,-144,79,-144,80,-144,42,113,43,115,44,117,37,119,40,228,16,-144,14,-144,60,-144,18,-144,23,-144,22,-144,20,-144});
    states[85] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,86,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[86] = new State(new int[]{41,75,75,-145,50,-145,57,-145,67,-145,68,-145,58,-145,51,-145,52,-145,54,93,56,95,55,97,76,-145,73,-145,74,-145,77,-145,78,-145,79,-145,80,-145,42,113,43,115,44,117,37,119,40,228,16,-145,14,-145,60,-145,18,-145,23,-145,22,-145,20,-145});
    states[87] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,88,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[88] = new State(new int[]{41,75,75,77,50,79,57,-138,67,83,68,85,58,-138,51,89,52,91,54,93,56,95,55,97,76,99,73,101,74,103,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-138,14,-138,60,-138,18,-138,23,-138,22,-138,20,-138});
    states[89] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,90,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[90] = new State(new int[]{41,75,75,77,50,79,57,-132,67,83,68,85,58,-132,51,-132,52,91,54,93,56,95,55,97,76,99,73,101,74,103,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-132,14,-132,60,-132,18,-132,23,-132,22,-132,20,-132});
    states[91] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,92,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[92] = new State(new int[]{41,75,75,77,50,79,57,-133,67,83,68,85,58,-133,51,-133,52,-133,54,93,56,95,55,97,76,99,73,101,74,103,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-133,14,-133,60,-133,18,-133,23,-133,22,-133,20,-133});
    states[93] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,94,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[94] = new State(new int[]{41,75,75,-134,50,-134,57,-134,67,-134,68,-134,58,-134,51,-134,52,-134,54,-134,56,-134,55,-134,76,-134,73,-134,74,-134,77,-134,78,-134,79,-134,80,-134,42,113,43,115,44,117,37,119,40,228,16,-134,14,-134,60,-134,18,-134,23,-134,22,-134,20,-134});
    states[95] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,96,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[96] = new State(new int[]{41,75,75,-135,50,-135,57,-135,67,-135,68,-135,58,-135,51,-135,52,-135,54,-135,56,-135,55,-135,76,-135,73,-135,74,-135,77,-135,78,-135,79,-135,80,-135,42,113,43,115,44,117,37,119,40,228,16,-135,14,-135,60,-135,18,-135,23,-135,22,-135,20,-135});
    states[97] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,98,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[98] = new State(new int[]{41,75,75,-136,50,-136,57,-136,67,-136,68,-136,58,-136,51,-136,52,-136,54,-136,56,-136,55,-136,76,-136,73,-136,74,-136,77,-136,78,-136,79,-136,80,-136,42,113,43,115,44,117,37,119,40,228,16,-136,14,-136,60,-136,18,-136,23,-136,22,-136,20,-136});
    states[99] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,100,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[100] = new State(new int[]{41,75,75,-110,50,-110,57,-110,67,83,68,85,58,-110,51,-110,52,-110,54,93,56,95,55,97,76,-110,73,-110,74,-110,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-110,14,-110,60,-110,18,-110,23,-110,22,-110,20,-110});
    states[101] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,102,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[102] = new State(new int[]{41,75,75,-111,50,-111,57,-111,67,83,68,85,58,-111,51,-111,52,-111,54,93,56,95,55,97,76,-111,73,-111,74,-111,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-111,14,-111,60,-111,18,-111,23,-111,22,-111,20,-111});
    states[103] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,104,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[104] = new State(new int[]{41,75,75,-112,50,-112,57,-112,67,83,68,85,58,-112,51,-112,52,-112,54,93,56,95,55,97,76,-112,73,-112,74,-112,77,105,78,107,79,109,80,111,42,113,43,115,44,117,37,119,40,228,16,-112,14,-112,60,-112,18,-112,23,-112,22,-112,20,-112});
    states[105] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,106,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[106] = new State(new int[]{41,75,75,-113,50,-113,57,-113,67,-113,68,-113,58,-113,51,-113,52,-113,54,93,56,95,55,97,76,-113,73,-113,74,-113,77,-113,78,-113,79,-113,80,-113,42,113,43,115,44,117,37,119,40,228,16,-113,14,-113,60,-113,18,-113,23,-113,22,-113,20,-113});
    states[107] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,108,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[108] = new State(new int[]{41,75,75,-114,50,-114,57,-114,67,-114,68,-114,58,-114,51,-114,52,-114,54,93,56,95,55,97,76,-114,73,-114,74,-114,77,-114,78,-114,79,-114,80,-114,42,113,43,115,44,117,37,119,40,228,16,-114,14,-114,60,-114,18,-114,23,-114,22,-114,20,-114});
    states[109] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,110,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[110] = new State(new int[]{41,75,75,-115,50,-115,57,-115,67,-115,68,-115,58,-115,51,-115,52,-115,54,93,56,95,55,97,76,-115,73,-115,74,-115,77,-115,78,-115,79,-115,80,-115,42,113,43,115,44,117,37,119,40,228,16,-115,14,-115,60,-115,18,-115,23,-115,22,-115,20,-115});
    states[111] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,112,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[112] = new State(new int[]{41,75,75,-116,50,-116,57,-116,67,-116,68,-116,58,-116,51,-116,52,-116,54,93,56,95,55,97,76,-116,73,-116,74,-116,77,-116,78,-116,79,-116,80,-116,42,113,43,115,44,117,37,119,40,228,16,-116,14,-116,60,-116,18,-116,23,-116,22,-116,20,-116});
    states[113] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,114,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[114] = new State(new int[]{41,-118,75,-118,50,-118,57,-118,67,-118,68,-118,58,-118,51,-118,52,-118,54,-118,56,-118,55,-118,76,-118,73,-118,74,-118,77,-118,78,-118,79,-118,80,-118,42,-118,43,115,44,117,37,119,40,228,16,-118,14,-118,60,-118,18,-118,23,-118,22,-118,20,-118});
    states[115] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,116,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[116] = new State(new int[]{41,-119,75,-119,50,-119,57,-119,67,-119,68,-119,58,-119,51,-119,52,-119,54,-119,56,-119,55,-119,76,-119,73,-119,74,-119,77,-119,78,-119,79,-119,80,-119,42,-119,43,-119,44,-119,37,-119,40,228,16,-119,14,-119,60,-119,18,-119,23,-119,22,-119,20,-119});
    states[117] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,118,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[118] = new State(new int[]{41,-120,75,-120,50,-120,57,-120,67,-120,68,-120,58,-120,51,-120,52,-120,54,-120,56,-120,55,-120,76,-120,73,-120,74,-120,77,-120,78,-120,79,-120,80,-120,42,-120,43,-120,44,-120,37,-120,40,228,16,-120,14,-120,60,-120,18,-120,23,-120,22,-120,20,-120});
    states[119] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67},new int[]{-24,120,-37,133,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44});
    states[120] = new State(new int[]{15,39,17,121,21,41,16,-121,41,-121,75,-121,50,-121,57,-121,67,-121,68,-121,58,-121,51,-121,52,-121,54,-121,56,-121,55,-121,76,-121,73,-121,74,-121,77,-121,78,-121,79,-121,80,-121,42,-121,43,-121,44,-121,37,-121,40,-121,14,-121,60,-121,18,-121,23,-121,22,-121,20,-121});
    states[121] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142,18,-93,16,-93},new int[]{-53,122,-16,138,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[122] = new State(new int[]{18,123,16,124});
    states[123] = new State(-89);
    states[124] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,125,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[125] = new State(-92);
    states[126] = new State(-25);
    states[127] = new State(-27);
    states[128] = new State(-28);
    states[129] = new State(-29);
    states[130] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,4,142},new int[]{-35,131,-24,132,-37,133,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-34,134,-17,141,-18,176,-36,177});
    states[131] = new State(-123);
    states[132] = new State(new int[]{15,39,17,121,21,41,16,-38,41,-38,75,-38,50,-38,57,-38,67,-38,68,-38,58,-38,51,-38,52,-38,54,-38,56,-38,55,-38,76,-38,73,-38,74,-38,77,-38,78,-38,79,-38,80,-38,42,-38,43,-38,44,-38,37,-38,40,-38,14,-38,60,-38,18,-38,23,-38,22,-38,20,-38});
    states[133] = new State(-41);
    states[134] = new State(new int[]{17,135,16,-39,41,-39,75,-39,50,-39,57,-39,67,-39,68,-39,58,-39,51,-39,52,-39,54,-39,56,-39,55,-39,76,-39,73,-39,74,-39,77,-39,78,-39,79,-39,80,-39,42,-39,43,-39,44,-39,37,-39,40,-39,14,-39,60,-39,18,-39,23,-39,22,-39,20,-39});
    states[135] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142,18,-93,16,-93},new int[]{-53,136,-16,138,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[136] = new State(new int[]{18,137,16,124});
    states[137] = new State(-90);
    states[138] = new State(-91);
    states[139] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,4,142},new int[]{-35,140,-24,132,-37,133,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-34,134,-17,141,-18,176,-36,177});
    states[140] = new State(-124);
    states[141] = new State(-36);
    states[142] = new State(new int[]{17,143,62,223});
    states[143] = new State(new int[]{62,221,18,-65,16,-65},new int[]{-45,144});
    states[144] = new State(new int[]{18,145,16,219});
    states[145] = new State(new int[]{19,147},new int[]{-46,146});
    states[146] = new State(-57);
    states[147] = new State(new int[]{20,148,19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,213},new int[]{-3,149,-4,222,-5,5,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-6,212});
    states[148] = new State(-59);
    states[149] = new State(new int[]{20,150,19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,213},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-6,212});
    states[150] = new State(-60);
    states[151] = new State(-13);
    states[152] = new State(new int[]{17,153});
    states[153] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142,14,-70},new int[]{-47,154,-16,211,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[154] = new State(new int[]{14,155});
    states[155] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142,14,-70},new int[]{-47,156,-16,211,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[156] = new State(new int[]{14,157});
    states[157] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142,18,-70},new int[]{-47,158,-16,211,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[158] = new State(new int[]{18,159});
    states[159] = new State(new int[]{19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,14,210},new int[]{-44,160,-5,18,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[160] = new State(-68);
    states[161] = new State(-14);
    states[162] = new State(new int[]{17,163});
    states[163] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,164,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[164] = new State(new int[]{18,165});
    states[165] = new State(new int[]{19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,14,210},new int[]{-44,166,-5,18,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[166] = new State(new int[]{6,167,19,-71,7,-71,8,-71,9,-71,5,-71,10,-71,11,-71,62,-71,61,-71,63,-71,12,-71,13,-71,21,-71,17,-71,53,-71,41,-71,42,-71,38,-71,39,-71,59,-71,64,-71,65,-71,66,-71,4,-71,3,-71,20,-71});
    states[167] = new State(new int[]{19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,14,210},new int[]{-44,168,-5,18,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[168] = new State(-72);
    states[169] = new State(-15);
    states[170] = new State(new int[]{14,171,62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,172,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[171] = new State(-61);
    states[172] = new State(new int[]{14,173});
    states[173] = new State(-62);
    states[174] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,4,142},new int[]{-35,175,-24,132,-37,133,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-34,134,-17,141,-18,176,-36,177});
    states[175] = new State(-125);
    states[176] = new State(-37);
    states[177] = new State(-40);
    states[178] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67},new int[]{-37,179,-42,37,-24,180,-43,44,-38,47,-39,50,-40,56,-41,66});
    states[179] = new State(new int[]{16,-126,41,-126,75,-126,50,-126,57,-126,67,-126,68,-126,58,-126,51,-126,52,-126,54,-126,56,-126,55,-126,76,-126,73,-126,74,-126,77,-126,78,-126,79,-126,80,-126,42,-126,43,-126,44,-126,37,-126,40,-126,14,-126,60,-126,18,-126,23,-126,22,-126,20,-126,15,-41,21,-41,17,-41});
    states[180] = new State(new int[]{15,39,21,41,17,121});
    states[181] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67},new int[]{-37,182,-42,37,-24,180,-43,44,-38,47,-39,50,-40,56,-41,66});
    states[182] = new State(new int[]{16,-128,41,-128,75,-128,50,-128,57,-128,67,-128,68,-128,58,-128,51,-128,52,-128,54,-128,56,-128,55,-128,76,-128,73,-128,74,-128,77,-128,78,-128,79,-128,80,-128,42,-128,43,-128,44,-128,37,-128,40,-128,14,-128,60,-128,18,-128,23,-128,22,-128,20,-128,15,-41,21,-41,17,-41});
    states[183] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,4,142},new int[]{-35,184,-24,132,-37,133,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-34,134,-17,141,-18,176,-36,177});
    states[184] = new State(-130);
    states[185] = new State(-30);
    states[186] = new State(-31);
    states[187] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67},new int[]{-37,188,-42,37,-24,180,-43,44,-38,47,-39,50,-40,56,-41,66});
    states[188] = new State(new int[]{16,-141,41,-141,75,-141,50,-141,57,-141,67,-141,68,-141,58,-141,51,-141,52,-141,54,-141,56,-141,55,-141,76,-141,73,-141,74,-141,77,-141,78,-141,79,-141,80,-141,42,-141,43,-141,44,-141,37,-141,40,-141,14,-141,60,-141,18,-141,23,-141,22,-141,20,-141,15,-41,21,-41,17,-41});
    states[189] = new State(-32);
    states[190] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,191,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[191] = new State(-142);
    states[192] = new State(-33);
    states[193] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,194,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[194] = new State(-143);
    states[195] = new State(-34);
    states[196] = new State(-35);
    states[197] = new State(-19);
    states[198] = new State(-20);
    states[199] = new State(new int[]{14,200,16,201});
    states[200] = new State(-16);
    states[201] = new State(new int[]{62,203},new int[]{-48,202});
    states[202] = new State(-74);
    states[203] = new State(new int[]{24,204,14,-75,16,-75});
    states[204] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,205,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[205] = new State(-76);
    states[206] = new State(new int[]{62,203},new int[]{-48,207});
    states[207] = new State(-73);
    states[208] = new State(new int[]{14,209,60,28});
    states[209] = new State(-17);
    states[210] = new State(-55);
    states[211] = new State(-69);
    states[212] = new State(-7);
    states[213] = new State(new int[]{62,214});
    states[214] = new State(new int[]{17,215});
    states[215] = new State(new int[]{62,221,18,-65,16,-65},new int[]{-45,216});
    states[216] = new State(new int[]{18,217,16,219});
    states[217] = new State(new int[]{19,147},new int[]{-46,218});
    states[218] = new State(-56);
    states[219] = new State(new int[]{62,220});
    states[220] = new State(-64);
    states[221] = new State(-63);
    states[222] = new State(-4);
    states[223] = new State(new int[]{17,224});
    states[224] = new State(new int[]{62,221,18,-65,16,-65},new int[]{-45,225});
    states[225] = new State(new int[]{18,226,16,219});
    states[226] = new State(new int[]{19,147},new int[]{-46,227});
    states[227] = new State(-58);
    states[228] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-22,229,-23,126,-24,38,-37,230,-42,37,-38,47,-39,50,-40,56,-41,66,-43,44,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[229] = new State(-122);
    states[230] = new State(new int[]{38,231,39,232,15,-41,21,-41,17,-41,60,-41,14,-41,18,-41,23,-41,22,-41,16,-41,20,-41,41,-41,75,-41,50,-41,57,-41,67,-41,68,-41,58,-41,51,-41,52,-41,54,-41,56,-41,55,-41,76,-41,73,-41,74,-41,77,-41,78,-41,79,-41,80,-41,42,-41,43,-41,44,-41,37,-41,40,-41});
    states[231] = new State(-127);
    states[232] = new State(-129);
    states[233] = new State(-87);
    states[234] = new State(-88);
    states[235] = new State(-80);
    states[236] = new State(-81);
    states[237] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,238,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[238] = new State(-97);
    states[239] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,240,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[240] = new State(-98);
    states[241] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,242,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[242] = new State(-99);
    states[243] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,244,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[244] = new State(-100);
    states[245] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,246,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[246] = new State(-101);
    states[247] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,248,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[248] = new State(-102);
    states[249] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,250,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[250] = new State(-103);
    states[251] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,252,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[252] = new State(-104);
    states[253] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,254,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[254] = new State(-105);
    states[255] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,256,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[256] = new State(-106);
    states[257] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,258,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[258] = new State(-107);
    states[259] = new State(new int[]{62,36,61,45,63,46,12,48,13,49,21,51,19,57,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193,4,142},new int[]{-16,260,-15,27,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196,-17,197,-18,198});
    states[260] = new State(-108);
    states[261] = new State(new int[]{20,8,19,7,7,13,8,20,9,152,5,162,10,170,11,206,62,36,61,45,63,46,12,48,13,49,21,51,17,67,53,130,41,139,42,174,38,178,39,181,59,183,64,187,65,190,66,193},new int[]{-7,9,-5,262,-8,6,-9,12,-10,19,-11,151,-12,161,-13,169,-14,199,-15,208,-19,32,-37,33,-42,37,-24,38,-43,44,-38,47,-39,50,-40,56,-41,66,-20,70,-21,71,-22,72,-23,126,-25,127,-26,128,-27,129,-28,185,-29,186,-30,189,-31,192,-32,195,-33,196});
    states[262] = new State(-8);
    states[263] = new State(new int[]{24,-49,25,-49,26,-49,27,-49,28,-49,29,-49,30,-49,31,-49,32,-49,72,-49,34,-49,35,-49,36,-49,38,-49,39,-49,15,-49,21,-49,17,-49,16,-49,41,-49,75,-49,50,-49,57,-49,67,-49,68,-49,58,-49,51,-49,52,-49,54,-49,56,-49,55,-49,76,-49,73,-49,74,-49,77,-49,78,-49,79,-49,80,-49,42,-49,43,-49,44,-49,37,-49,40,-49,14,-49,60,-49,23,-87});
    states[264] = new State(new int[]{15,-43,21,-43,17,-43,16,-43,41,-43,75,-43,50,-43,57,-43,67,-43,68,-43,58,-43,51,-43,52,-43,54,-43,56,-43,55,-43,76,-43,73,-43,74,-43,77,-43,78,-43,79,-43,80,-43,42,-43,43,-43,44,-43,37,-43,40,-43,14,-43,60,-43,23,-88});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-7, new int[]{-5});
    rules[9] = new Rule(-7, new int[]{-7,-5});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-5, new int[]{-12});
    rules[15] = new Rule(-5, new int[]{-13});
    rules[16] = new Rule(-5, new int[]{-14,14});
    rules[17] = new Rule(-5, new int[]{-15,14});
    rules[18] = new Rule(-16, new int[]{-15});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-15, new int[]{-19});
    rules[22] = new Rule(-15, new int[]{-20});
    rules[23] = new Rule(-15, new int[]{-21});
    rules[24] = new Rule(-15, new int[]{-22});
    rules[25] = new Rule(-22, new int[]{-23});
    rules[26] = new Rule(-22, new int[]{-24});
    rules[27] = new Rule(-22, new int[]{-25});
    rules[28] = new Rule(-22, new int[]{-26});
    rules[29] = new Rule(-22, new int[]{-27});
    rules[30] = new Rule(-22, new int[]{-28});
    rules[31] = new Rule(-22, new int[]{-29});
    rules[32] = new Rule(-22, new int[]{-30});
    rules[33] = new Rule(-22, new int[]{-31});
    rules[34] = new Rule(-22, new int[]{-32});
    rules[35] = new Rule(-22, new int[]{-33});
    rules[36] = new Rule(-34, new int[]{-17});
    rules[37] = new Rule(-34, new int[]{-18});
    rules[38] = new Rule(-35, new int[]{-24});
    rules[39] = new Rule(-35, new int[]{-34});
    rules[40] = new Rule(-35, new int[]{-36});
    rules[41] = new Rule(-24, new int[]{-37});
    rules[42] = new Rule(-24, new int[]{61});
    rules[43] = new Rule(-24, new int[]{63});
    rules[44] = new Rule(-24, new int[]{-38});
    rules[45] = new Rule(-24, new int[]{-39});
    rules[46] = new Rule(-24, new int[]{-40});
    rules[47] = new Rule(-24, new int[]{-41});
    rules[48] = new Rule(-24, new int[]{17,-16,18});
    rules[49] = new Rule(-37, new int[]{62});
    rules[50] = new Rule(-37, new int[]{-42});
    rules[51] = new Rule(-37, new int[]{-43});
    rules[52] = new Rule(-8, new int[]{19,20});
    rules[53] = new Rule(-8, new int[]{19,-7,20});
    rules[54] = new Rule(-44, new int[]{-5});
    rules[55] = new Rule(-44, new int[]{14});
    rules[56] = new Rule(-6, new int[]{4,62,17,-45,18,-46});
    rules[57] = new Rule(-17, new int[]{4,17,-45,18,-46});
    rules[58] = new Rule(-18, new int[]{4,62,17,-45,18,-46});
    rules[59] = new Rule(-46, new int[]{19,20});
    rules[60] = new Rule(-46, new int[]{19,-3,20});
    rules[61] = new Rule(-13, new int[]{10,14});
    rules[62] = new Rule(-13, new int[]{10,-16,14});
    rules[63] = new Rule(-45, new int[]{62});
    rules[64] = new Rule(-45, new int[]{-45,16,62});
    rules[65] = new Rule(-45, new int[]{});
    rules[66] = new Rule(-9, new int[]{7,17,-16,18,-44});
    rules[67] = new Rule(-10, new int[]{8,-8,7,17,-16,18,14});
    rules[68] = new Rule(-11, new int[]{9,17,-47,14,-47,14,-47,18,-44});
    rules[69] = new Rule(-47, new int[]{-16});
    rules[70] = new Rule(-47, new int[]{});
    rules[71] = new Rule(-12, new int[]{5,17,-16,18,-44});
    rules[72] = new Rule(-12, new int[]{5,17,-16,18,-44,6,-44});
    rules[73] = new Rule(-14, new int[]{11,-48});
    rules[74] = new Rule(-14, new int[]{-14,16,-48});
    rules[75] = new Rule(-48, new int[]{62});
    rules[76] = new Rule(-48, new int[]{62,24,-16});
    rules[77] = new Rule(-38, new int[]{12});
    rules[78] = new Rule(-38, new int[]{13});
    rules[79] = new Rule(-39, new int[]{21,-49,22});
    rules[80] = new Rule(-39, new int[]{21,22});
    rules[81] = new Rule(-49, new int[]{-16});
    rules[82] = new Rule(-49, new int[]{-49,16,-16});
    rules[83] = new Rule(-40, new int[]{19,-50,20});
    rules[84] = new Rule(-50, new int[]{-51});
    rules[85] = new Rule(-50, new int[]{-51,16,-50});
    rules[86] = new Rule(-51, new int[]{-52,23,-16});
    rules[87] = new Rule(-52, new int[]{62});
    rules[88] = new Rule(-52, new int[]{63});
    rules[89] = new Rule(-41, new int[]{-24,17,-53,18});
    rules[90] = new Rule(-36, new int[]{-34,17,-53,18});
    rules[91] = new Rule(-53, new int[]{-16});
    rules[92] = new Rule(-53, new int[]{-53,16,-16});
    rules[93] = new Rule(-53, new int[]{});
    rules[94] = new Rule(-43, new int[]{-24,21,-16,22});
    rules[95] = new Rule(-42, new int[]{-24,15,62});
    rules[96] = new Rule(-19, new int[]{-37,24,-16});
    rules[97] = new Rule(-19, new int[]{-37,25,-16});
    rules[98] = new Rule(-19, new int[]{-37,26,-16});
    rules[99] = new Rule(-19, new int[]{-37,27,-16});
    rules[100] = new Rule(-19, new int[]{-37,28,-16});
    rules[101] = new Rule(-19, new int[]{-37,29,-16});
    rules[102] = new Rule(-19, new int[]{-37,30,-16});
    rules[103] = new Rule(-19, new int[]{-37,31,-16});
    rules[104] = new Rule(-19, new int[]{-37,32,-16});
    rules[105] = new Rule(-19, new int[]{-37,72,-16});
    rules[106] = new Rule(-19, new int[]{-37,34,-16});
    rules[107] = new Rule(-19, new int[]{-37,35,-16});
    rules[108] = new Rule(-19, new int[]{-37,36,-16});
    rules[109] = new Rule(-25, new int[]{-22,75,-22});
    rules[110] = new Rule(-25, new int[]{-22,76,-22});
    rules[111] = new Rule(-25, new int[]{-22,73,-22});
    rules[112] = new Rule(-25, new int[]{-22,74,-22});
    rules[113] = new Rule(-25, new int[]{-22,77,-22});
    rules[114] = new Rule(-25, new int[]{-22,78,-22});
    rules[115] = new Rule(-25, new int[]{-22,79,-22});
    rules[116] = new Rule(-25, new int[]{-22,80,-22});
    rules[117] = new Rule(-23, new int[]{-22,41,-22});
    rules[118] = new Rule(-23, new int[]{-22,42,-22});
    rules[119] = new Rule(-23, new int[]{-22,43,-22});
    rules[120] = new Rule(-23, new int[]{-22,44,-22});
    rules[121] = new Rule(-23, new int[]{-22,37,-24});
    rules[122] = new Rule(-23, new int[]{-22,40,-22});
    rules[123] = new Rule(-27, new int[]{53,-35});
    rules[124] = new Rule(-27, new int[]{41,-35});
    rules[125] = new Rule(-27, new int[]{42,-35});
    rules[126] = new Rule(-27, new int[]{38,-37});
    rules[127] = new Rule(-27, new int[]{-37,38});
    rules[128] = new Rule(-27, new int[]{39,-37});
    rules[129] = new Rule(-27, new int[]{-37,39});
    rules[130] = new Rule(-27, new int[]{59,-35});
    rules[131] = new Rule(-26, new int[]{-22,50,-22});
    rules[132] = new Rule(-26, new int[]{-22,51,-22});
    rules[133] = new Rule(-26, new int[]{-22,52,-22});
    rules[134] = new Rule(-26, new int[]{-22,54,-22});
    rules[135] = new Rule(-26, new int[]{-22,56,-22});
    rules[136] = new Rule(-26, new int[]{-22,55,-22});
    rules[137] = new Rule(-28, new int[]{-22,57,-22});
    rules[138] = new Rule(-28, new int[]{-22,58,-22});
    rules[139] = new Rule(-20, new int[]{-15,60,-15,23,-15});
    rules[140] = new Rule(-21, new int[]{-22,16,-22});
    rules[141] = new Rule(-29, new int[]{64,-37});
    rules[142] = new Rule(-30, new int[]{65,-16});
    rules[143] = new Rule(-31, new int[]{66,-16});
    rules[144] = new Rule(-32, new int[]{-22,67,-22});
    rules[145] = new Rule(-33, new int[]{-22,68,-22});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements_and_declarations
{ CheckIfReturnInMain(); Result = (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.n = Result; }
        break;
      case 3: // main -> /* empty */
{ Result = new StatementsAndDeclarations(); CurrentSemanticValue.n = Result; }
        break;
      case 4: // statements_and_declarations -> statement_or_declaration
{ var nodes = new StatementsAndDeclarations(); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 5: // statements_and_declarations -> statements_and_declarations, 
              //                                statement_or_declaration
{ var nodes = ((StatementsAndDeclarations)ValueStack[ValueStack.Depth-2].n); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n);  CurrentSemanticValue.n = nodes;}
        break;
      case 8: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 9: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // statement -> while
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // statement -> dowhile
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 13: // statement -> for
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 14: // statement -> if
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 15: // statement -> return
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 16: // statement -> variable_declaration, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 17: // statement -> statement_expression, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
      case 18: // expression -> statement_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 19: // expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 20: // expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 21: // statement_expression -> assignment
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 22: // statement_expression -> conditional
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 23: // statement_expression -> comma
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // statement_expression -> binary_valid_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 25: // binary_valid_expression -> arithmetic
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 26: // binary_valid_expression -> indexer_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 27: // binary_valid_expression -> comparison
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 28: // binary_valid_expression -> bitwise
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 29: // binary_valid_expression -> unary
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 30: // binary_valid_expression -> logical
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 31: // binary_valid_expression -> delete
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 32: // binary_valid_expression -> typeof
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 33: // binary_valid_expression -> void
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 34: // binary_valid_expression -> in
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 35: // binary_valid_expression -> instanceof
{CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 36: // invocation_expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 37: // invocation_expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 38: // unary_expression -> indexer_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 39: // unary_expression -> invocation_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 40: // unary_expression -> function_invocation_func
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 42: // indexer_expression -> NUMBER
{ CurrentSemanticValue.n = new NumberNode(ValueStack[ValueStack.Depth-1].num); }
        break;
      case 43: // indexer_expression -> STRING
{ CurrentSemanticValue.n = new StringNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 44: // indexer_expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 45: // indexer_expression -> array
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 46: // indexer_expression -> object
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 47: // indexer_expression -> function_invocation
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 48: // indexer_expression -> LPARENTH, expression, RPARENTH
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 49: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.n = new IdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 50: // lvalue -> property_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 51: // lvalue -> indexer_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 52: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 53: // block -> LCURLYBRACE, statements, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 54: // statement_or_semicolon -> statement
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 55: // statement_or_semicolon -> SEMICOLON
{ CurrentSemanticValue.n = new EmptyExpression(); }
        break;
      case 56: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionDeclarationNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 57: // function_expression -> FUNCTION, LPARENTH, arguments_list, RPARENTH, 
               //                        function_body
{ CurrentSemanticValue.n = new FunctionExpressionNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 58: // function_named_expression -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                              RPARENTH, function_body
{CurrentSemanticValue.n = new FunctionNamedExpressionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 59: // function_body -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new StatementsAndDeclarations(); }
        break;
      case 60: // function_body -> LCURLYBRACE, statements_and_declarations, RCURLYBRACE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 61: // return -> RETURN, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 62: // return -> RETURN, expression, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 63: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 64: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 65: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
      case 66: // while -> WHILE, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new WhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 67: // dowhile -> DO, block, WHILE, LPARENTH, expression, RPARENTH, SEMICOLON
{ CurrentSemanticValue.n = new DoWhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-6].n); }
        break;
      case 68: // for -> FOR, LPARENTH, expression_or_empty, SEMICOLON, expression_or_empty, 
               //        SEMICOLON, expression_or_empty, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new ForNode((StatementNode)ValueStack[ValueStack.Depth-7].n, (StatementNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 69: // expression_or_empty -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 71: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 72: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon, ELSE, 
               //       statement_or_semicolon
{ CurrentSemanticValue.n = new IfElseNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 73: // variable_declaration -> VAR, variable_declaration_identifier
{ CurrentSemanticValue.n = new VariableDeclarationNode((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 74: // variable_declaration -> variable_declaration, COMMA, 
               //                         variable_declaration_identifier
{ var nodes = ((VariableDeclarationNode)ValueStack[ValueStack.Depth-3].n); nodes.Declarations.Add((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 75: // variable_declaration_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 76: // variable_declaration_identifier -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 77: // boolean -> TRUE
{ CurrentSemanticValue.n = new BooleanNode(true); }
        break;
      case 78: // boolean -> FALSE
{ CurrentSemanticValue.n = new BooleanNode(false); }
        break;
      case 79: // array -> LBRACKET, array_list, RBRACKET
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 80: // array -> LBRACKET, RBRACKET
{ CurrentSemanticValue.n = new ArrayNode(); }
        break;
      case 81: // array_list -> expression
{ var arr = new ArrayNode(); arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 82: // array_list -> array_list, COMMA, expression
{ var arr = (ArrayNode)ValueStack[ValueStack.Depth-3].n; arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 83: // object -> LCURLYBRACE, object_properties_list, RCURLYBRACE
{ CurrentSemanticValue.n = new ObjectNode((List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-2].add); }
        break;
      case 84: // object_properties_list -> object_property
{ var l = new List<ObjectPropertyNode>(); l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.add = l; }
        break;
      case 85: // object_properties_list -> object_property, COMMA, object_properties_list
{ var l = (List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-1].add; l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-3].n); CurrentSemanticValue.add = l; }
        break;
      case 86: // object_property -> object_property_identifier, COLON, expression
{ CurrentSemanticValue.n = new ObjectPropertyNode((ObjectPropertyIdentifierNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 87: // object_property_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 88: // object_property_identifier -> STRING
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new StringNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 89: // function_invocation -> indexer_expression, LPARENTH, 
               //                        function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 90: // function_invocation_func -> invocation_expression, LPARENTH, 
               //                             function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 91: // function_invocation_arguments_list -> expression
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 92: // function_invocation_arguments_list -> function_invocation_arguments_list, COMMA, 
               //                                       expression
{ var al = (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-3].n; CurrentSemanticValue.n = al; al.Arguments.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 93: // function_invocation_arguments_list -> /* empty */
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode(); }
        break;
      case 94: // indexer_getter -> indexer_expression, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.n = new IndexerGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 95: // property_getter -> indexer_expression, DOT, IDENTIFIER
{ CurrentSemanticValue.n = new PropertyGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 96: // assignment -> lvalue, ASSIGN, expression
{ CurrentSemanticValue.n = new AssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 97: // assignment -> lvalue, ADDASSG, expression
{ CurrentSemanticValue.n = new AdditionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 98: // assignment -> lvalue, SUBASSG, expression
{ CurrentSemanticValue.n = new SubstractionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 99: // assignment -> lvalue, MULTASSG, expression
{ CurrentSemanticValue.n = new MultiplicationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 100: // assignment -> lvalue, DIVASSG, expression
{ CurrentSemanticValue.n = new DivisonAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 101: // assignment -> lvalue, REMASSG, expression
{ CurrentSemanticValue.n = new RemainderAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 102: // assignment -> lvalue, EXPASSG, expression
{ CurrentSemanticValue.n = new ExponentiationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 103: // assignment -> lvalue, LEFTSHFTASG, expression
{ CurrentSemanticValue.n = new LeftShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 104: // assignment -> lvalue, RIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new RightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 105: // assignment -> lvalue, URIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new UnsignedRightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 106: // assignment -> lvalue, BITWISEANDASSG, expression
{ CurrentSemanticValue.n = new BitwiseAndAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 107: // assignment -> lvalue, BITWISEXORASSG, expression
{ CurrentSemanticValue.n = new BitwiseXorAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 108: // assignment -> lvalue, BITWISEORASSG, expression
{ CurrentSemanticValue.n = new BitwiseOrAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 109: // comparison -> binary_valid_expression, EQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new EqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 110: // comparison -> binary_valid_expression, NOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new NotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 111: // comparison -> binary_valid_expression, STRICTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 112: // comparison -> binary_valid_expression, STRICTNOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictNotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 113: // comparison -> binary_valid_expression, GREATERTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 114: // comparison -> binary_valid_expression, GREATERTHANOREQUAL, 
                //               binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 115: // comparison -> binary_valid_expression, LESSTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 116: // comparison -> binary_valid_expression, LESSTHANOREQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 117: // arithmetic -> binary_valid_expression, ADDITION, binary_valid_expression
{ CurrentSemanticValue.n = new AdditionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 118: // arithmetic -> binary_valid_expression, SUBTRACTION, binary_valid_expression
{ CurrentSemanticValue.n = new SubtractionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 119: // arithmetic -> binary_valid_expression, MULTIPLICATION, binary_valid_expression
{ CurrentSemanticValue.n = new MultiplicationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 120: // arithmetic -> binary_valid_expression, DIVISION, binary_valid_expression
{ CurrentSemanticValue.n = new DivisionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 121: // arithmetic -> binary_valid_expression, REMAINDER, indexer_expression
{ CurrentSemanticValue.n = new RemainderNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 122: // arithmetic -> binary_valid_expression, EXPONENTIATION, binary_valid_expression
{ CurrentSemanticValue.n = new ExponentiationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 123: // unary -> BITWISENOT, unary_expression
{ CurrentSemanticValue.n = new BitwiseNotNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 124: // unary -> ADDITION, unary_expression
{ CurrentSemanticValue.n = new UnaryPlusNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 125: // unary -> SUBTRACTION, unary_expression
{ CurrentSemanticValue.n = new UnaryNegationNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 126: // unary -> INCREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 127: // unary -> lvalue, INCREMENT
{ CurrentSemanticValue.n = new PostfixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 128: // unary -> DECREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 129: // unary -> lvalue, DECREMENT
{ CurrentSemanticValue.n = new PostfixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 130: // unary -> LOGICALNOT, unary_expression
{ CurrentSemanticValue.n = new LogicalNotNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 131: // bitwise -> binary_valid_expression, BITWISEAND, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseAndNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 132: // bitwise -> binary_valid_expression, BITWISEOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseOrNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 133: // bitwise -> binary_valid_expression, BITWISEXOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseXorNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 134: // bitwise -> binary_valid_expression, LEFTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new LeftShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 135: // bitwise -> binary_valid_expression, SIGNPROPRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new SignPropagatingRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 136: // bitwise -> binary_valid_expression, ZEROFILLRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new ZeroFillRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 137: // logical -> binary_valid_expression, LOGICALAND, binary_valid_expression
{ CurrentSemanticValue.n = new LogicalAndNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 138: // logical -> binary_valid_expression, LOGICALOR, binary_valid_expression
{ CurrentSemanticValue.n = new LogicalOrNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 139: // conditional -> statement_expression, QUESTION, statement_expression, COLON, 
                //                statement_expression
{ CurrentSemanticValue.n = new ConditionalNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 140: // comma -> binary_valid_expression, COMMA, binary_valid_expression
{ CurrentSemanticValue.n = new CommaNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 141: // delete -> DELETE, lvalue
{ CurrentSemanticValue.n = new DeleteNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 142: // typeof -> TYPEOF, expression
{ CurrentSemanticValue.n = new TypeofNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 143: // void -> VOID, expression
{ CurrentSemanticValue.n = new VoidNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 144: // in -> binary_valid_expression, IN, binary_valid_expression
{ CurrentSemanticValue.n = new InNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 145: // instanceof -> binary_valid_expression, INSTANCEOF, binary_valid_expression
{ CurrentSemanticValue.n = new InNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
