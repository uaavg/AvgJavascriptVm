// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 2/16/2018 3:54:56 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 2/16/2018 3:54:53 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,ELSE=6,
    WHILE=7,DO=8,FOR=9,RETURN=10,VAR=11,TRUE=12,
    FALSE=13,SEMICOLON=14,DOT=15,COMMA=16,LPARENTH=17,RPARENTH=18,
    LCURLYBRACE=19,RCURLYBRACE=20,LBRACKET=21,RBRACKET=22,COLON=23,ASSIGN=24,
    ADDASSG=25,SUBASSG=26,MULTASSG=27,DIVASSG=28,REMASSG=29,EXPASSG=30,
    LEFTSHFTASG=31,RIGHTSHFTASSG=32,URIGHTSHIFTASSG=33,BITWISEANDASSG=34,BITWISEXORASSG=35,BITWISEORASSG=36,
    REMAINDER=37,INCREMENT=38,DECREMENT=39,EXPONENTIATION=40,ADDITION=41,SUBTRACTION=42,
    MULTIPLICATION=43,DIVISION=44,UNARYPLUS=45,UNARYMINUS=46,POSTFIX=47,PREFIX=48,
    PROERTYGETTER=49,BITWISEAND=50,BITWISEOR=51,BITWISEXOR=52,BITWISENOT=53,LEFTSHIFT=54,
    ZEROFILLRIGHTSHIFT=55,SIGNPROPRIGHTSHIFT=56,NUMBER=57,IDENTIFIER=58,STRING=59,THEN=60,
    LEFTSHFTASSG=61,URIGHTSHFTASSG=62,STRICTEQUAL=63,STRICTNOTEQUAL=64,EQUAL=65,NOTEQUAL=66,
    GREATERTHAN=67,GREATERTHANOREQUAL=68,LESSTHAN=69,LESSTHANOREQUAL=70,LPARENT=71};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
			public object add;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[127];
  private static State[] states = new State[234];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements_and_declarations", "statement_or_declaration", 
      "statement", "function_declaration", "statements", "block", "while", "dowhile", 
      "for", "if", "return", "variable_declaration", "statement_expression", 
      "expression", "function_expression", "function_named_expression", "assignment", 
      "binary_valid_expression", "arithmetic", "indexer_expression", "comparison", 
      "bitwise", "unary", "invocation_expression", "unary_expression", "function_invocation_func", 
      "lvalue", "boolean", "array", "object", "function_invocation", "property_getter", 
      "indexer_getter", "statement_or_semicolon", "arguments_list", "function_body", 
      "expression_or_empty", "variable_declaration_identifier", "array_list", 
      "object_properties_list", "object_property", "object_property_identifier", 
      "function_invocation_arguments_list", };

  static RunnerParser() {
    states[0] = new State(new int[]{19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,4,181,3,-3},new int[]{-1,1,-3,3,-4,190,-5,5,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-6,180});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,4,181,3,-2},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-6,180});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-10);
    states[7] = new State(new int[]{20,8,19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,232,57,41,59,233,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-7,9,-42,54,-5,231,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-43,56,-44,59});
    states[8] = new State(-43);
    states[9] = new State(new int[]{20,10,19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-5,11,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113});
    states[10] = new State(-44);
    states[11] = new State(-9);
    states[12] = new State(-11);
    states[13] = new State(new int[]{17,14});
    states[14] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,15,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[15] = new State(new int[]{18,16});
    states[16] = new State(new int[]{19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,14,178},new int[]{-36,17,-5,18,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113});
    states[17] = new State(-57);
    states[18] = new State(-45);
    states[19] = new State(-12);
    states[20] = new State(new int[]{19,230},new int[]{-8,21});
    states[21] = new State(new int[]{7,22});
    states[22] = new State(new int[]{17,23});
    states[23] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,24,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(new int[]{14,26});
    states[26] = new State(-58);
    states[27] = new State(-18);
    states[28] = new State(-21);
    states[29] = new State(new int[]{24,30,25,206,26,208,27,210,28,212,29,214,30,216,31,218,32,220,62,222,34,224,35,226,36,228,38,200,39,201,15,-32,21,-32,17,-32,41,-32,65,-32,50,-32,51,-32,52,-32,54,-32,56,-32,55,-32,66,-32,63,-32,64,-32,67,-32,68,-32,69,-32,70,-32,42,-32,43,-32,44,-32,37,-32,40,-32,14,-32,18,-32,22,-32,16,-32,20,-32});
    states[30] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,31,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[31] = new State(-87);
    states[32] = new State(-40);
    states[33] = new State(-41);
    states[34] = new State(new int[]{15,35,21,37,17,105,41,-24,65,-24,50,-24,51,-24,52,-24,54,-24,56,-24,55,-24,66,-24,63,-24,64,-24,67,-24,68,-24,69,-24,70,-24,42,-24,43,-24,44,-24,37,-24,40,-24,14,-24,18,-24,22,-24,16,-24,20,-24});
    states[35] = new State(new int[]{58,36});
    states[36] = new State(-86);
    states[37] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,38,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[38] = new State(new int[]{22,39});
    states[39] = new State(-85);
    states[40] = new State(-42);
    states[41] = new State(-33);
    states[42] = new State(-34);
    states[43] = new State(-35);
    states[44] = new State(-68);
    states[45] = new State(-69);
    states[46] = new State(-36);
    states[47] = new State(new int[]{22,204,58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-41,48,-16,205,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[48] = new State(new int[]{22,49,16,50});
    states[49] = new State(-70);
    states[50] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,51,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[51] = new State(-73);
    states[52] = new State(-37);
    states[53] = new State(new int[]{58,202,59,203},new int[]{-42,54,-43,56,-44,59});
    states[54] = new State(new int[]{20,55});
    states[55] = new State(-74);
    states[56] = new State(new int[]{16,57,20,-75});
    states[57] = new State(new int[]{58,202,59,203},new int[]{-42,58,-43,56,-44,59});
    states[58] = new State(-76);
    states[59] = new State(new int[]{23,60});
    states[60] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,61,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[61] = new State(-77);
    states[62] = new State(-38);
    states[63] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,64,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[64] = new State(new int[]{18,65});
    states[65] = new State(-39);
    states[66] = new State(new int[]{41,67,65,69,50,71,51,73,52,75,54,77,56,79,55,81,66,83,63,85,64,87,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-22,18,-22,22,-22,16,-22,20,-22});
    states[67] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,68,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[68] = new State(new int[]{41,-108,65,-108,50,-108,51,-108,52,-108,54,-108,56,-108,55,-108,66,-108,63,-108,64,-108,67,-108,68,-108,69,-108,70,-108,42,-108,43,99,44,101,37,103,40,197,14,-108,18,-108,22,-108,16,-108,20,-108});
    states[69] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,70,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[70] = new State(new int[]{41,67,65,-100,50,-100,51,-100,52,-100,54,77,56,79,55,81,66,-100,63,-100,64,-100,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-100,18,-100,22,-100,16,-100,20,-100});
    states[71] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,72,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[72] = new State(new int[]{41,67,65,69,50,-121,51,-121,52,-121,54,77,56,79,55,81,66,83,63,85,64,87,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-121,18,-121,22,-121,16,-121,20,-121});
    states[73] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,74,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[74] = new State(new int[]{41,67,65,69,50,71,51,-122,52,75,54,77,56,79,55,81,66,83,63,85,64,87,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-122,18,-122,22,-122,16,-122,20,-122});
    states[75] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,76,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[76] = new State(new int[]{41,67,65,69,50,71,51,-123,52,-123,54,77,56,79,55,81,66,83,63,85,64,87,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-123,18,-123,22,-123,16,-123,20,-123});
    states[77] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,78,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[78] = new State(new int[]{41,67,65,-124,50,-124,51,-124,52,-124,54,-124,56,-124,55,-124,66,-124,63,-124,64,-124,67,-124,68,-124,69,-124,70,-124,42,97,43,99,44,101,37,103,40,197,14,-124,18,-124,22,-124,16,-124,20,-124});
    states[79] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,80,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[80] = new State(new int[]{41,67,65,-125,50,-125,51,-125,52,-125,54,-125,56,-125,55,-125,66,-125,63,-125,64,-125,67,-125,68,-125,69,-125,70,-125,42,97,43,99,44,101,37,103,40,197,14,-125,18,-125,22,-125,16,-125,20,-125});
    states[81] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,82,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[82] = new State(new int[]{41,67,65,-126,50,-126,51,-126,52,-126,54,-126,56,-126,55,-126,66,-126,63,-126,64,-126,67,-126,68,-126,69,-126,70,-126,42,97,43,99,44,101,37,103,40,197,14,-126,18,-126,22,-126,16,-126,20,-126});
    states[83] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,84,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[84] = new State(new int[]{41,67,65,-101,50,-101,51,-101,52,-101,54,77,56,79,55,81,66,-101,63,-101,64,-101,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-101,18,-101,22,-101,16,-101,20,-101});
    states[85] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,86,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[86] = new State(new int[]{41,67,65,-102,50,-102,51,-102,52,-102,54,77,56,79,55,81,66,-102,63,-102,64,-102,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-102,18,-102,22,-102,16,-102,20,-102});
    states[87] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,88,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[88] = new State(new int[]{41,67,65,-103,50,-103,51,-103,52,-103,54,77,56,79,55,81,66,-103,63,-103,64,-103,67,89,68,91,69,93,70,95,42,97,43,99,44,101,37,103,40,197,14,-103,18,-103,22,-103,16,-103,20,-103});
    states[89] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,90,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[90] = new State(new int[]{41,67,65,-104,50,-104,51,-104,52,-104,54,77,56,79,55,81,66,-104,63,-104,64,-104,67,-104,68,-104,69,-104,70,-104,42,97,43,99,44,101,37,103,40,197,14,-104,18,-104,22,-104,16,-104,20,-104});
    states[91] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,92,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[92] = new State(new int[]{41,67,65,-105,50,-105,51,-105,52,-105,54,77,56,79,55,81,66,-105,63,-105,64,-105,67,-105,68,-105,69,-105,70,-105,42,97,43,99,44,101,37,103,40,197,14,-105,18,-105,22,-105,16,-105,20,-105});
    states[93] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,94,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[94] = new State(new int[]{41,67,65,-106,50,-106,51,-106,52,-106,54,77,56,79,55,81,66,-106,63,-106,64,-106,67,-106,68,-106,69,-106,70,-106,42,97,43,99,44,101,37,103,40,197,14,-106,18,-106,22,-106,16,-106,20,-106});
    states[95] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,96,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[96] = new State(new int[]{41,67,65,-107,50,-107,51,-107,52,-107,54,77,56,79,55,81,66,-107,63,-107,64,-107,67,-107,68,-107,69,-107,70,-107,42,97,43,99,44,101,37,103,40,197,14,-107,18,-107,22,-107,16,-107,20,-107});
    states[97] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,98,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[98] = new State(new int[]{41,-109,65,-109,50,-109,51,-109,52,-109,54,-109,56,-109,55,-109,66,-109,63,-109,64,-109,67,-109,68,-109,69,-109,70,-109,42,-109,43,99,44,101,37,103,40,197,14,-109,18,-109,22,-109,16,-109,20,-109});
    states[99] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,100,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[100] = new State(new int[]{41,-110,65,-110,50,-110,51,-110,52,-110,54,-110,56,-110,55,-110,66,-110,63,-110,64,-110,67,-110,68,-110,69,-110,70,-110,42,-110,43,-110,44,-110,37,-110,40,197,14,-110,18,-110,22,-110,16,-110,20,-110});
    states[101] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,102,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[102] = new State(new int[]{41,-111,65,-111,50,-111,51,-111,52,-111,54,-111,56,-111,55,-111,66,-111,63,-111,64,-111,67,-111,68,-111,69,-111,70,-111,42,-111,43,-111,44,-111,37,-111,40,197,14,-111,18,-111,22,-111,16,-111,20,-111});
    states[103] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63},new int[]{-22,104,-29,196,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40});
    states[104] = new State(new int[]{15,35,17,105,21,37,41,-112,65,-112,50,-112,51,-112,52,-112,54,-112,56,-112,55,-112,66,-112,63,-112,64,-112,67,-112,68,-112,69,-112,70,-112,42,-112,43,-112,44,-112,37,-112,40,-112,14,-112,18,-112,22,-112,16,-112,20,-112});
    states[105] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124,18,-84,16,-84},new int[]{-45,106,-16,120,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[106] = new State(new int[]{18,107,16,108});
    states[107] = new State(-80);
    states[108] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,109,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[109] = new State(-83);
    states[110] = new State(-23);
    states[111] = new State(-25);
    states[112] = new State(-26);
    states[113] = new State(-27);
    states[114] = new State(new int[]{4,124},new int[]{-27,115,-26,116,-17,123,-18,158,-28,159});
    states[115] = new State(-114);
    states[116] = new State(new int[]{17,117,41,-30,65,-30,50,-30,51,-30,52,-30,54,-30,56,-30,55,-30,66,-30,63,-30,64,-30,67,-30,68,-30,69,-30,70,-30,42,-30,43,-30,44,-30,37,-30,40,-30,14,-30,18,-30,22,-30,16,-30,20,-30});
    states[117] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124,18,-84,16,-84},new int[]{-45,118,-16,120,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[118] = new State(new int[]{18,119,16,108});
    states[119] = new State(-81);
    states[120] = new State(-82);
    states[121] = new State(new int[]{4,124},new int[]{-27,122,-26,116,-17,123,-18,158,-28,159});
    states[122] = new State(-115);
    states[123] = new State(-28);
    states[124] = new State(new int[]{17,125,58,191});
    states[125] = new State(new int[]{58,189,18,-56,16,-56},new int[]{-37,126});
    states[126] = new State(new int[]{18,127,16,187});
    states[127] = new State(new int[]{19,129},new int[]{-38,128});
    states[128] = new State(-48);
    states[129] = new State(new int[]{20,130,19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,4,181},new int[]{-3,131,-4,190,-5,5,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-6,180});
    states[130] = new State(-50);
    states[131] = new State(new int[]{20,132,19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,4,181},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-6,180});
    states[132] = new State(-51);
    states[133] = new State(-13);
    states[134] = new State(new int[]{17,135});
    states[135] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124,14,-61},new int[]{-39,136,-16,179,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[136] = new State(new int[]{14,137});
    states[137] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124,14,-61},new int[]{-39,138,-16,179,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[138] = new State(new int[]{14,139});
    states[139] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124,18,-61},new int[]{-39,140,-16,179,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[140] = new State(new int[]{18,141});
    states[141] = new State(new int[]{19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,14,178},new int[]{-36,142,-5,18,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113});
    states[142] = new State(-59);
    states[143] = new State(-14);
    states[144] = new State(new int[]{17,145});
    states[145] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,146,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[146] = new State(new int[]{18,147});
    states[147] = new State(new int[]{19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,14,178},new int[]{-36,148,-5,18,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113});
    states[148] = new State(new int[]{6,149,19,-62,7,-62,8,-62,9,-62,5,-62,10,-62,11,-62,58,-62,57,-62,59,-62,12,-62,13,-62,21,-62,17,-62,53,-62,41,-62,42,-62,38,-62,39,-62,4,-62,3,-62,20,-62});
    states[149] = new State(new int[]{19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163,14,178},new int[]{-36,150,-5,18,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113});
    states[150] = new State(-63);
    states[151] = new State(-15);
    states[152] = new State(new int[]{14,153,58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,154,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[153] = new State(-52);
    states[154] = new State(new int[]{14,155});
    states[155] = new State(-53);
    states[156] = new State(new int[]{4,124},new int[]{-27,157,-26,116,-17,123,-18,158,-28,159});
    states[157] = new State(-116);
    states[158] = new State(-29);
    states[159] = new State(-31);
    states[160] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63},new int[]{-29,161,-34,33,-22,162,-35,40,-30,43,-31,46,-32,52,-33,62});
    states[161] = new State(new int[]{41,-117,65,-117,50,-117,51,-117,52,-117,54,-117,56,-117,55,-117,66,-117,63,-117,64,-117,67,-117,68,-117,69,-117,70,-117,42,-117,43,-117,44,-117,37,-117,40,-117,14,-117,18,-117,22,-117,16,-117,20,-117,15,-32,21,-32,17,-32});
    states[162] = new State(new int[]{15,35,21,37,17,105});
    states[163] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63},new int[]{-29,164,-34,33,-22,162,-35,40,-30,43,-31,46,-32,52,-33,62});
    states[164] = new State(new int[]{41,-119,65,-119,50,-119,51,-119,52,-119,54,-119,56,-119,55,-119,66,-119,63,-119,64,-119,67,-119,68,-119,69,-119,70,-119,42,-119,43,-119,44,-119,37,-119,40,-119,14,-119,18,-119,22,-119,16,-119,20,-119,15,-32,21,-32,17,-32});
    states[165] = new State(-19);
    states[166] = new State(-20);
    states[167] = new State(new int[]{14,168,16,169});
    states[168] = new State(-16);
    states[169] = new State(new int[]{58,171},new int[]{-40,170});
    states[170] = new State(-65);
    states[171] = new State(new int[]{24,172,14,-66,16,-66});
    states[172] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,173,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[173] = new State(-67);
    states[174] = new State(new int[]{58,171},new int[]{-40,175});
    states[175] = new State(-64);
    states[176] = new State(new int[]{14,177});
    states[177] = new State(-17);
    states[178] = new State(-46);
    states[179] = new State(-60);
    states[180] = new State(-7);
    states[181] = new State(new int[]{58,182});
    states[182] = new State(new int[]{17,183});
    states[183] = new State(new int[]{58,189,18,-56,16,-56},new int[]{-37,184});
    states[184] = new State(new int[]{18,185,16,187});
    states[185] = new State(new int[]{19,129},new int[]{-38,186});
    states[186] = new State(-47);
    states[187] = new State(new int[]{58,188});
    states[188] = new State(-55);
    states[189] = new State(-54);
    states[190] = new State(-4);
    states[191] = new State(new int[]{17,192});
    states[192] = new State(new int[]{58,189,18,-56,16,-56},new int[]{-37,193});
    states[193] = new State(new int[]{18,194,16,187});
    states[194] = new State(new int[]{19,129},new int[]{-38,195});
    states[195] = new State(-49);
    states[196] = new State(-32);
    states[197] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-20,198,-21,110,-22,34,-29,199,-34,33,-30,43,-31,46,-32,52,-33,62,-35,40,-23,111,-24,112,-25,113});
    states[198] = new State(-113);
    states[199] = new State(new int[]{38,200,39,201,15,-32,21,-32,17,-32,41,-32,65,-32,50,-32,51,-32,52,-32,54,-32,56,-32,55,-32,66,-32,63,-32,64,-32,67,-32,68,-32,69,-32,70,-32,42,-32,43,-32,44,-32,37,-32,40,-32,14,-32,18,-32,22,-32,16,-32,20,-32});
    states[200] = new State(-118);
    states[201] = new State(-120);
    states[202] = new State(-78);
    states[203] = new State(-79);
    states[204] = new State(-71);
    states[205] = new State(-72);
    states[206] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,207,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[207] = new State(-88);
    states[208] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,209,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[209] = new State(-89);
    states[210] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,211,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[211] = new State(-90);
    states[212] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,213,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[213] = new State(-91);
    states[214] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,215,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[215] = new State(-92);
    states[216] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,217,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[217] = new State(-93);
    states[218] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,219,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[219] = new State(-94);
    states[220] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,221,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[221] = new State(-95);
    states[222] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,223,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[223] = new State(-96);
    states[224] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,225,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[225] = new State(-97);
    states[226] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,227,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[227] = new State(-98);
    states[228] = new State(new int[]{58,32,57,41,59,42,12,44,13,45,21,47,19,53,17,63,53,114,41,121,42,156,38,160,39,163,4,124},new int[]{-16,229,-15,27,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113,-17,165,-18,166});
    states[229] = new State(-99);
    states[230] = new State(new int[]{20,8,19,7,7,13,8,20,9,134,5,144,10,152,11,174,58,32,57,41,59,42,12,44,13,45,21,47,17,63,53,114,41,121,42,156,38,160,39,163},new int[]{-7,9,-5,231,-8,6,-9,12,-10,19,-11,133,-12,143,-13,151,-14,167,-15,176,-19,28,-29,29,-34,33,-22,34,-35,40,-30,43,-31,46,-32,52,-33,62,-20,66,-21,110,-23,111,-24,112,-25,113});
    states[231] = new State(-8);
    states[232] = new State(new int[]{24,-40,25,-40,26,-40,27,-40,28,-40,29,-40,30,-40,31,-40,32,-40,62,-40,34,-40,35,-40,36,-40,38,-40,39,-40,15,-40,21,-40,17,-40,41,-40,65,-40,50,-40,51,-40,52,-40,54,-40,56,-40,55,-40,66,-40,63,-40,64,-40,67,-40,68,-40,69,-40,70,-40,42,-40,43,-40,44,-40,37,-40,40,-40,14,-40,23,-78});
    states[233] = new State(new int[]{15,-34,21,-34,17,-34,41,-34,65,-34,50,-34,51,-34,52,-34,54,-34,56,-34,55,-34,66,-34,63,-34,64,-34,67,-34,68,-34,69,-34,70,-34,42,-34,43,-34,44,-34,37,-34,40,-34,14,-34,23,-79});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-7, new int[]{-5});
    rules[9] = new Rule(-7, new int[]{-7,-5});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-5, new int[]{-12});
    rules[15] = new Rule(-5, new int[]{-13});
    rules[16] = new Rule(-5, new int[]{-14,14});
    rules[17] = new Rule(-5, new int[]{-15,14});
    rules[18] = new Rule(-16, new int[]{-15});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-15, new int[]{-19});
    rules[22] = new Rule(-15, new int[]{-20});
    rules[23] = new Rule(-20, new int[]{-21});
    rules[24] = new Rule(-20, new int[]{-22});
    rules[25] = new Rule(-20, new int[]{-23});
    rules[26] = new Rule(-20, new int[]{-24});
    rules[27] = new Rule(-20, new int[]{-25});
    rules[28] = new Rule(-26, new int[]{-17});
    rules[29] = new Rule(-26, new int[]{-18});
    rules[30] = new Rule(-27, new int[]{-26});
    rules[31] = new Rule(-27, new int[]{-28});
    rules[32] = new Rule(-22, new int[]{-29});
    rules[33] = new Rule(-22, new int[]{57});
    rules[34] = new Rule(-22, new int[]{59});
    rules[35] = new Rule(-22, new int[]{-30});
    rules[36] = new Rule(-22, new int[]{-31});
    rules[37] = new Rule(-22, new int[]{-32});
    rules[38] = new Rule(-22, new int[]{-33});
    rules[39] = new Rule(-22, new int[]{17,-16,18});
    rules[40] = new Rule(-29, new int[]{58});
    rules[41] = new Rule(-29, new int[]{-34});
    rules[42] = new Rule(-29, new int[]{-35});
    rules[43] = new Rule(-8, new int[]{19,20});
    rules[44] = new Rule(-8, new int[]{19,-7,20});
    rules[45] = new Rule(-36, new int[]{-5});
    rules[46] = new Rule(-36, new int[]{14});
    rules[47] = new Rule(-6, new int[]{4,58,17,-37,18,-38});
    rules[48] = new Rule(-17, new int[]{4,17,-37,18,-38});
    rules[49] = new Rule(-18, new int[]{4,58,17,-37,18,-38});
    rules[50] = new Rule(-38, new int[]{19,20});
    rules[51] = new Rule(-38, new int[]{19,-3,20});
    rules[52] = new Rule(-13, new int[]{10,14});
    rules[53] = new Rule(-13, new int[]{10,-16,14});
    rules[54] = new Rule(-37, new int[]{58});
    rules[55] = new Rule(-37, new int[]{-37,16,58});
    rules[56] = new Rule(-37, new int[]{});
    rules[57] = new Rule(-9, new int[]{7,17,-16,18,-36});
    rules[58] = new Rule(-10, new int[]{8,-8,7,17,-16,18,14});
    rules[59] = new Rule(-11, new int[]{9,17,-39,14,-39,14,-39,18,-36});
    rules[60] = new Rule(-39, new int[]{-16});
    rules[61] = new Rule(-39, new int[]{});
    rules[62] = new Rule(-12, new int[]{5,17,-16,18,-36});
    rules[63] = new Rule(-12, new int[]{5,17,-16,18,-36,6,-36});
    rules[64] = new Rule(-14, new int[]{11,-40});
    rules[65] = new Rule(-14, new int[]{-14,16,-40});
    rules[66] = new Rule(-40, new int[]{58});
    rules[67] = new Rule(-40, new int[]{58,24,-16});
    rules[68] = new Rule(-30, new int[]{12});
    rules[69] = new Rule(-30, new int[]{13});
    rules[70] = new Rule(-31, new int[]{21,-41,22});
    rules[71] = new Rule(-31, new int[]{21,22});
    rules[72] = new Rule(-41, new int[]{-16});
    rules[73] = new Rule(-41, new int[]{-41,16,-16});
    rules[74] = new Rule(-32, new int[]{19,-42,20});
    rules[75] = new Rule(-42, new int[]{-43});
    rules[76] = new Rule(-42, new int[]{-43,16,-42});
    rules[77] = new Rule(-43, new int[]{-44,23,-16});
    rules[78] = new Rule(-44, new int[]{58});
    rules[79] = new Rule(-44, new int[]{59});
    rules[80] = new Rule(-33, new int[]{-22,17,-45,18});
    rules[81] = new Rule(-28, new int[]{-26,17,-45,18});
    rules[82] = new Rule(-45, new int[]{-16});
    rules[83] = new Rule(-45, new int[]{-45,16,-16});
    rules[84] = new Rule(-45, new int[]{});
    rules[85] = new Rule(-35, new int[]{-22,21,-16,22});
    rules[86] = new Rule(-34, new int[]{-22,15,58});
    rules[87] = new Rule(-19, new int[]{-29,24,-16});
    rules[88] = new Rule(-19, new int[]{-29,25,-16});
    rules[89] = new Rule(-19, new int[]{-29,26,-16});
    rules[90] = new Rule(-19, new int[]{-29,27,-16});
    rules[91] = new Rule(-19, new int[]{-29,28,-16});
    rules[92] = new Rule(-19, new int[]{-29,29,-16});
    rules[93] = new Rule(-19, new int[]{-29,30,-16});
    rules[94] = new Rule(-19, new int[]{-29,31,-16});
    rules[95] = new Rule(-19, new int[]{-29,32,-16});
    rules[96] = new Rule(-19, new int[]{-29,62,-16});
    rules[97] = new Rule(-19, new int[]{-29,34,-16});
    rules[98] = new Rule(-19, new int[]{-29,35,-16});
    rules[99] = new Rule(-19, new int[]{-29,36,-16});
    rules[100] = new Rule(-23, new int[]{-20,65,-20});
    rules[101] = new Rule(-23, new int[]{-20,66,-20});
    rules[102] = new Rule(-23, new int[]{-20,63,-20});
    rules[103] = new Rule(-23, new int[]{-20,64,-20});
    rules[104] = new Rule(-23, new int[]{-20,67,-20});
    rules[105] = new Rule(-23, new int[]{-20,68,-20});
    rules[106] = new Rule(-23, new int[]{-20,69,-20});
    rules[107] = new Rule(-23, new int[]{-20,70,-20});
    rules[108] = new Rule(-21, new int[]{-20,41,-20});
    rules[109] = new Rule(-21, new int[]{-20,42,-20});
    rules[110] = new Rule(-21, new int[]{-20,43,-20});
    rules[111] = new Rule(-21, new int[]{-20,44,-20});
    rules[112] = new Rule(-21, new int[]{-20,37,-22});
    rules[113] = new Rule(-21, new int[]{-20,40,-20});
    rules[114] = new Rule(-25, new int[]{53,-27});
    rules[115] = new Rule(-25, new int[]{41,-27});
    rules[116] = new Rule(-25, new int[]{42,-27});
    rules[117] = new Rule(-25, new int[]{38,-29});
    rules[118] = new Rule(-25, new int[]{-29,38});
    rules[119] = new Rule(-25, new int[]{39,-29});
    rules[120] = new Rule(-25, new int[]{-29,39});
    rules[121] = new Rule(-24, new int[]{-20,50,-20});
    rules[122] = new Rule(-24, new int[]{-20,51,-20});
    rules[123] = new Rule(-24, new int[]{-20,52,-20});
    rules[124] = new Rule(-24, new int[]{-20,54,-20});
    rules[125] = new Rule(-24, new int[]{-20,56,-20});
    rules[126] = new Rule(-24, new int[]{-20,55,-20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements_and_declarations
{ CheckIfReturnInMain(); Result = (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.n = Result; }
        break;
      case 3: // main -> /* empty */
{ Result = new StatementsAndDeclarations(); CurrentSemanticValue.n = Result; }
        break;
      case 4: // statements_and_declarations -> statement_or_declaration
{ var nodes = new StatementsAndDeclarations(); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 5: // statements_and_declarations -> statements_and_declarations, 
              //                                statement_or_declaration
{ var nodes = ((StatementsAndDeclarations)ValueStack[ValueStack.Depth-2].n); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n);  CurrentSemanticValue.n = nodes;}
        break;
      case 8: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 9: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // statement -> while
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // statement -> dowhile
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 13: // statement -> for
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 14: // statement -> if
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 15: // statement -> return
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 16: // statement -> variable_declaration, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 17: // statement -> statement_expression, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
      case 18: // expression -> statement_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 19: // expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 20: // expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 21: // statement_expression -> assignment
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 22: // statement_expression -> binary_valid_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 23: // binary_valid_expression -> arithmetic
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // binary_valid_expression -> indexer_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 25: // binary_valid_expression -> comparison
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 26: // binary_valid_expression -> bitwise
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 27: // binary_valid_expression -> unary
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 33: // indexer_expression -> NUMBER
{ CurrentSemanticValue.n = new NumberNode(ValueStack[ValueStack.Depth-1].num); }
        break;
      case 34: // indexer_expression -> STRING
{ CurrentSemanticValue.n = new StringNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 35: // indexer_expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 36: // indexer_expression -> array
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 37: // indexer_expression -> object
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 38: // indexer_expression -> function_invocation
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 39: // indexer_expression -> LPARENTH, expression, RPARENTH
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 40: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.n = new IdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 41: // lvalue -> property_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 42: // lvalue -> indexer_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 43: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 44: // block -> LCURLYBRACE, statements, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 45: // statement_or_semicolon -> statement
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 46: // statement_or_semicolon -> SEMICOLON
{ CurrentSemanticValue.n = new EmptyExpression(); }
        break;
      case 47: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionDeclarationNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 48: // function_expression -> FUNCTION, LPARENTH, arguments_list, RPARENTH, 
               //                        function_body
{ CurrentSemanticValue.n = new FunctionExpressionNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 49: // function_named_expression -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                              RPARENTH, function_body
{CurrentSemanticValue.n = new FunctionNamedExpressionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 50: // function_body -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new StatementsAndDeclarations(); }
        break;
      case 51: // function_body -> LCURLYBRACE, statements_and_declarations, RCURLYBRACE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 52: // return -> RETURN, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 53: // return -> RETURN, expression, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 54: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 55: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 56: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
      case 57: // while -> WHILE, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new WhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 58: // dowhile -> DO, block, WHILE, LPARENTH, expression, RPARENTH, SEMICOLON
{ CurrentSemanticValue.n = new DoWhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-6].n); }
        break;
      case 59: // for -> FOR, LPARENTH, expression_or_empty, SEMICOLON, expression_or_empty, 
               //        SEMICOLON, expression_or_empty, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new ForNode((StatementNode)ValueStack[ValueStack.Depth-7].n, (StatementNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 60: // expression_or_empty -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 62: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 63: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon, ELSE, 
               //       statement_or_semicolon
{ CurrentSemanticValue.n = new IfElseNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 64: // variable_declaration -> VAR, variable_declaration_identifier
{ CurrentSemanticValue.n = new VariableDeclarationNode((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 65: // variable_declaration -> variable_declaration, COMMA, 
               //                         variable_declaration_identifier
{ var nodes = ((VariableDeclarationNode)ValueStack[ValueStack.Depth-3].n); nodes.Declarations.Add((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 66: // variable_declaration_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 67: // variable_declaration_identifier -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 68: // boolean -> TRUE
{ CurrentSemanticValue.n = new BooleanNode(true); }
        break;
      case 69: // boolean -> FALSE
{ CurrentSemanticValue.n = new BooleanNode(false); }
        break;
      case 70: // array -> LBRACKET, array_list, RBRACKET
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 71: // array -> LBRACKET, RBRACKET
{ CurrentSemanticValue.n = new ArrayNode(); }
        break;
      case 72: // array_list -> expression
{ var arr = new ArrayNode(); arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 73: // array_list -> array_list, COMMA, expression
{ var arr = (ArrayNode)ValueStack[ValueStack.Depth-3].n; arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 74: // object -> LCURLYBRACE, object_properties_list, RCURLYBRACE
{ CurrentSemanticValue.n = new ObjectNode((List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-2].add); }
        break;
      case 75: // object_properties_list -> object_property
{ var l = new List<ObjectPropertyNode>(); l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.add = l; }
        break;
      case 76: // object_properties_list -> object_property, COMMA, object_properties_list
{ var l = (List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-1].add; l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-3].n); CurrentSemanticValue.add = l; }
        break;
      case 77: // object_property -> object_property_identifier, COLON, expression
{ CurrentSemanticValue.n = new ObjectPropertyNode((ObjectPropertyIdentifierNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 78: // object_property_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 79: // object_property_identifier -> STRING
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new StringNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 80: // function_invocation -> indexer_expression, LPARENTH, 
               //                        function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 81: // function_invocation_func -> invocation_expression, LPARENTH, 
               //                             function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 82: // function_invocation_arguments_list -> expression
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 83: // function_invocation_arguments_list -> function_invocation_arguments_list, COMMA, 
               //                                       expression
{ var al = (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-3].n; CurrentSemanticValue.n = al; al.Arguments.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 84: // function_invocation_arguments_list -> /* empty */
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode(); }
        break;
      case 85: // indexer_getter -> indexer_expression, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.n = new IndexerGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 86: // property_getter -> indexer_expression, DOT, IDENTIFIER
{ CurrentSemanticValue.n = new PropertyGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 87: // assignment -> lvalue, ASSIGN, expression
{ CurrentSemanticValue.n = new AssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 88: // assignment -> lvalue, ADDASSG, expression
{ CurrentSemanticValue.n = new AdditionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 89: // assignment -> lvalue, SUBASSG, expression
{ CurrentSemanticValue.n = new SubstractionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 90: // assignment -> lvalue, MULTASSG, expression
{ CurrentSemanticValue.n = new MultiplicationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 91: // assignment -> lvalue, DIVASSG, expression
{ CurrentSemanticValue.n = new DivisonAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 92: // assignment -> lvalue, REMASSG, expression
{ CurrentSemanticValue.n = new RemainderAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 93: // assignment -> lvalue, EXPASSG, expression
{ CurrentSemanticValue.n = new ExponentiationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 94: // assignment -> lvalue, LEFTSHFTASG, expression
{ CurrentSemanticValue.n = new LeftShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 95: // assignment -> lvalue, RIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new RightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 96: // assignment -> lvalue, URIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new UnsignedRightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 97: // assignment -> lvalue, BITWISEANDASSG, expression
{ CurrentSemanticValue.n = new BitwiseAndAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 98: // assignment -> lvalue, BITWISEXORASSG, expression
{ CurrentSemanticValue.n = new BitwiseXorAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 99: // assignment -> lvalue, BITWISEORASSG, expression
{ CurrentSemanticValue.n = new BitwiseOrAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 100: // comparison -> binary_valid_expression, EQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new EqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 101: // comparison -> binary_valid_expression, NOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new NotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 102: // comparison -> binary_valid_expression, STRICTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 103: // comparison -> binary_valid_expression, STRICTNOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictNotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 104: // comparison -> binary_valid_expression, GREATERTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 105: // comparison -> binary_valid_expression, GREATERTHANOREQUAL, 
                //               binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 106: // comparison -> binary_valid_expression, LESSTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 107: // comparison -> binary_valid_expression, LESSTHANOREQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 108: // arithmetic -> binary_valid_expression, ADDITION, binary_valid_expression
{ CurrentSemanticValue.n = new AdditionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 109: // arithmetic -> binary_valid_expression, SUBTRACTION, binary_valid_expression
{ CurrentSemanticValue.n = new SubtractionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 110: // arithmetic -> binary_valid_expression, MULTIPLICATION, binary_valid_expression
{ CurrentSemanticValue.n = new MultiplicationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 111: // arithmetic -> binary_valid_expression, DIVISION, binary_valid_expression
{ CurrentSemanticValue.n = new DivisionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 112: // arithmetic -> binary_valid_expression, REMAINDER, indexer_expression
{ CurrentSemanticValue.n = new RemainderNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 113: // arithmetic -> binary_valid_expression, EXPONENTIATION, binary_valid_expression
{ CurrentSemanticValue.n = new ExponentiationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 114: // unary -> BITWISENOT, unary_expression
{ CurrentSemanticValue.n = new BitwiseNotNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 115: // unary -> ADDITION, unary_expression
{ CurrentSemanticValue.n = new UnaryPlusNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 116: // unary -> SUBTRACTION, unary_expression
{ CurrentSemanticValue.n = new UnaryNegationNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 117: // unary -> INCREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 118: // unary -> lvalue, INCREMENT
{ CurrentSemanticValue.n = new PostfixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 119: // unary -> DECREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 120: // unary -> lvalue, DECREMENT
{ CurrentSemanticValue.n = new PostfixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 121: // bitwise -> binary_valid_expression, BITWISEAND, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseAndNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 122: // bitwise -> binary_valid_expression, BITWISEOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseOrNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 123: // bitwise -> binary_valid_expression, BITWISEXOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseXorNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 124: // bitwise -> binary_valid_expression, LEFTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new LeftShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 125: // bitwise -> binary_valid_expression, SIGNPROPRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new SignPropagatingRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 126: // bitwise -> binary_valid_expression, ZEROFILLRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new ZeroFillRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
