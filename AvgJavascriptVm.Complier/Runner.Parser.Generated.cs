// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 8/17/2017 6:19:02 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 8/17/2017 6:19:00 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,WHILE=6,
    DO=7,FOR=8,SEMICOLON=9,COMMA=10,LPARENTH=11,RPARENTH=12,
    LCURLYBRACE=13,RCURLYBRACE=14,NUMBER=15,IDENTIFIER=16};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[15];
  private static State[] states = new State[20];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements", "statement", "block", "function_declaration", 
      "arguments_list", "function_body", };

  static RunnerParser() {
    states[0] = new State(new int[]{13,6,4,9,3,-3},new int[]{-1,1,-3,3,-4,19,-5,5,-6,8});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{13,6,4,9,3,-2},new int[]{-4,4,-5,5,-6,8});
    states[4] = new State(-6);
    states[5] = new State(-7);
    states[6] = new State(new int[]{14,7});
    states[7] = new State(-11);
    states[8] = new State(-8);
    states[9] = new State(new int[]{16,10});
    states[10] = new State(new int[]{11,11});
    states[11] = new State(new int[]{16,18,12,-14,10,-14},new int[]{-7,12});
    states[12] = new State(new int[]{12,13,10,16});
    states[13] = new State(new int[]{13,6},new int[]{-8,14,-5,15});
    states[14] = new State(-9);
    states[15] = new State(-10);
    states[16] = new State(new int[]{16,17});
    states[17] = new State(-13);
    states[18] = new State(-12);
    states[19] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-3, new int[]{-3,-4});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-4, new int[]{-6});
    rules[9] = new Rule(-6, new int[]{4,16,11,-7,12,-8});
    rules[10] = new Rule(-8, new int[]{-5});
    rules[11] = new Rule(-5, new int[]{13,14});
    rules[12] = new Rule(-7, new int[]{16});
    rules[13] = new Rule(-7, new int[]{-7,10,16});
    rules[14] = new Rule(-7, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements
{ Result = (StatementsNode)ValueStack[ValueStack.Depth-1].n; }
        break;
      case 5: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 6: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 7: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 8: // statement -> function_declaration
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 9: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
              //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (BlockNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // function_body -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode(new StatementsNode()); }
        break;
      case 12: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 13: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 14: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
