// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 2/15/2018 4:57:28 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 2/15/2018 4:57:28 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,ELSE=6,
    WHILE=7,DO=8,FOR=9,RETURN=10,VAR=11,TRUE=12,
    FALSE=13,SEMICOLON=14,DOT=15,COMMA=16,LPARENTH=17,RPARENTH=18,
    LCURLYBRACE=19,RCURLYBRACE=20,LBRACKET=21,RBRACKET=22,COLON=23,ASSIGN=24,
    ADDASSG=25,SUBASSG=26,MULTASSG=27,DIVASSG=28,REMASSG=29,EXPASSG=30,
    LEFTSHFTASG=31,RIGHTSHFTASSG=32,URIGHTSHIFTASSG=33,BITWISEANDASSG=34,BITWISEXORASSG=35,BITWISEORASSG=36,
    REMAINDER=37,INCREMENT=38,DECREMENT=39,EXPONENTIATION=40,ADDITION=41,SUBTRACTION=42,
    MULTIPLICATION=43,DIVISION=44,UNARYPLUS=45,UNARYMINUS=46,POSTFIX=47,PREFIX=48,
    NUMBER=49,IDENTIFIER=50,STRING=51,THEN=52,LEFTSHFTASSG=53,URIGHTSHFTASSG=54,
    STRICTEQUAL=55,STRICTNOTEQUAL=56,EQUAL=57,NOTEQUAL=58,GREATERTHAN=59,GREATERTHANOREQUAL=60,
    LESSTHAN=61,LESSTHANOREQUAL=62};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
			public object add;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[113];
  private static State[] states = new State[211];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements_and_declarations", "statement_or_declaration", 
      "statement", "function_declaration", "statements", "block", "while", "dowhile", 
      "for", "if", "return", "variable_declaration", "statement_expression", 
      "expression", "function_expression", "function_named_expression", "assignment", 
      "binary_valid_expression", "arithmetic", "indexer_expression", "lvalue", 
      "boolean", "array", "object", "function_invocation", "comparison", "property_getter", 
      "indexer_getter", "statement_or_semicolon", "arguments_list", "function_body", 
      "expression_or_empty", "variable_declaration_identifier", "array_list", 
      "object_properties_list", "object_property", "object_property_identifier", 
      "function_invocation_arguments_list", };

  static RunnerParser() {
    states[0] = new State(new int[]{19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,4,158,3,-3},new int[]{-1,1,-3,3,-4,167,-5,5,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-6,157});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,4,158,3,-2},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-6,157});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-10);
    states[7] = new State(new int[]{20,8,19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,209,49,41,51,210,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108},new int[]{-7,9,-37,54,-5,208,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-38,56,-39,59});
    states[8] = new State(-37);
    states[9] = new State(new int[]{20,10,19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108},new int[]{-5,11,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83});
    states[10] = new State(-38);
    states[11] = new State(-9);
    states[12] = new State(-11);
    states[13] = new State(new int[]{17,14});
    states[14] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,15,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[15] = new State(new int[]{18,16});
    states[16] = new State(new int[]{19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,14,155},new int[]{-31,17,-5,18,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83});
    states[17] = new State(-51);
    states[18] = new State(-39);
    states[19] = new State(-12);
    states[20] = new State(new int[]{19,207},new int[]{-8,21});
    states[21] = new State(new int[]{7,22});
    states[22] = new State(new int[]{17,23});
    states[23] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,24,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(new int[]{14,26});
    states[26] = new State(-52);
    states[27] = new State(-18);
    states[28] = new State(-21);
    states[29] = new State(new int[]{24,30,25,183,26,185,27,187,28,189,29,191,30,193,31,195,32,197,54,199,34,201,35,203,36,205,38,177,39,178,15,-25,21,-25,17,-25,57,-25,58,-25,55,-25,56,-25,59,-25,60,-25,61,-25,62,-25,41,-25,42,-25,43,-25,44,-25,37,-25,40,-25,14,-25,18,-25,22,-25,16,-25,20,-25});
    states[30] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,31,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[31] = new State(-80);
    states[32] = new State(-34);
    states[33] = new State(-35);
    states[34] = new State(new int[]{15,35,21,37,17,78,57,86,58,88,55,90,56,92,59,94,60,96,61,98,62,100,41,-24,42,-24,43,-24,44,-24,37,-24,40,-24,14,-24,18,-24,22,-24,16,-24,20,-24});
    states[35] = new State(new int[]{50,36});
    states[36] = new State(-79);
    states[37] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,38,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[38] = new State(new int[]{22,39});
    states[39] = new State(-78);
    states[40] = new State(-36);
    states[41] = new State(-26);
    states[42] = new State(-27);
    states[43] = new State(-28);
    states[44] = new State(-62);
    states[45] = new State(-63);
    states[46] = new State(-29);
    states[47] = new State(new int[]{22,181,50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-36,48,-16,182,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[48] = new State(new int[]{22,49,16,50});
    states[49] = new State(-64);
    states[50] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,51,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[51] = new State(-67);
    states[52] = new State(-30);
    states[53] = new State(new int[]{50,179,51,180},new int[]{-37,54,-38,56,-39,59});
    states[54] = new State(new int[]{20,55});
    states[55] = new State(-68);
    states[56] = new State(new int[]{16,57,20,-69});
    states[57] = new State(new int[]{50,179,51,180},new int[]{-37,58,-38,56,-39,59});
    states[58] = new State(-70);
    states[59] = new State(new int[]{23,60});
    states[60] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,61,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[61] = new State(-71);
    states[62] = new State(-31);
    states[63] = new State(-32);
    states[64] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,65,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[65] = new State(new int[]{18,66});
    states[66] = new State(-33);
    states[67] = new State(new int[]{41,68,42,70,43,72,44,74,37,76,40,174,14,-22,18,-22,22,-22,16,-22,20,-22});
    states[68] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108},new int[]{-20,69,-21,83,-22,34,-23,176,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[69] = new State(new int[]{41,-101,42,-101,43,72,44,74,37,76,40,174,14,-101,18,-101,22,-101,16,-101,20,-101});
    states[70] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108},new int[]{-20,71,-21,83,-22,34,-23,176,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[71] = new State(new int[]{41,-102,42,-102,43,72,44,74,37,76,40,174,14,-102,18,-102,22,-102,16,-102,20,-102});
    states[72] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108},new int[]{-20,73,-21,83,-22,34,-23,176,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[73] = new State(new int[]{41,-103,42,-103,43,-103,44,-103,37,-103,40,174,14,-103,18,-103,22,-103,16,-103,20,-103});
    states[74] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108},new int[]{-20,75,-21,83,-22,34,-23,176,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[75] = new State(new int[]{41,-104,42,-104,43,-104,44,-104,37,-104,40,174,14,-104,18,-104,22,-104,16,-104,20,-104});
    states[76] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,77,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[77] = new State(new int[]{15,35,17,78,57,86,58,88,55,90,56,92,59,94,60,96,61,98,62,100,21,37,41,-105,42,-105,43,-105,44,-105,37,-105,40,-105,14,-105,18,-105,22,-105,16,-105,20,-105});
    states[78] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111,18,-77,16,-77},new int[]{-40,79,-16,173,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[79] = new State(new int[]{18,80,16,81});
    states[80] = new State(-74);
    states[81] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,82,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[82] = new State(-76);
    states[83] = new State(-23);
    states[84] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,85,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[85] = new State(new int[]{15,35,17,78,57,86,58,88,55,90,56,92,59,94,60,96,61,98,62,100,21,37,41,-107,42,-107,43,-107,44,-107,37,-107,40,-107,14,-107,18,-107,22,-107,16,-107,20,-107});
    states[86] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,87,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[87] = new State(new int[]{15,35,17,78,57,-93,58,-93,55,-93,56,-93,59,94,60,96,61,98,62,100,21,37,41,-93,42,-93,43,-93,44,-93,37,-93,40,-93,14,-93,18,-93,22,-93,16,-93,20,-93});
    states[88] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,89,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[89] = new State(new int[]{15,35,17,78,57,-94,58,-94,55,-94,56,-94,59,94,60,96,61,98,62,100,21,37,41,-94,42,-94,43,-94,44,-94,37,-94,40,-94,14,-94,18,-94,22,-94,16,-94,20,-94});
    states[90] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,91,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[91] = new State(new int[]{15,35,17,78,57,-95,58,-95,55,-95,56,-95,59,94,60,96,61,98,62,100,21,37,41,-95,42,-95,43,-95,44,-95,37,-95,40,-95,14,-95,18,-95,22,-95,16,-95,20,-95});
    states[92] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,93,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[93] = new State(new int[]{15,35,17,78,57,-96,58,-96,55,-96,56,-96,59,94,60,96,61,98,62,100,21,37,41,-96,42,-96,43,-96,44,-96,37,-96,40,-96,14,-96,18,-96,22,-96,16,-96,20,-96});
    states[94] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,95,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[95] = new State(new int[]{15,35,17,78,57,-97,58,-97,55,-97,56,-97,59,-97,60,-97,61,-97,62,-97,21,37,41,-97,42,-97,43,-97,44,-97,37,-97,40,-97,14,-97,18,-97,22,-97,16,-97,20,-97});
    states[96] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,97,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[97] = new State(new int[]{15,35,17,78,57,-98,58,-98,55,-98,56,-98,59,-98,60,-98,61,-98,62,-98,21,37,41,-98,42,-98,43,-98,44,-98,37,-98,40,-98,14,-98,18,-98,22,-98,16,-98,20,-98});
    states[98] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,99,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[99] = new State(new int[]{15,35,17,78,57,-99,58,-99,55,-99,56,-99,59,-99,60,-99,61,-99,62,-99,21,37,41,-99,42,-99,43,-99,44,-99,37,-99,40,-99,14,-99,18,-99,22,-99,16,-99,20,-99});
    states[100] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,101,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[101] = new State(new int[]{15,35,17,78,57,-100,58,-100,55,-100,56,-100,59,-100,60,-100,61,-100,62,-100,21,37,41,-100,42,-100,43,-100,44,-100,37,-100,40,-100,14,-100,18,-100,22,-100,16,-100,20,-100});
    states[102] = new State(-25);
    states[103] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-22,104,-23,102,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[104] = new State(new int[]{15,35,17,78,57,86,58,88,55,90,56,92,59,94,60,96,61,98,62,100,21,37,41,-108,42,-108,43,-108,44,-108,37,-108,40,-108,14,-108,18,-108,22,-108,16,-108,20,-108});
    states[105] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-23,106,-29,33,-22,107,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63});
    states[106] = new State(new int[]{41,-109,42,-109,43,-109,44,-109,37,-109,40,-109,14,-109,18,-109,22,-109,16,-109,20,-109,15,-25,21,-25,17,-25,57,-25,58,-25,55,-25,56,-25,59,-25,60,-25,61,-25,62,-25});
    states[107] = new State(new int[]{15,35,21,37,17,78,57,86,58,88,55,90,56,92,59,94,60,96,61,98,62,100});
    states[108] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64},new int[]{-23,109,-29,33,-22,107,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63});
    states[109] = new State(new int[]{41,-111,42,-111,43,-111,44,-111,37,-111,40,-111,14,-111,18,-111,22,-111,16,-111,20,-111,15,-25,21,-25,17,-25,57,-25,58,-25,55,-25,56,-25,59,-25,60,-25,61,-25,62,-25});
    states[110] = new State(-19);
    states[111] = new State(new int[]{17,112,50,168});
    states[112] = new State(new int[]{50,166,18,-50,16,-50},new int[]{-32,113});
    states[113] = new State(new int[]{18,114,16,164});
    states[114] = new State(new int[]{19,116},new int[]{-33,115});
    states[115] = new State(-42);
    states[116] = new State(new int[]{20,117,19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,4,158},new int[]{-3,118,-4,167,-5,5,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-6,157});
    states[117] = new State(-44);
    states[118] = new State(new int[]{20,119,19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,4,158},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-6,157});
    states[119] = new State(-45);
    states[120] = new State(-13);
    states[121] = new State(new int[]{17,122});
    states[122] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111,14,-55},new int[]{-34,123,-16,156,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[123] = new State(new int[]{14,124});
    states[124] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111,14,-55},new int[]{-34,125,-16,156,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[125] = new State(new int[]{14,126});
    states[126] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111,18,-55},new int[]{-34,127,-16,156,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[127] = new State(new int[]{18,128});
    states[128] = new State(new int[]{19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,14,155},new int[]{-31,129,-5,18,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83});
    states[129] = new State(-53);
    states[130] = new State(-14);
    states[131] = new State(new int[]{17,132});
    states[132] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,133,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[133] = new State(new int[]{18,134});
    states[134] = new State(new int[]{19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,14,155},new int[]{-31,135,-5,18,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83});
    states[135] = new State(new int[]{6,136,19,-56,7,-56,8,-56,9,-56,5,-56,10,-56,11,-56,50,-56,49,-56,51,-56,12,-56,13,-56,21,-56,17,-56,41,-56,42,-56,38,-56,39,-56,4,-56,3,-56,20,-56});
    states[136] = new State(new int[]{19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108,14,155},new int[]{-31,137,-5,18,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83});
    states[137] = new State(-57);
    states[138] = new State(-15);
    states[139] = new State(new int[]{14,140,50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,141,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[140] = new State(-46);
    states[141] = new State(new int[]{14,142});
    states[142] = new State(-47);
    states[143] = new State(-20);
    states[144] = new State(new int[]{14,145,16,146});
    states[145] = new State(-16);
    states[146] = new State(new int[]{50,148},new int[]{-35,147});
    states[147] = new State(-59);
    states[148] = new State(new int[]{24,149,14,-60,16,-60});
    states[149] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,150,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[150] = new State(-61);
    states[151] = new State(new int[]{50,148},new int[]{-35,152});
    states[152] = new State(-58);
    states[153] = new State(new int[]{14,154});
    states[154] = new State(-17);
    states[155] = new State(-40);
    states[156] = new State(-54);
    states[157] = new State(-7);
    states[158] = new State(new int[]{50,159});
    states[159] = new State(new int[]{17,160});
    states[160] = new State(new int[]{50,166,18,-50,16,-50},new int[]{-32,161});
    states[161] = new State(new int[]{18,162,16,164});
    states[162] = new State(new int[]{19,116},new int[]{-33,163});
    states[163] = new State(-41);
    states[164] = new State(new int[]{50,165});
    states[165] = new State(-49);
    states[166] = new State(-48);
    states[167] = new State(-4);
    states[168] = new State(new int[]{17,169});
    states[169] = new State(new int[]{50,166,18,-50,16,-50},new int[]{-32,170});
    states[170] = new State(new int[]{18,171,16,164});
    states[171] = new State(new int[]{19,116},new int[]{-33,172});
    states[172] = new State(-43);
    states[173] = new State(-75);
    states[174] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108},new int[]{-20,175,-21,83,-22,34,-23,176,-29,33,-24,43,-25,46,-26,52,-27,62,-28,63,-30,40});
    states[175] = new State(-106);
    states[176] = new State(new int[]{38,177,39,178,15,-25,21,-25,17,-25,57,-25,58,-25,55,-25,56,-25,59,-25,60,-25,61,-25,62,-25,41,-25,42,-25,43,-25,44,-25,37,-25,40,-25,14,-25,18,-25,22,-25,16,-25,20,-25});
    states[177] = new State(-110);
    states[178] = new State(-112);
    states[179] = new State(-72);
    states[180] = new State(-73);
    states[181] = new State(-65);
    states[182] = new State(-66);
    states[183] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,184,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[184] = new State(-81);
    states[185] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,186,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[186] = new State(-82);
    states[187] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,188,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[188] = new State(-83);
    states[189] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,190,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[190] = new State(-84);
    states[191] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,192,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[192] = new State(-85);
    states[193] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,194,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[194] = new State(-86);
    states[195] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,196,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[196] = new State(-87);
    states[197] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,198,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[198] = new State(-88);
    states[199] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,200,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[200] = new State(-89);
    states[201] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,202,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[202] = new State(-90);
    states[203] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,204,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[204] = new State(-91);
    states[205] = new State(new int[]{50,32,49,41,51,42,12,44,13,45,21,47,19,53,17,64,41,84,42,103,38,105,39,108,4,111},new int[]{-16,206,-15,27,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83,-17,110,-18,143});
    states[206] = new State(-92);
    states[207] = new State(new int[]{20,8,19,7,7,13,8,20,9,121,5,131,10,139,11,151,50,32,49,41,51,42,12,44,13,45,21,47,17,64,41,84,42,103,38,105,39,108},new int[]{-7,9,-5,208,-8,6,-9,12,-10,19,-11,120,-12,130,-13,138,-14,144,-15,153,-19,28,-23,29,-29,33,-22,34,-30,40,-24,43,-25,46,-26,52,-27,62,-28,63,-20,67,-21,83});
    states[208] = new State(-8);
    states[209] = new State(new int[]{24,-34,25,-34,26,-34,27,-34,28,-34,29,-34,30,-34,31,-34,32,-34,54,-34,34,-34,35,-34,36,-34,38,-34,39,-34,15,-34,21,-34,17,-34,57,-34,58,-34,55,-34,56,-34,59,-34,60,-34,61,-34,62,-34,41,-34,42,-34,43,-34,44,-34,37,-34,40,-34,14,-34,23,-72});
    states[210] = new State(new int[]{15,-27,21,-27,17,-27,57,-27,58,-27,55,-27,56,-27,59,-27,60,-27,61,-27,62,-27,41,-27,42,-27,43,-27,44,-27,37,-27,40,-27,14,-27,23,-73});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-7, new int[]{-5});
    rules[9] = new Rule(-7, new int[]{-7,-5});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-5, new int[]{-12});
    rules[15] = new Rule(-5, new int[]{-13});
    rules[16] = new Rule(-5, new int[]{-14,14});
    rules[17] = new Rule(-5, new int[]{-15,14});
    rules[18] = new Rule(-16, new int[]{-15});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-15, new int[]{-19});
    rules[22] = new Rule(-15, new int[]{-20});
    rules[23] = new Rule(-20, new int[]{-21});
    rules[24] = new Rule(-20, new int[]{-22});
    rules[25] = new Rule(-22, new int[]{-23});
    rules[26] = new Rule(-22, new int[]{49});
    rules[27] = new Rule(-22, new int[]{51});
    rules[28] = new Rule(-22, new int[]{-24});
    rules[29] = new Rule(-22, new int[]{-25});
    rules[30] = new Rule(-22, new int[]{-26});
    rules[31] = new Rule(-22, new int[]{-27});
    rules[32] = new Rule(-22, new int[]{-28});
    rules[33] = new Rule(-22, new int[]{17,-16,18});
    rules[34] = new Rule(-23, new int[]{50});
    rules[35] = new Rule(-23, new int[]{-29});
    rules[36] = new Rule(-23, new int[]{-30});
    rules[37] = new Rule(-8, new int[]{19,20});
    rules[38] = new Rule(-8, new int[]{19,-7,20});
    rules[39] = new Rule(-31, new int[]{-5});
    rules[40] = new Rule(-31, new int[]{14});
    rules[41] = new Rule(-6, new int[]{4,50,17,-32,18,-33});
    rules[42] = new Rule(-17, new int[]{4,17,-32,18,-33});
    rules[43] = new Rule(-18, new int[]{4,50,17,-32,18,-33});
    rules[44] = new Rule(-33, new int[]{19,20});
    rules[45] = new Rule(-33, new int[]{19,-3,20});
    rules[46] = new Rule(-13, new int[]{10,14});
    rules[47] = new Rule(-13, new int[]{10,-16,14});
    rules[48] = new Rule(-32, new int[]{50});
    rules[49] = new Rule(-32, new int[]{-32,16,50});
    rules[50] = new Rule(-32, new int[]{});
    rules[51] = new Rule(-9, new int[]{7,17,-16,18,-31});
    rules[52] = new Rule(-10, new int[]{8,-8,7,17,-16,18,14});
    rules[53] = new Rule(-11, new int[]{9,17,-34,14,-34,14,-34,18,-31});
    rules[54] = new Rule(-34, new int[]{-16});
    rules[55] = new Rule(-34, new int[]{});
    rules[56] = new Rule(-12, new int[]{5,17,-16,18,-31});
    rules[57] = new Rule(-12, new int[]{5,17,-16,18,-31,6,-31});
    rules[58] = new Rule(-14, new int[]{11,-35});
    rules[59] = new Rule(-14, new int[]{-14,16,-35});
    rules[60] = new Rule(-35, new int[]{50});
    rules[61] = new Rule(-35, new int[]{50,24,-16});
    rules[62] = new Rule(-24, new int[]{12});
    rules[63] = new Rule(-24, new int[]{13});
    rules[64] = new Rule(-25, new int[]{21,-36,22});
    rules[65] = new Rule(-25, new int[]{21,22});
    rules[66] = new Rule(-36, new int[]{-16});
    rules[67] = new Rule(-36, new int[]{-36,16,-16});
    rules[68] = new Rule(-26, new int[]{19,-37,20});
    rules[69] = new Rule(-37, new int[]{-38});
    rules[70] = new Rule(-37, new int[]{-38,16,-37});
    rules[71] = new Rule(-38, new int[]{-39,23,-16});
    rules[72] = new Rule(-39, new int[]{50});
    rules[73] = new Rule(-39, new int[]{51});
    rules[74] = new Rule(-27, new int[]{-22,17,-40,18});
    rules[75] = new Rule(-40, new int[]{-16});
    rules[76] = new Rule(-40, new int[]{-40,16,-16});
    rules[77] = new Rule(-40, new int[]{});
    rules[78] = new Rule(-30, new int[]{-22,21,-16,22});
    rules[79] = new Rule(-29, new int[]{-22,15,50});
    rules[80] = new Rule(-19, new int[]{-23,24,-16});
    rules[81] = new Rule(-19, new int[]{-23,25,-16});
    rules[82] = new Rule(-19, new int[]{-23,26,-16});
    rules[83] = new Rule(-19, new int[]{-23,27,-16});
    rules[84] = new Rule(-19, new int[]{-23,28,-16});
    rules[85] = new Rule(-19, new int[]{-23,29,-16});
    rules[86] = new Rule(-19, new int[]{-23,30,-16});
    rules[87] = new Rule(-19, new int[]{-23,31,-16});
    rules[88] = new Rule(-19, new int[]{-23,32,-16});
    rules[89] = new Rule(-19, new int[]{-23,54,-16});
    rules[90] = new Rule(-19, new int[]{-23,34,-16});
    rules[91] = new Rule(-19, new int[]{-23,35,-16});
    rules[92] = new Rule(-19, new int[]{-23,36,-16});
    rules[93] = new Rule(-28, new int[]{-22,57,-22});
    rules[94] = new Rule(-28, new int[]{-22,58,-22});
    rules[95] = new Rule(-28, new int[]{-22,55,-22});
    rules[96] = new Rule(-28, new int[]{-22,56,-22});
    rules[97] = new Rule(-28, new int[]{-22,59,-22});
    rules[98] = new Rule(-28, new int[]{-22,60,-22});
    rules[99] = new Rule(-28, new int[]{-22,61,-22});
    rules[100] = new Rule(-28, new int[]{-22,62,-22});
    rules[101] = new Rule(-21, new int[]{-20,41,-20});
    rules[102] = new Rule(-21, new int[]{-20,42,-20});
    rules[103] = new Rule(-21, new int[]{-20,43,-20});
    rules[104] = new Rule(-21, new int[]{-20,44,-20});
    rules[105] = new Rule(-21, new int[]{-20,37,-22});
    rules[106] = new Rule(-21, new int[]{-20,40,-20});
    rules[107] = new Rule(-21, new int[]{41,-22});
    rules[108] = new Rule(-21, new int[]{42,-22});
    rules[109] = new Rule(-21, new int[]{38,-23});
    rules[110] = new Rule(-21, new int[]{-23,38});
    rules[111] = new Rule(-21, new int[]{39,-23});
    rules[112] = new Rule(-21, new int[]{-23,39});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements_and_declarations
{ CheckIfReturnInMain(); Result = (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.n = Result; }
        break;
      case 3: // main -> /* empty */
{ Result = new StatementsAndDeclarations(); CurrentSemanticValue.n = Result; }
        break;
      case 4: // statements_and_declarations -> statement_or_declaration
{ var nodes = new StatementsAndDeclarations(); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 5: // statements_and_declarations -> statements_and_declarations, 
              //                                statement_or_declaration
{ var nodes = ((StatementsAndDeclarations)ValueStack[ValueStack.Depth-2].n); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n);  CurrentSemanticValue.n = nodes;}
        break;
      case 8: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 9: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // statement -> while
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // statement -> dowhile
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 13: // statement -> for
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 14: // statement -> if
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 15: // statement -> return
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 16: // statement -> variable_declaration, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 17: // statement -> statement_expression, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
      case 18: // expression -> statement_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 19: // expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 20: // expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 21: // statement_expression -> assignment
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 22: // statement_expression -> binary_valid_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 23: // binary_valid_expression -> arithmetic
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // binary_valid_expression -> indexer_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 26: // indexer_expression -> NUMBER
{ CurrentSemanticValue.n = new NumberNode(ValueStack[ValueStack.Depth-1].num); }
        break;
      case 27: // indexer_expression -> STRING
{ CurrentSemanticValue.n = new StringNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 28: // indexer_expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 29: // indexer_expression -> array
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 30: // indexer_expression -> object
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 31: // indexer_expression -> function_invocation
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 32: // indexer_expression -> comparison
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 33: // indexer_expression -> LPARENTH, expression, RPARENTH
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 34: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.n = new IdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 35: // lvalue -> property_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 36: // lvalue -> indexer_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 37: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 38: // block -> LCURLYBRACE, statements, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 39: // statement_or_semicolon -> statement
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 40: // statement_or_semicolon -> SEMICOLON
{ CurrentSemanticValue.n = new EmptyExpression(); }
        break;
      case 41: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionDeclarationNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 42: // function_expression -> FUNCTION, LPARENTH, arguments_list, RPARENTH, 
               //                        function_body
{ CurrentSemanticValue.n = new FunctionExpressionNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 43: // function_named_expression -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                              RPARENTH, function_body
{CurrentSemanticValue.n = new FunctionNamedExpressionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 44: // function_body -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new StatementsAndDeclarations(); }
        break;
      case 45: // function_body -> LCURLYBRACE, statements_and_declarations, RCURLYBRACE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 46: // return -> RETURN, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 47: // return -> RETURN, expression, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 48: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 49: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 50: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
      case 51: // while -> WHILE, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new WhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 52: // dowhile -> DO, block, WHILE, LPARENTH, expression, RPARENTH, SEMICOLON
{ CurrentSemanticValue.n = new DoWhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-6].n); }
        break;
      case 53: // for -> FOR, LPARENTH, expression_or_empty, SEMICOLON, expression_or_empty, 
               //        SEMICOLON, expression_or_empty, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new ForNode((StatementNode)ValueStack[ValueStack.Depth-7].n, (StatementNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 54: // expression_or_empty -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 56: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 57: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon, ELSE, 
               //       statement_or_semicolon
{ CurrentSemanticValue.n = new IfElseNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 58: // variable_declaration -> VAR, variable_declaration_identifier
{ CurrentSemanticValue.n = new VariableDeclarationNode((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 59: // variable_declaration -> variable_declaration, COMMA, 
               //                         variable_declaration_identifier
{ var nodes = ((VariableDeclarationNode)ValueStack[ValueStack.Depth-3].n); nodes.Declarations.Add((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 60: // variable_declaration_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 61: // variable_declaration_identifier -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 62: // boolean -> TRUE
{ CurrentSemanticValue.n = new BooleanNode(true); }
        break;
      case 63: // boolean -> FALSE
{ CurrentSemanticValue.n = new BooleanNode(false); }
        break;
      case 64: // array -> LBRACKET, array_list, RBRACKET
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 65: // array -> LBRACKET, RBRACKET
{ CurrentSemanticValue.n = new ArrayNode(); }
        break;
      case 66: // array_list -> expression
{ var arr = new ArrayNode(); arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 67: // array_list -> array_list, COMMA, expression
{ var arr = (ArrayNode)ValueStack[ValueStack.Depth-3].n; arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 68: // object -> LCURLYBRACE, object_properties_list, RCURLYBRACE
{ CurrentSemanticValue.n = new ObjectNode((List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-2].add); }
        break;
      case 69: // object_properties_list -> object_property
{ var l = new List<ObjectPropertyNode>(); l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.add = l; }
        break;
      case 70: // object_properties_list -> object_property, COMMA, object_properties_list
{ var l = (List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-1].add; l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-3].n); CurrentSemanticValue.add = l; }
        break;
      case 71: // object_property -> object_property_identifier, COLON, expression
{ CurrentSemanticValue.n = new ObjectPropertyNode((ObjectPropertyIdentifierNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 72: // object_property_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 73: // object_property_identifier -> STRING
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new StringNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 74: // function_invocation -> indexer_expression, LPARENTH, 
               //                        function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 75: // function_invocation_arguments_list -> expression
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 76: // function_invocation_arguments_list -> function_invocation_arguments_list, COMMA, 
               //                                       expression
{ var al = (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-3].n; CurrentSemanticValue.n = al; al.Arguments.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 77: // function_invocation_arguments_list -> /* empty */
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode(); }
        break;
      case 78: // indexer_getter -> indexer_expression, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.n = new IndexerGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 79: // property_getter -> indexer_expression, DOT, IDENTIFIER
{ CurrentSemanticValue.n = new PropertyGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 80: // assignment -> lvalue, ASSIGN, expression
{ CurrentSemanticValue.n = new AssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 81: // assignment -> lvalue, ADDASSG, expression
{ CurrentSemanticValue.n = new AdditionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 82: // assignment -> lvalue, SUBASSG, expression
{ CurrentSemanticValue.n = new SubstractionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 83: // assignment -> lvalue, MULTASSG, expression
{ CurrentSemanticValue.n = new MultiplicationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 84: // assignment -> lvalue, DIVASSG, expression
{ CurrentSemanticValue.n = new DivisonAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 85: // assignment -> lvalue, REMASSG, expression
{ CurrentSemanticValue.n = new RemainderAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 86: // assignment -> lvalue, EXPASSG, expression
{ CurrentSemanticValue.n = new ExponentiationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 87: // assignment -> lvalue, LEFTSHFTASG, expression
{ CurrentSemanticValue.n = new LeftShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 88: // assignment -> lvalue, RIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new RightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 89: // assignment -> lvalue, URIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new UnsignedRightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 90: // assignment -> lvalue, BITWISEANDASSG, expression
{ CurrentSemanticValue.n = new BitwiseAndAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 91: // assignment -> lvalue, BITWISEXORASSG, expression
{ CurrentSemanticValue.n = new BitwiseXorAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 92: // assignment -> lvalue, BITWISEORASSG, expression
{ CurrentSemanticValue.n = new BitwiseOrAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 93: // comparison -> indexer_expression, EQUAL, indexer_expression
{ CurrentSemanticValue.n = new EqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 94: // comparison -> indexer_expression, NOTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new NotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 95: // comparison -> indexer_expression, STRICTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new StrictEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 96: // comparison -> indexer_expression, STRICTNOTEQUAL, indexer_expression
{ CurrentSemanticValue.n = new StrictNotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 97: // comparison -> indexer_expression, GREATERTHAN, indexer_expression
{ CurrentSemanticValue.n = new GreaterThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 98: // comparison -> indexer_expression, GREATERTHANOREQUAL, indexer_expression
{ CurrentSemanticValue.n = new GreaterThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 99: // comparison -> indexer_expression, LESSTHAN, indexer_expression
{ CurrentSemanticValue.n = new LessThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 100: // comparison -> indexer_expression, LESSTHANOREQUAL, indexer_expression
{ CurrentSemanticValue.n = new LessThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 101: // arithmetic -> binary_valid_expression, ADDITION, binary_valid_expression
{ CurrentSemanticValue.n = new AdditionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 102: // arithmetic -> binary_valid_expression, SUBTRACTION, binary_valid_expression
{ CurrentSemanticValue.n = new SubtractionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 103: // arithmetic -> binary_valid_expression, MULTIPLICATION, binary_valid_expression
{ CurrentSemanticValue.n = new MultiplicationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 104: // arithmetic -> binary_valid_expression, DIVISION, binary_valid_expression
{ CurrentSemanticValue.n = new DivisionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 105: // arithmetic -> binary_valid_expression, REMAINDER, indexer_expression
{ CurrentSemanticValue.n = new RemainderNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 106: // arithmetic -> binary_valid_expression, EXPONENTIATION, binary_valid_expression
{ CurrentSemanticValue.n = new ExponentiationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 107: // arithmetic -> ADDITION, indexer_expression
{ CurrentSemanticValue.n = new UnaryPlusNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 108: // arithmetic -> SUBTRACTION, indexer_expression
{ CurrentSemanticValue.n = new UnaryNegationNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 109: // arithmetic -> INCREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 110: // arithmetic -> lvalue, INCREMENT
{ CurrentSemanticValue.n = new PostfixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 111: // arithmetic -> DECREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 112: // arithmetic -> lvalue, DECREMENT
{ CurrentSemanticValue.n = new PostfixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
