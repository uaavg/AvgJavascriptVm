// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  TX-P-0038
// DateTime: 2/16/2018 5:58:27 PM
// UserName: artem.glynskyi
// Input file <Runner.Language.grammar.y - 2/16/2018 5:58:00 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using AvgJavascriptVm.Core.BaseTypes;
using AvgJavascriptVm.Grammar.Nodes;

namespace AvgJavascriptVm.Complier
{
internal enum Token {error=2,EOF=3,FUNCTION=4,IF=5,ELSE=6,
    WHILE=7,DO=8,FOR=9,RETURN=10,VAR=11,TRUE=12,
    FALSE=13,SEMICOLON=14,DOT=15,COMMA=16,LPARENTH=17,RPARENTH=18,
    LCURLYBRACE=19,RCURLYBRACE=20,LBRACKET=21,RBRACKET=22,COLON=23,ASSIGN=24,
    ADDASSG=25,SUBASSG=26,MULTASSG=27,DIVASSG=28,REMASSG=29,EXPASSG=30,
    LEFTSHFTASG=31,RIGHTSHFTASSG=32,URIGHTSHIFTASSG=33,BITWISEANDASSG=34,BITWISEXORASSG=35,BITWISEORASSG=36,
    REMAINDER=37,INCREMENT=38,DECREMENT=39,EXPONENTIATION=40,ADDITION=41,SUBTRACTION=42,
    MULTIPLICATION=43,DIVISION=44,UNARYPLUS=45,UNARYMINUS=46,POSTFIX=47,PREFIX=48,
    PROERTYGETTER=49,BITWISEAND=50,BITWISEOR=51,BITWISEXOR=52,BITWISENOT=53,LEFTSHIFT=54,
    ZEROFILLRIGHTSHIFT=55,SIGNPROPRIGHTSHIFT=56,LOGICALAND=57,LOGICALOR=58,LOGICALNOT=59,NUMBER=60,
    IDENTIFIER=61,STRING=62,THEN=63,LEFTSHFTASSG=64,URIGHTSHFTASSG=65,STRICTEQUAL=66,
    STRICTNOTEQUAL=67,EQUAL=68,NOTEQUAL=69,GREATERTHAN=70,GREATERTHANOREQUAL=71,LESSTHAN=72,
    LESSTHANOREQUAL=73,LPARENT=74};

internal partial struct ValueType
{ 			
			public double num;
            public string str;
			public Node n;
			public object add;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class RunnerParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[132];
  private static State[] states = new State[242];
  private static string[] nonTerms = new string[] {
      "main", "$accept", "statements_and_declarations", "statement_or_declaration", 
      "statement", "function_declaration", "statements", "block", "while", "dowhile", 
      "for", "if", "return", "variable_declaration", "statement_expression", 
      "expression", "function_expression", "function_named_expression", "assignment", 
      "binary_valid_expression", "arithmetic", "indexer_expression", "comparison", 
      "bitwise", "unary", "logical", "invocation_expression", "unary_expression", 
      "function_invocation_func", "lvalue", "boolean", "array", "object", "function_invocation", 
      "property_getter", "indexer_getter", "statement_or_semicolon", "arguments_list", 
      "function_body", "expression_or_empty", "variable_declaration_identifier", 
      "array_list", "object_properties_list", "object_property", "object_property_identifier", 
      "function_invocation_arguments_list", };

  static RunnerParser() {
    states[0] = new State(new int[]{19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,190,3,-3},new int[]{-1,1,-3,3,-4,199,-5,5,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-6,189});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,190,3,-2},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-6,189});
    states[4] = new State(-5);
    states[5] = new State(-6);
    states[6] = new State(-10);
    states[7] = new State(new int[]{20,8,19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,240,60,41,62,241,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-7,9,-43,54,-5,239,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-44,56,-45,59});
    states[8] = new State(-45);
    states[9] = new State(new int[]{20,10,19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-5,11,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173});
    states[10] = new State(-46);
    states[11] = new State(-9);
    states[12] = new State(-11);
    states[13] = new State(new int[]{17,14});
    states[14] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,15,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[15] = new State(new int[]{18,16});
    states[16] = new State(new int[]{19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,14,187},new int[]{-37,17,-5,18,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173});
    states[17] = new State(-59);
    states[18] = new State(-47);
    states[19] = new State(-12);
    states[20] = new State(new int[]{19,238},new int[]{-8,21});
    states[21] = new State(new int[]{7,22});
    states[22] = new State(new int[]{17,23});
    states[23] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,24,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[24] = new State(new int[]{18,25});
    states[25] = new State(new int[]{14,26});
    states[26] = new State(-60);
    states[27] = new State(-18);
    states[28] = new State(-21);
    states[29] = new State(new int[]{24,30,25,214,26,216,27,218,28,220,29,222,30,224,31,226,32,228,65,230,34,232,35,234,36,236,38,208,39,209,15,-34,21,-34,17,-34,41,-34,68,-34,50,-34,57,-34,58,-34,51,-34,52,-34,54,-34,56,-34,55,-34,69,-34,66,-34,67,-34,70,-34,71,-34,72,-34,73,-34,42,-34,43,-34,44,-34,37,-34,40,-34,14,-34,18,-34,22,-34,16,-34,20,-34});
    states[30] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,31,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[31] = new State(-89);
    states[32] = new State(-42);
    states[33] = new State(-43);
    states[34] = new State(new int[]{15,35,21,37,17,109,41,-24,68,-24,50,-24,57,-24,58,-24,51,-24,52,-24,54,-24,56,-24,55,-24,69,-24,66,-24,67,-24,70,-24,71,-24,72,-24,73,-24,42,-24,43,-24,44,-24,37,-24,40,-24,14,-24,18,-24,22,-24,16,-24,20,-24});
    states[35] = new State(new int[]{61,36});
    states[36] = new State(-88);
    states[37] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,38,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[38] = new State(new int[]{22,39});
    states[39] = new State(-87);
    states[40] = new State(-44);
    states[41] = new State(-35);
    states[42] = new State(-36);
    states[43] = new State(-37);
    states[44] = new State(-70);
    states[45] = new State(-71);
    states[46] = new State(-38);
    states[47] = new State(new int[]{22,212,61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-42,48,-16,213,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[48] = new State(new int[]{22,49,16,50});
    states[49] = new State(-72);
    states[50] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,51,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[51] = new State(-75);
    states[52] = new State(-39);
    states[53] = new State(new int[]{61,210,62,211},new int[]{-43,54,-44,56,-45,59});
    states[54] = new State(new int[]{20,55});
    states[55] = new State(-76);
    states[56] = new State(new int[]{16,57,20,-77});
    states[57] = new State(new int[]{61,210,62,211},new int[]{-43,58,-44,56,-45,59});
    states[58] = new State(-78);
    states[59] = new State(new int[]{23,60});
    states[60] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,61,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[61] = new State(-79);
    states[62] = new State(-40);
    states[63] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,64,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[64] = new State(new int[]{18,65});
    states[65] = new State(-41);
    states[66] = new State(new int[]{41,67,68,69,50,71,57,73,58,75,51,77,52,79,54,81,56,83,55,85,69,87,66,89,67,91,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-22,18,-22,22,-22,16,-22,20,-22});
    states[67] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,68,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[68] = new State(new int[]{41,-110,68,-110,50,-110,57,-110,58,-110,51,-110,52,-110,54,-110,56,-110,55,-110,69,-110,66,-110,67,-110,70,-110,71,-110,72,-110,73,-110,42,-110,43,103,44,105,37,107,40,205,14,-110,18,-110,22,-110,16,-110,20,-110});
    states[69] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,70,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[70] = new State(new int[]{41,67,68,-102,50,-102,57,-102,58,-102,51,-102,52,-102,54,81,56,83,55,85,69,-102,66,-102,67,-102,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-102,18,-102,22,-102,16,-102,20,-102});
    states[71] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,72,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[72] = new State(new int[]{41,67,68,69,50,-124,57,-124,58,-124,51,-124,52,-124,54,81,56,83,55,85,69,87,66,89,67,91,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-124,18,-124,22,-124,16,-124,20,-124});
    states[73] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,74,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[74] = new State(new int[]{41,67,68,69,50,71,57,-130,58,75,51,77,52,79,54,81,56,83,55,85,69,87,66,89,67,91,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-130,18,-130,22,-130,16,-130,20,-130});
    states[75] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,76,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[76] = new State(new int[]{41,67,68,69,50,71,57,-131,58,-131,51,77,52,79,54,81,56,83,55,85,69,87,66,89,67,91,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-131,18,-131,22,-131,16,-131,20,-131});
    states[77] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,78,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[78] = new State(new int[]{41,67,68,69,50,71,57,-125,58,-125,51,-125,52,79,54,81,56,83,55,85,69,87,66,89,67,91,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-125,18,-125,22,-125,16,-125,20,-125});
    states[79] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,80,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[80] = new State(new int[]{41,67,68,69,50,71,57,-126,58,-126,51,-126,52,-126,54,81,56,83,55,85,69,87,66,89,67,91,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-126,18,-126,22,-126,16,-126,20,-126});
    states[81] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,82,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[82] = new State(new int[]{41,67,68,-127,50,-127,57,-127,58,-127,51,-127,52,-127,54,-127,56,-127,55,-127,69,-127,66,-127,67,-127,70,-127,71,-127,72,-127,73,-127,42,101,43,103,44,105,37,107,40,205,14,-127,18,-127,22,-127,16,-127,20,-127});
    states[83] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,84,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[84] = new State(new int[]{41,67,68,-128,50,-128,57,-128,58,-128,51,-128,52,-128,54,-128,56,-128,55,-128,69,-128,66,-128,67,-128,70,-128,71,-128,72,-128,73,-128,42,101,43,103,44,105,37,107,40,205,14,-128,18,-128,22,-128,16,-128,20,-128});
    states[85] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,86,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[86] = new State(new int[]{41,67,68,-129,50,-129,57,-129,58,-129,51,-129,52,-129,54,-129,56,-129,55,-129,69,-129,66,-129,67,-129,70,-129,71,-129,72,-129,73,-129,42,101,43,103,44,105,37,107,40,205,14,-129,18,-129,22,-129,16,-129,20,-129});
    states[87] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,88,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[88] = new State(new int[]{41,67,68,-103,50,-103,57,-103,58,-103,51,-103,52,-103,54,81,56,83,55,85,69,-103,66,-103,67,-103,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-103,18,-103,22,-103,16,-103,20,-103});
    states[89] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,90,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[90] = new State(new int[]{41,67,68,-104,50,-104,57,-104,58,-104,51,-104,52,-104,54,81,56,83,55,85,69,-104,66,-104,67,-104,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-104,18,-104,22,-104,16,-104,20,-104});
    states[91] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,92,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[92] = new State(new int[]{41,67,68,-105,50,-105,57,-105,58,-105,51,-105,52,-105,54,81,56,83,55,85,69,-105,66,-105,67,-105,70,93,71,95,72,97,73,99,42,101,43,103,44,105,37,107,40,205,14,-105,18,-105,22,-105,16,-105,20,-105});
    states[93] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,94,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[94] = new State(new int[]{41,67,68,-106,50,-106,57,-106,58,-106,51,-106,52,-106,54,81,56,83,55,85,69,-106,66,-106,67,-106,70,-106,71,-106,72,-106,73,-106,42,101,43,103,44,105,37,107,40,205,14,-106,18,-106,22,-106,16,-106,20,-106});
    states[95] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,96,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[96] = new State(new int[]{41,67,68,-107,50,-107,57,-107,58,-107,51,-107,52,-107,54,81,56,83,55,85,69,-107,66,-107,67,-107,70,-107,71,-107,72,-107,73,-107,42,101,43,103,44,105,37,107,40,205,14,-107,18,-107,22,-107,16,-107,20,-107});
    states[97] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,98,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[98] = new State(new int[]{41,67,68,-108,50,-108,57,-108,58,-108,51,-108,52,-108,54,81,56,83,55,85,69,-108,66,-108,67,-108,70,-108,71,-108,72,-108,73,-108,42,101,43,103,44,105,37,107,40,205,14,-108,18,-108,22,-108,16,-108,20,-108});
    states[99] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,100,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[100] = new State(new int[]{41,67,68,-109,50,-109,57,-109,58,-109,51,-109,52,-109,54,81,56,83,55,85,69,-109,66,-109,67,-109,70,-109,71,-109,72,-109,73,-109,42,101,43,103,44,105,37,107,40,205,14,-109,18,-109,22,-109,16,-109,20,-109});
    states[101] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,102,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[102] = new State(new int[]{41,-111,68,-111,50,-111,57,-111,58,-111,51,-111,52,-111,54,-111,56,-111,55,-111,69,-111,66,-111,67,-111,70,-111,71,-111,72,-111,73,-111,42,-111,43,103,44,105,37,107,40,205,14,-111,18,-111,22,-111,16,-111,20,-111});
    states[103] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,104,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[104] = new State(new int[]{41,-112,68,-112,50,-112,57,-112,58,-112,51,-112,52,-112,54,-112,56,-112,55,-112,69,-112,66,-112,67,-112,70,-112,71,-112,72,-112,73,-112,42,-112,43,-112,44,-112,37,-112,40,205,14,-112,18,-112,22,-112,16,-112,20,-112});
    states[105] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,106,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[106] = new State(new int[]{41,-113,68,-113,50,-113,57,-113,58,-113,51,-113,52,-113,54,-113,56,-113,55,-113,69,-113,66,-113,67,-113,70,-113,71,-113,72,-113,73,-113,42,-113,43,-113,44,-113,37,-113,40,205,14,-113,18,-113,22,-113,16,-113,20,-113});
    states[107] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63},new int[]{-22,108,-30,121,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40});
    states[108] = new State(new int[]{15,35,17,109,21,37,41,-114,68,-114,50,-114,57,-114,58,-114,51,-114,52,-114,54,-114,56,-114,55,-114,69,-114,66,-114,67,-114,70,-114,71,-114,72,-114,73,-114,42,-114,43,-114,44,-114,37,-114,40,-114,14,-114,18,-114,22,-114,16,-114,20,-114});
    states[109] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130,18,-86,16,-86},new int[]{-46,110,-16,126,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[110] = new State(new int[]{18,111,16,112});
    states[111] = new State(-82);
    states[112] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,113,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[113] = new State(-85);
    states[114] = new State(-23);
    states[115] = new State(-25);
    states[116] = new State(-26);
    states[117] = new State(-27);
    states[118] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,4,130},new int[]{-28,119,-22,120,-30,121,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-27,122,-17,129,-18,164,-29,165});
    states[119] = new State(-116);
    states[120] = new State(new int[]{15,35,17,109,21,37,41,-31,68,-31,50,-31,57,-31,58,-31,51,-31,52,-31,54,-31,56,-31,55,-31,69,-31,66,-31,67,-31,70,-31,71,-31,72,-31,73,-31,42,-31,43,-31,44,-31,37,-31,40,-31,14,-31,18,-31,22,-31,16,-31,20,-31});
    states[121] = new State(-34);
    states[122] = new State(new int[]{17,123,41,-32,68,-32,50,-32,57,-32,58,-32,51,-32,52,-32,54,-32,56,-32,55,-32,69,-32,66,-32,67,-32,70,-32,71,-32,72,-32,73,-32,42,-32,43,-32,44,-32,37,-32,40,-32,14,-32,18,-32,22,-32,16,-32,20,-32});
    states[123] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130,18,-86,16,-86},new int[]{-46,124,-16,126,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[124] = new State(new int[]{18,125,16,112});
    states[125] = new State(-83);
    states[126] = new State(-84);
    states[127] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,4,130},new int[]{-28,128,-22,120,-30,121,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-27,122,-17,129,-18,164,-29,165});
    states[128] = new State(-117);
    states[129] = new State(-29);
    states[130] = new State(new int[]{17,131,61,200});
    states[131] = new State(new int[]{61,198,18,-58,16,-58},new int[]{-38,132});
    states[132] = new State(new int[]{18,133,16,196});
    states[133] = new State(new int[]{19,135},new int[]{-39,134});
    states[134] = new State(-50);
    states[135] = new State(new int[]{20,136,19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,190},new int[]{-3,137,-4,199,-5,5,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-6,189});
    states[136] = new State(-52);
    states[137] = new State(new int[]{20,138,19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,190},new int[]{-4,4,-5,5,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-6,189});
    states[138] = new State(-53);
    states[139] = new State(-13);
    states[140] = new State(new int[]{17,141});
    states[141] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130,14,-63},new int[]{-40,142,-16,188,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[142] = new State(new int[]{14,143});
    states[143] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130,14,-63},new int[]{-40,144,-16,188,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[144] = new State(new int[]{14,145});
    states[145] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130,18,-63},new int[]{-40,146,-16,188,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[146] = new State(new int[]{18,147});
    states[147] = new State(new int[]{19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,14,187},new int[]{-37,148,-5,18,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173});
    states[148] = new State(-61);
    states[149] = new State(-14);
    states[150] = new State(new int[]{17,151});
    states[151] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,152,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[152] = new State(new int[]{18,153});
    states[153] = new State(new int[]{19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,14,187},new int[]{-37,154,-5,18,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173});
    states[154] = new State(new int[]{6,155,19,-64,7,-64,8,-64,9,-64,5,-64,10,-64,11,-64,61,-64,60,-64,62,-64,12,-64,13,-64,21,-64,17,-64,53,-64,41,-64,42,-64,38,-64,39,-64,59,-64,4,-64,3,-64,20,-64});
    states[155] = new State(new int[]{19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171,14,187},new int[]{-37,156,-5,18,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173});
    states[156] = new State(-65);
    states[157] = new State(-15);
    states[158] = new State(new int[]{14,159,61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,160,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[159] = new State(-54);
    states[160] = new State(new int[]{14,161});
    states[161] = new State(-55);
    states[162] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,4,130},new int[]{-28,163,-22,120,-30,121,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-27,122,-17,129,-18,164,-29,165});
    states[163] = new State(-118);
    states[164] = new State(-30);
    states[165] = new State(-33);
    states[166] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63},new int[]{-30,167,-35,33,-22,168,-36,40,-31,43,-32,46,-33,52,-34,62});
    states[167] = new State(new int[]{41,-119,68,-119,50,-119,57,-119,58,-119,51,-119,52,-119,54,-119,56,-119,55,-119,69,-119,66,-119,67,-119,70,-119,71,-119,72,-119,73,-119,42,-119,43,-119,44,-119,37,-119,40,-119,14,-119,18,-119,22,-119,16,-119,20,-119,15,-34,21,-34,17,-34});
    states[168] = new State(new int[]{15,35,21,37,17,109});
    states[169] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63},new int[]{-30,170,-35,33,-22,168,-36,40,-31,43,-32,46,-33,52,-34,62});
    states[170] = new State(new int[]{41,-121,68,-121,50,-121,57,-121,58,-121,51,-121,52,-121,54,-121,56,-121,55,-121,69,-121,66,-121,67,-121,70,-121,71,-121,72,-121,73,-121,42,-121,43,-121,44,-121,37,-121,40,-121,14,-121,18,-121,22,-121,16,-121,20,-121,15,-34,21,-34,17,-34});
    states[171] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,4,130},new int[]{-28,172,-22,120,-30,121,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-27,122,-17,129,-18,164,-29,165});
    states[172] = new State(-123);
    states[173] = new State(-28);
    states[174] = new State(-19);
    states[175] = new State(-20);
    states[176] = new State(new int[]{14,177,16,178});
    states[177] = new State(-16);
    states[178] = new State(new int[]{61,180},new int[]{-41,179});
    states[179] = new State(-67);
    states[180] = new State(new int[]{24,181,14,-68,16,-68});
    states[181] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,182,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[182] = new State(-69);
    states[183] = new State(new int[]{61,180},new int[]{-41,184});
    states[184] = new State(-66);
    states[185] = new State(new int[]{14,186});
    states[186] = new State(-17);
    states[187] = new State(-48);
    states[188] = new State(-62);
    states[189] = new State(-7);
    states[190] = new State(new int[]{61,191});
    states[191] = new State(new int[]{17,192});
    states[192] = new State(new int[]{61,198,18,-58,16,-58},new int[]{-38,193});
    states[193] = new State(new int[]{18,194,16,196});
    states[194] = new State(new int[]{19,135},new int[]{-39,195});
    states[195] = new State(-49);
    states[196] = new State(new int[]{61,197});
    states[197] = new State(-57);
    states[198] = new State(-56);
    states[199] = new State(-4);
    states[200] = new State(new int[]{17,201});
    states[201] = new State(new int[]{61,198,18,-58,16,-58},new int[]{-38,202});
    states[202] = new State(new int[]{18,203,16,196});
    states[203] = new State(new int[]{19,135},new int[]{-39,204});
    states[204] = new State(-51);
    states[205] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-20,206,-21,114,-22,34,-30,207,-35,33,-31,43,-32,46,-33,52,-34,62,-36,40,-23,115,-24,116,-25,117,-26,173});
    states[206] = new State(-115);
    states[207] = new State(new int[]{38,208,39,209,15,-34,21,-34,17,-34,41,-34,68,-34,50,-34,57,-34,58,-34,51,-34,52,-34,54,-34,56,-34,55,-34,69,-34,66,-34,67,-34,70,-34,71,-34,72,-34,73,-34,42,-34,43,-34,44,-34,37,-34,40,-34,14,-34,18,-34,22,-34,16,-34,20,-34});
    states[208] = new State(-120);
    states[209] = new State(-122);
    states[210] = new State(-80);
    states[211] = new State(-81);
    states[212] = new State(-73);
    states[213] = new State(-74);
    states[214] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,215,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[215] = new State(-90);
    states[216] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,217,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[217] = new State(-91);
    states[218] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,219,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[219] = new State(-92);
    states[220] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,221,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[221] = new State(-93);
    states[222] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,223,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[223] = new State(-94);
    states[224] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,225,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[225] = new State(-95);
    states[226] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,227,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[227] = new State(-96);
    states[228] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,229,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[229] = new State(-97);
    states[230] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,231,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[231] = new State(-98);
    states[232] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,233,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[233] = new State(-99);
    states[234] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,235,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[235] = new State(-100);
    states[236] = new State(new int[]{61,32,60,41,62,42,12,44,13,45,21,47,19,53,17,63,53,118,41,127,42,162,38,166,39,169,59,171,4,130},new int[]{-16,237,-15,27,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173,-17,174,-18,175});
    states[237] = new State(-101);
    states[238] = new State(new int[]{20,8,19,7,7,13,8,20,9,140,5,150,10,158,11,183,61,32,60,41,62,42,12,44,13,45,21,47,17,63,53,118,41,127,42,162,38,166,39,169,59,171},new int[]{-7,9,-5,239,-8,6,-9,12,-10,19,-11,139,-12,149,-13,157,-14,176,-15,185,-19,28,-30,29,-35,33,-22,34,-36,40,-31,43,-32,46,-33,52,-34,62,-20,66,-21,114,-23,115,-24,116,-25,117,-26,173});
    states[239] = new State(-8);
    states[240] = new State(new int[]{24,-42,25,-42,26,-42,27,-42,28,-42,29,-42,30,-42,31,-42,32,-42,65,-42,34,-42,35,-42,36,-42,38,-42,39,-42,15,-42,21,-42,17,-42,41,-42,68,-42,50,-42,57,-42,58,-42,51,-42,52,-42,54,-42,56,-42,55,-42,69,-42,66,-42,67,-42,70,-42,71,-42,72,-42,73,-42,42,-42,43,-42,44,-42,37,-42,40,-42,14,-42,23,-80});
    states[241] = new State(new int[]{15,-36,21,-36,17,-36,41,-36,68,-36,50,-36,57,-36,58,-36,51,-36,52,-36,54,-36,56,-36,55,-36,69,-36,66,-36,67,-36,70,-36,71,-36,72,-36,73,-36,42,-36,43,-36,44,-36,37,-36,40,-36,14,-36,23,-81});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-3,-4});
    rules[6] = new Rule(-4, new int[]{-5});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-7, new int[]{-5});
    rules[9] = new Rule(-7, new int[]{-7,-5});
    rules[10] = new Rule(-5, new int[]{-8});
    rules[11] = new Rule(-5, new int[]{-9});
    rules[12] = new Rule(-5, new int[]{-10});
    rules[13] = new Rule(-5, new int[]{-11});
    rules[14] = new Rule(-5, new int[]{-12});
    rules[15] = new Rule(-5, new int[]{-13});
    rules[16] = new Rule(-5, new int[]{-14,14});
    rules[17] = new Rule(-5, new int[]{-15,14});
    rules[18] = new Rule(-16, new int[]{-15});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-16, new int[]{-18});
    rules[21] = new Rule(-15, new int[]{-19});
    rules[22] = new Rule(-15, new int[]{-20});
    rules[23] = new Rule(-20, new int[]{-21});
    rules[24] = new Rule(-20, new int[]{-22});
    rules[25] = new Rule(-20, new int[]{-23});
    rules[26] = new Rule(-20, new int[]{-24});
    rules[27] = new Rule(-20, new int[]{-25});
    rules[28] = new Rule(-20, new int[]{-26});
    rules[29] = new Rule(-27, new int[]{-17});
    rules[30] = new Rule(-27, new int[]{-18});
    rules[31] = new Rule(-28, new int[]{-22});
    rules[32] = new Rule(-28, new int[]{-27});
    rules[33] = new Rule(-28, new int[]{-29});
    rules[34] = new Rule(-22, new int[]{-30});
    rules[35] = new Rule(-22, new int[]{60});
    rules[36] = new Rule(-22, new int[]{62});
    rules[37] = new Rule(-22, new int[]{-31});
    rules[38] = new Rule(-22, new int[]{-32});
    rules[39] = new Rule(-22, new int[]{-33});
    rules[40] = new Rule(-22, new int[]{-34});
    rules[41] = new Rule(-22, new int[]{17,-16,18});
    rules[42] = new Rule(-30, new int[]{61});
    rules[43] = new Rule(-30, new int[]{-35});
    rules[44] = new Rule(-30, new int[]{-36});
    rules[45] = new Rule(-8, new int[]{19,20});
    rules[46] = new Rule(-8, new int[]{19,-7,20});
    rules[47] = new Rule(-37, new int[]{-5});
    rules[48] = new Rule(-37, new int[]{14});
    rules[49] = new Rule(-6, new int[]{4,61,17,-38,18,-39});
    rules[50] = new Rule(-17, new int[]{4,17,-38,18,-39});
    rules[51] = new Rule(-18, new int[]{4,61,17,-38,18,-39});
    rules[52] = new Rule(-39, new int[]{19,20});
    rules[53] = new Rule(-39, new int[]{19,-3,20});
    rules[54] = new Rule(-13, new int[]{10,14});
    rules[55] = new Rule(-13, new int[]{10,-16,14});
    rules[56] = new Rule(-38, new int[]{61});
    rules[57] = new Rule(-38, new int[]{-38,16,61});
    rules[58] = new Rule(-38, new int[]{});
    rules[59] = new Rule(-9, new int[]{7,17,-16,18,-37});
    rules[60] = new Rule(-10, new int[]{8,-8,7,17,-16,18,14});
    rules[61] = new Rule(-11, new int[]{9,17,-40,14,-40,14,-40,18,-37});
    rules[62] = new Rule(-40, new int[]{-16});
    rules[63] = new Rule(-40, new int[]{});
    rules[64] = new Rule(-12, new int[]{5,17,-16,18,-37});
    rules[65] = new Rule(-12, new int[]{5,17,-16,18,-37,6,-37});
    rules[66] = new Rule(-14, new int[]{11,-41});
    rules[67] = new Rule(-14, new int[]{-14,16,-41});
    rules[68] = new Rule(-41, new int[]{61});
    rules[69] = new Rule(-41, new int[]{61,24,-16});
    rules[70] = new Rule(-31, new int[]{12});
    rules[71] = new Rule(-31, new int[]{13});
    rules[72] = new Rule(-32, new int[]{21,-42,22});
    rules[73] = new Rule(-32, new int[]{21,22});
    rules[74] = new Rule(-42, new int[]{-16});
    rules[75] = new Rule(-42, new int[]{-42,16,-16});
    rules[76] = new Rule(-33, new int[]{19,-43,20});
    rules[77] = new Rule(-43, new int[]{-44});
    rules[78] = new Rule(-43, new int[]{-44,16,-43});
    rules[79] = new Rule(-44, new int[]{-45,23,-16});
    rules[80] = new Rule(-45, new int[]{61});
    rules[81] = new Rule(-45, new int[]{62});
    rules[82] = new Rule(-34, new int[]{-22,17,-46,18});
    rules[83] = new Rule(-29, new int[]{-27,17,-46,18});
    rules[84] = new Rule(-46, new int[]{-16});
    rules[85] = new Rule(-46, new int[]{-46,16,-16});
    rules[86] = new Rule(-46, new int[]{});
    rules[87] = new Rule(-36, new int[]{-22,21,-16,22});
    rules[88] = new Rule(-35, new int[]{-22,15,61});
    rules[89] = new Rule(-19, new int[]{-30,24,-16});
    rules[90] = new Rule(-19, new int[]{-30,25,-16});
    rules[91] = new Rule(-19, new int[]{-30,26,-16});
    rules[92] = new Rule(-19, new int[]{-30,27,-16});
    rules[93] = new Rule(-19, new int[]{-30,28,-16});
    rules[94] = new Rule(-19, new int[]{-30,29,-16});
    rules[95] = new Rule(-19, new int[]{-30,30,-16});
    rules[96] = new Rule(-19, new int[]{-30,31,-16});
    rules[97] = new Rule(-19, new int[]{-30,32,-16});
    rules[98] = new Rule(-19, new int[]{-30,65,-16});
    rules[99] = new Rule(-19, new int[]{-30,34,-16});
    rules[100] = new Rule(-19, new int[]{-30,35,-16});
    rules[101] = new Rule(-19, new int[]{-30,36,-16});
    rules[102] = new Rule(-23, new int[]{-20,68,-20});
    rules[103] = new Rule(-23, new int[]{-20,69,-20});
    rules[104] = new Rule(-23, new int[]{-20,66,-20});
    rules[105] = new Rule(-23, new int[]{-20,67,-20});
    rules[106] = new Rule(-23, new int[]{-20,70,-20});
    rules[107] = new Rule(-23, new int[]{-20,71,-20});
    rules[108] = new Rule(-23, new int[]{-20,72,-20});
    rules[109] = new Rule(-23, new int[]{-20,73,-20});
    rules[110] = new Rule(-21, new int[]{-20,41,-20});
    rules[111] = new Rule(-21, new int[]{-20,42,-20});
    rules[112] = new Rule(-21, new int[]{-20,43,-20});
    rules[113] = new Rule(-21, new int[]{-20,44,-20});
    rules[114] = new Rule(-21, new int[]{-20,37,-22});
    rules[115] = new Rule(-21, new int[]{-20,40,-20});
    rules[116] = new Rule(-25, new int[]{53,-28});
    rules[117] = new Rule(-25, new int[]{41,-28});
    rules[118] = new Rule(-25, new int[]{42,-28});
    rules[119] = new Rule(-25, new int[]{38,-30});
    rules[120] = new Rule(-25, new int[]{-30,38});
    rules[121] = new Rule(-25, new int[]{39,-30});
    rules[122] = new Rule(-25, new int[]{-30,39});
    rules[123] = new Rule(-25, new int[]{59,-28});
    rules[124] = new Rule(-24, new int[]{-20,50,-20});
    rules[125] = new Rule(-24, new int[]{-20,51,-20});
    rules[126] = new Rule(-24, new int[]{-20,52,-20});
    rules[127] = new Rule(-24, new int[]{-20,54,-20});
    rules[128] = new Rule(-24, new int[]{-20,56,-20});
    rules[129] = new Rule(-24, new int[]{-20,55,-20});
    rules[130] = new Rule(-26, new int[]{-20,57,-20});
    rules[131] = new Rule(-26, new int[]{-20,58,-20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> statements_and_declarations
{ CheckIfReturnInMain(); Result = (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.n = Result; }
        break;
      case 3: // main -> /* empty */
{ Result = new StatementsAndDeclarations(); CurrentSemanticValue.n = Result; }
        break;
      case 4: // statements_and_declarations -> statement_or_declaration
{ var nodes = new StatementsAndDeclarations(); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 5: // statements_and_declarations -> statements_and_declarations, 
              //                                statement_or_declaration
{ var nodes = ((StatementsAndDeclarations)ValueStack[ValueStack.Depth-2].n); nodes.Nodes.Add(ValueStack[ValueStack.Depth-1].n);  CurrentSemanticValue.n = nodes;}
        break;
      case 8: // statements -> statement
{ var stmts = new StatementsNode(); stmts.Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = stmts; }
        break;
      case 9: // statements -> statements, statement
{ ((StatementsNode)ValueStack[ValueStack.Depth-2].n).Statements.Add((StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 10: // statement -> block
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // statement -> while
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // statement -> dowhile
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 13: // statement -> for
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 14: // statement -> if
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 15: // statement -> return
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 16: // statement -> variable_declaration, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 17: // statement -> statement_expression, SEMICOLON
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n;}
        break;
      case 18: // expression -> statement_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 19: // expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 20: // expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 21: // statement_expression -> assignment
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 22: // statement_expression -> binary_valid_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 23: // binary_valid_expression -> arithmetic
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 24: // binary_valid_expression -> indexer_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 25: // binary_valid_expression -> comparison
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 26: // binary_valid_expression -> bitwise
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 27: // binary_valid_expression -> unary
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 28: // binary_valid_expression -> logical
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 29: // invocation_expression -> function_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 30: // invocation_expression -> function_named_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 31: // unary_expression -> indexer_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 32: // unary_expression -> invocation_expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 33: // unary_expression -> function_invocation_func
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 35: // indexer_expression -> NUMBER
{ CurrentSemanticValue.n = new NumberNode(ValueStack[ValueStack.Depth-1].num); }
        break;
      case 36: // indexer_expression -> STRING
{ CurrentSemanticValue.n = new StringNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 37: // indexer_expression -> boolean
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 38: // indexer_expression -> array
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 39: // indexer_expression -> object
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 40: // indexer_expression -> function_invocation
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 41: // indexer_expression -> LPARENTH, expression, RPARENTH
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 42: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.n = new IdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 43: // lvalue -> property_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 44: // lvalue -> indexer_getter
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 45: // block -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 46: // block -> LCURLYBRACE, statements, RCURLYBRACE
{ CurrentSemanticValue.n = new BlockNode((StatementsNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 47: // statement_or_semicolon -> statement
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 48: // statement_or_semicolon -> SEMICOLON
{ CurrentSemanticValue.n = new EmptyExpression(); }
        break;
      case 49: // function_declaration -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                         RPARENTH, function_body
{ CurrentSemanticValue.n = new FunctionDeclarationNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 50: // function_expression -> FUNCTION, LPARENTH, arguments_list, RPARENTH, 
               //                        function_body
{ CurrentSemanticValue.n = new FunctionExpressionNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 51: // function_named_expression -> FUNCTION, IDENTIFIER, LPARENTH, arguments_list, 
               //                              RPARENTH, function_body
{CurrentSemanticValue.n = new FunctionNamedExpressionNode(new IdentifierNode(ValueStack[ValueStack.Depth-5].str), (ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, (StatementsAndDeclarations)ValueStack[ValueStack.Depth-1].n); LastReturnNode = null; }
        break;
      case 52: // function_body -> LCURLYBRACE, RCURLYBRACE
{ CurrentSemanticValue.n = new StatementsAndDeclarations(); }
        break;
      case 53: // function_body -> LCURLYBRACE, statements_and_declarations, RCURLYBRACE
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 54: // return -> RETURN, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 55: // return -> RETURN, expression, SEMICOLON
{ LastReturnNode = new ReturnNode(); CurrentSemanticValue.n = LastReturnNode; }
        break;
      case 56: // arguments_list -> IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 57: // arguments_list -> arguments_list, COMMA, IDENTIFIER
{ CurrentSemanticValue.n = new ArgumentsListNode((ArgumentsListNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 58: // arguments_list -> /* empty */
{ CurrentSemanticValue.n = new ArgumentsListNode(); }
        break;
      case 59: // while -> WHILE, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new WhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 60: // dowhile -> DO, block, WHILE, LPARENTH, expression, RPARENTH, SEMICOLON
{ CurrentSemanticValue.n = new DoWhileNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-6].n); }
        break;
      case 61: // for -> FOR, LPARENTH, expression_or_empty, SEMICOLON, expression_or_empty, 
               //        SEMICOLON, expression_or_empty, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new ForNode((StatementNode)ValueStack[ValueStack.Depth-7].n, (StatementNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 62: // expression_or_empty -> expression
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 64: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon
{ CurrentSemanticValue.n = new IfNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 65: // if -> IF, LPARENTH, expression, RPARENTH, statement_or_semicolon, ELSE, 
               //       statement_or_semicolon
{ CurrentSemanticValue.n = new IfElseNode((ExpressionNode)ValueStack[ValueStack.Depth-5].n, (StatementNode)ValueStack[ValueStack.Depth-3].n, (StatementNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 66: // variable_declaration -> VAR, variable_declaration_identifier
{ CurrentSemanticValue.n = new VariableDeclarationNode((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 67: // variable_declaration -> variable_declaration, COMMA, 
               //                         variable_declaration_identifier
{ var nodes = ((VariableDeclarationNode)ValueStack[ValueStack.Depth-3].n); nodes.Declarations.Add((VariableDeclarationIdentifierNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = nodes; }
        break;
      case 68: // variable_declaration_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-1].str); }
        break;
      case 69: // variable_declaration_identifier -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.n = new VariableDeclarationIdentifierNode(ValueStack[ValueStack.Depth-3].str, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 70: // boolean -> TRUE
{ CurrentSemanticValue.n = new BooleanNode(true); }
        break;
      case 71: // boolean -> FALSE
{ CurrentSemanticValue.n = new BooleanNode(false); }
        break;
      case 72: // array -> LBRACKET, array_list, RBRACKET
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; }
        break;
      case 73: // array -> LBRACKET, RBRACKET
{ CurrentSemanticValue.n = new ArrayNode(); }
        break;
      case 74: // array_list -> expression
{ var arr = new ArrayNode(); arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 75: // array_list -> array_list, COMMA, expression
{ var arr = (ArrayNode)ValueStack[ValueStack.Depth-3].n; arr.Values.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.n = arr; }
        break;
      case 76: // object -> LCURLYBRACE, object_properties_list, RCURLYBRACE
{ CurrentSemanticValue.n = new ObjectNode((List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-2].add); }
        break;
      case 77: // object_properties_list -> object_property
{ var l = new List<ObjectPropertyNode>(); l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-1].n); CurrentSemanticValue.add = l; }
        break;
      case 78: // object_properties_list -> object_property, COMMA, object_properties_list
{ var l = (List<ObjectPropertyNode>)ValueStack[ValueStack.Depth-1].add; l.Add((ObjectPropertyNode)ValueStack[ValueStack.Depth-3].n); CurrentSemanticValue.add = l; }
        break;
      case 79: // object_property -> object_property_identifier, COLON, expression
{ CurrentSemanticValue.n = new ObjectPropertyNode((ObjectPropertyIdentifierNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 80: // object_property_identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 81: // object_property_identifier -> STRING
{ CurrentSemanticValue.n = new ObjectPropertyIdentifierNode(new StringNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 82: // function_invocation -> indexer_expression, LPARENTH, 
               //                        function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 83: // function_invocation_func -> invocation_expression, LPARENTH, 
               //                             function_invocation_arguments_list, RPARENTH
{ CurrentSemanticValue.n = new FunctionInvocationNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 84: // function_invocation_arguments_list -> expression
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 85: // function_invocation_arguments_list -> function_invocation_arguments_list, COMMA, 
               //                                       expression
{ var al = (FunctionInvocationArgumentsListNode)ValueStack[ValueStack.Depth-3].n; CurrentSemanticValue.n = al; al.Arguments.Add((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 86: // function_invocation_arguments_list -> /* empty */
{ CurrentSemanticValue.n = new FunctionInvocationArgumentsListNode(); }
        break;
      case 87: // indexer_getter -> indexer_expression, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.n = new IndexerGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-4].n, (ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 88: // property_getter -> indexer_expression, DOT, IDENTIFIER
{ CurrentSemanticValue.n = new PropertyGetterNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, new IdentifierNode(ValueStack[ValueStack.Depth-1].str)); }
        break;
      case 89: // assignment -> lvalue, ASSIGN, expression
{ CurrentSemanticValue.n = new AssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 90: // assignment -> lvalue, ADDASSG, expression
{ CurrentSemanticValue.n = new AdditionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 91: // assignment -> lvalue, SUBASSG, expression
{ CurrentSemanticValue.n = new SubstractionAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 92: // assignment -> lvalue, MULTASSG, expression
{ CurrentSemanticValue.n = new MultiplicationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 93: // assignment -> lvalue, DIVASSG, expression
{ CurrentSemanticValue.n = new DivisonAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 94: // assignment -> lvalue, REMASSG, expression
{ CurrentSemanticValue.n = new RemainderAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 95: // assignment -> lvalue, EXPASSG, expression
{ CurrentSemanticValue.n = new ExponentiationAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 96: // assignment -> lvalue, LEFTSHFTASG, expression
{ CurrentSemanticValue.n = new LeftShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 97: // assignment -> lvalue, RIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new RightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 98: // assignment -> lvalue, URIGHTSHFTASSG, expression
{ CurrentSemanticValue.n = new UnsignedRightShiftAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 99: // assignment -> lvalue, BITWISEANDASSG, expression
{ CurrentSemanticValue.n = new BitwiseAndAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 100: // assignment -> lvalue, BITWISEXORASSG, expression
{ CurrentSemanticValue.n = new BitwiseXorAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 101: // assignment -> lvalue, BITWISEORASSG, expression
{ CurrentSemanticValue.n = new BitwiseOrAssignmentNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 102: // comparison -> binary_valid_expression, EQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new EqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 103: // comparison -> binary_valid_expression, NOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new NotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 104: // comparison -> binary_valid_expression, STRICTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 105: // comparison -> binary_valid_expression, STRICTNOTEQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new StrictNotEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 106: // comparison -> binary_valid_expression, GREATERTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 107: // comparison -> binary_valid_expression, GREATERTHANOREQUAL, 
                //               binary_valid_expression
{ CurrentSemanticValue.n = new GreaterThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 108: // comparison -> binary_valid_expression, LESSTHAN, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 109: // comparison -> binary_valid_expression, LESSTHANOREQUAL, binary_valid_expression
{ CurrentSemanticValue.n = new LessThanOrEqualNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 110: // arithmetic -> binary_valid_expression, ADDITION, binary_valid_expression
{ CurrentSemanticValue.n = new AdditionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 111: // arithmetic -> binary_valid_expression, SUBTRACTION, binary_valid_expression
{ CurrentSemanticValue.n = new SubtractionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 112: // arithmetic -> binary_valid_expression, MULTIPLICATION, binary_valid_expression
{ CurrentSemanticValue.n = new MultiplicationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 113: // arithmetic -> binary_valid_expression, DIVISION, binary_valid_expression
{ CurrentSemanticValue.n = new DivisionNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 114: // arithmetic -> binary_valid_expression, REMAINDER, indexer_expression
{ CurrentSemanticValue.n = new RemainderNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 115: // arithmetic -> binary_valid_expression, EXPONENTIATION, binary_valid_expression
{ CurrentSemanticValue.n = new ExponentiationNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 116: // unary -> BITWISENOT, unary_expression
{ CurrentSemanticValue.n = new BitwiseNotNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 117: // unary -> ADDITION, unary_expression
{ CurrentSemanticValue.n = new UnaryPlusNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 118: // unary -> SUBTRACTION, unary_expression
{ CurrentSemanticValue.n = new UnaryNegationNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 119: // unary -> INCREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 120: // unary -> lvalue, INCREMENT
{ CurrentSemanticValue.n = new PostfixIncrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 121: // unary -> DECREMENT, lvalue
{ CurrentSemanticValue.n = new PrefixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 122: // unary -> lvalue, DECREMENT
{ CurrentSemanticValue.n = new PostfixDecrement((ExpressionNode)ValueStack[ValueStack.Depth-2].n); }
        break;
      case 123: // unary -> LOGICALNOT, unary_expression
{ CurrentSemanticValue.n = new LogicalNotNode((ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 124: // bitwise -> binary_valid_expression, BITWISEAND, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseAndNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 125: // bitwise -> binary_valid_expression, BITWISEOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseOrNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 126: // bitwise -> binary_valid_expression, BITWISEXOR, binary_valid_expression
{ CurrentSemanticValue.n = new BitwiseXorNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 127: // bitwise -> binary_valid_expression, LEFTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new LeftShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 128: // bitwise -> binary_valid_expression, SIGNPROPRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new SignPropagatingRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 129: // bitwise -> binary_valid_expression, ZEROFILLRIGHTSHIFT, binary_valid_expression
{ CurrentSemanticValue.n = new ZeroFillRightShiftNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 130: // logical -> binary_valid_expression, LOGICALAND, binary_valid_expression
{ CurrentSemanticValue.n = new LogicalAndNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
      case 131: // logical -> binary_valid_expression, LOGICALOR, binary_valid_expression
{ CurrentSemanticValue.n = new LogicalOrNode((ExpressionNode)ValueStack[ValueStack.Depth-3].n, (ExpressionNode)ValueStack[ValueStack.Depth-1].n); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
